How to compile
==============

1. Make sure that you have the boost libraries version >= 1.36
   installed.  If not, you can download them from http://www.boost.org

2. Create the makefile using `./configure'.  Run `./configure --help'
   to see all options.

   If you want to use the boost libraries and headers from specific
   directories $BOOST_LIB, $BOOST_INC, you can run configure via

      $ ./configure --boost-lib-dir=$BOOST_LIB --boost-inc-dir=$BOOST_INC

3. To compile run `make'.  (Parallel make is supported via the -jN
   option, where N is the number of cores to use.)


How to create a model
=====================

1. Create

   * a model directory models/<model>/
   * a makefile module models/<model>/module.mk
   * and a model file  models/<model>/FlexibleSUSY.m

   via

   $ ./createmodel --models=<model>

   Here <model> is the name of your model (e.g. MSSM, NMSSM, etc.).
   See `./createmodel --help' for more details.

2. Create the Makefile and register your model via

   $ ./configure --with-models=<model>

   Use `./configure --with-models=all' to build all models.
   See `./configure --help' for more options.

3. Compile by running

   $ make

   When `make' is executed, Mathematica will be called, which will
   generate the model classes and will write them to models/<model>/ .
   Afterwards these model classes will be compiled and a user example
   spectrum generator models/<model>/run_<model>.x will be created.


Example
=======

   $ ./createmodel --models=MSSM,NMSSM
   $ ./configure --with-models=MSSM,NMSSM
   $ make

   $ ./models/MSSM/run_MSSM.x # run the spectrum generator


Dynamic libraries
=================

If you want to create dynamic libraries (instead of static libraries)
you have to pass all the following options to the ./configure script

   --disable-static-libs
   --with-lib-ext=".so"
   --with-make-lib-cmd="gcc -shared -o"

Example:

   $ ./configure --with-models=MSSM,NMSSM \
     --disable-static-libs \
     --with-lib-ext=".so" \
     --with-make-lib-cmd="gcc -shared -o"

Important remark:

The libraries are linked to the executables with _absolute_ paths.
This means that, if you move the package directory to another
location, the executables will no longer work, because the libraries
are now at another place.  To make the executables work again, you
have to rebuild them via

   $ make clean-executables
   $ make allexec


Looptools
=========

It is possible to use Looptools (http://www.feynarts.de/looptools/)
for calculating the loop functions, instead of using Softsusy's loop
functions.  To enable Looptools configure via

   $ ./configure --enable-looptools

To use the Looptools library and header files from a specific
directory configure via

   $ ./configure --enable-looptools \
     --with-looptools-incdir="/path/to/looptools/build/" \
     --with-looptools-libdir="/path/to/looptools/build/"

Note: Looptools 2.8 or higher is required.  Versions <= 2.7 will fail
to build with the following compiler error message (or similar):

   In file included from models/MSSM/MSSM_two_scale_model.cpp:28:0:
   /usr/include/clooptools.h:67:28: error: conflicting declaration ‘typedef struct std::complex<double> Complex’
   In file included from src/utils.h:15:0,
                    from src/rge.h:17,
                    from models/MSSM/MSSM_two_scale_soft_parameters.hpp:24,
                    from models/MSSM/MSSM_two_scale_model.hpp:25,
                    from models/MSSM/MSSM_two_scale_model.cpp:21:
   src/mycomplex.h:17:7: error: ‘class Complex’ has a previous declaration as ‘class Complex’
