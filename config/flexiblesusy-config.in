#!/bin/sh

# Author: Alexander Voigt

BASEDIR=$(dirname $0)
ABSBASEDIR=$(cd ${BASEDIR}; pwd)
CONFIGDIR="${BASEDIR}/config"

packagename="@PKGNAME@"
version="@FLEXIBLESUSY_VERSION@"

algorithms="@ALGORITHMS@"
addons="@ADDONS@"
blaslibs="@BLASLIBS@"
boostflags="@BOOSTFLAGS@"
boosttestlibs="@BOOSTTESTLIBS@"
boostthreadlibs="@BOOSTTHREADLIBS@"
cppflags="@CPPFLAGS@"
cxx="@CXX@"
cxxflags="@CXXFLAGS@"
eigenflags="@EIGENFLAGS@"
fc="@FC@"
fflags="@FFLAGS@"
flibs="@FLIBS@"
gslflags="@GSLFLAGS@"
gsllibs="@GSLLIBS@"
lapacklibs="@LAPACKLIBS@"
ldflags="@LDFLAGS@"
ldlibs="@LDLIBS@"
loopfuncflags="@LOOPFUNCFLAGS@"
loopfunclibs="@LOOPFUNCLIBS@"
math="@MATH@"
models="@MODELS@"
module_make_lib_cmd="@MODULE_MAKE_LIB_CMD@"
module_lib_ext="@MODULE_LIBEXT@"
shared_lib_cmd="@SHARED_LIB_CMD@"
sqliteflags="@SQLITEFLAGS@"
sqlitelibs="@SQLITELIBS@"
static_lib_cmd="@STATIC_LIB_CMD@"
threadlibs="@THREADLIBS@"
tsilflags="@TSILFLAGS@"
tsillibs="@TSILLIBS@"

# creates full CPPFLAGS from list of modules
create_cppflags_with_modules() {
    cppflags_with_modules="$cppflags"

    for m in config src fflite legacy slhaea doc $models $addons ; do
        cppflags_with_modules="$cppflags_with_modules -I${m}"
    done

    cppflags_with_modules="$cppflags_with_modules -I. $gslflags $eigenflags $boostflags"

    [ "x@ENABLE_TSIL@" = xyes ] && \
        cppflags_with_modules="$cppflags_with_modules $tsilflags"

    [ "x@ENABLE_LOOPTOOLS@" = xyes -a "x@ENABLE_FFLITE@" = xyes ] && \
        cppflags_with_modules="$cppflags_with_modules $loopfuncflags"

    [ "x@ENABLE_LIBRARYLINK@" = xyes ] && \
        cppflags_with_modules="$cppflags_with_modules $(${CONFIGDIR}/mathematica_include_paths.sh --math-cmd="$math" -I --librarylink --mathlink)"
}

# creates list of flexiblesusy libraries
create_flexiblesusylibs() {
    flexiblesusylibs=

    for a in $models $addons ; do
        flexiblesusylibs="$flexiblesusylibs ${ABSBASEDIR}/${a}/lib$(basename $a)${module_lib_ext}"
    done

    flexiblesusylibs="$flexiblesusylibs ${ABSBASEDIR}/src/libflexisusy${module_lib_ext}"
    flexiblesusylibs="$flexiblesusylibs ${ABSBASEDIR}/legacy/liblegacy${module_lib_ext}"
}

create_cppflags_with_modules
create_flexiblesusylibs

compile_cmd="$cxx $cppflags_with_modules $cxxflags"
linking_cmd="$cxx $ldflags $flexiblesusylibs $loopfunclibs $gsllibs $boostthreadlibs $lapacklibs $blaslibs $flibs $sqlitelibs $tsillibs $threadlibs $ldlibs"

help() {
cat <<EOF
Usage: `basename $0` [options]
Options:
  --algorithms          Print all algorithms that are used
  --addons              Print all addons that are build
  --blaslibs            Print BLAS libraries, BLASLIBS
  --boostflags          Print compiler flags for BOOST, BOOSTFLAGS
  --boosttestlibs       Print BOOST test libraries, BOOSTTESTLIBS
  --boostthreadlibs     Print BOOST thread libraries, BOOSTTHREADLIBS
  --compile-cmd         Print compilation command for object files
  --cppflags            Print C preprocessor flags, CPPFLAGS
  --cppflags-with-modules
                        Print C preprocessor flags together with -I directives
                        for each model and addon
  --cxx                 Print C++ compiler, CXX
  --cxxflags            Print C++ compiler flags, CXXFLAGS
  --eigenflags          Print compiler flags for Eigen, EIGENFLAGS
  --enable-colors       Test if colors are enabled
  --enable-compile      Test if compilation is enabled
  --enable-compiler-warnings
                        Test if compiler warnings are enabled
  --enable-debug        Test if debug mode is enabled
  --enable-fflite       Test if FFlite is enabled
  --enable-lapack       Test if LAPACK is enabled
  --enable-librarylink  Test if LibraryLink is enabled
  --enable-looptools    Test if LoopTools is enabled
  --enable-mass-error-check
                        Test if mass error check is enabled
  --enable-ilp64mkl-workaround
                        Test if ilp64 MKL workaround is enabled
  --enable-silent       Test if silet mode is enabled
  --enable-shared-libs  Test if shared libraries are build
  --enable-sqlite       Test if SQLite is enabled
  --enable-static       Test if static executables are build
  --enable-threads      Test if multi-threading is enabled
  --enable-tsil         Test if TSIL is linked in
  --enable-verbose      Test if verbose mode is enabled
  --fc                  Print Fortran compiler, FC
  --fflags              Print Fortran flags, FFLAGS
  --flibs               Print Fortran libraries, FLIBS
  --gslflags            Print compiler flags for GSL, GSLFLAGS
  --gsllibs             Print GSL libraries, GSLLIBS
  --lapacklibs          Print LAPACK libraries, LAPACKLIBS
  --ldflags             Print flags for optional libraries, LDFLAGS
  --ldlibs              Print optional libraries, LDLIBS
  --linking-cmd         Print linking command for executables
  --loopfuncflags       Print compiler flags for loop function library, LOOPFUNCFLAGS
  --loopfunclibs        Print loop function libraries, LOOPFUNCLIBS
  --math-cmd            Print Mathematica kernel command, MATH
  --models              Print all models that are build
  --module-make-lib-cmd Print command to build module libraries, MODULE_MAKE_LIB_CMD
  --module-lib-ext      Print file name extension for module libraries, MODULE_LIBEXT
  --shared-lib-cmd      Print command to build shared library, SHARED_LIB_CMD
  --sqliteflags         Print SQLite flags, SQLITEFLAGS, SQLITEFLAGS
  --sqlitelibs          Print SQLite libararies, SQLITELIBS, SQLITELIBS
  --static-lib-cmd      Print command to build static library, STATIC_LIB_CMD
  --threadlibs          Print thread library, THREADLIBS
  --tsilflags           Print TSIL flags, TSILFLAGS
  --tsillibs            Print TSIL libraries, TSILLIBS
  --with-<addon>        Test if <addon> is compiled in
  --with-<algorithm>    Test if <algorithm> is compiled in
  --with-<model>        Test if <model> is compiled in
  --version             Print the $packagename version
  --help                Print this message
EOF
}

out=""

while test $# -gt 0; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *)    optarg= ;;
    esac

    case $1 in
        --addons)                out="$out $addons" ;;
        --algorithms)            out="$out $algorithms" ;;
        --blaslibs)              out="$out $blaslibs" ;;
        --boostflags)            out="$out $boostflags" ;;
        --boosttestlibs)         out="$out $boosttestlibs" ;;
        --boostthreadlibs)       out="$out $boostthreadlibs" ;;
        --compile-cmd)           out="$out $compile_cmd" ;;
        --cppflags)              out="$out $cppflags" ;;
        --cppflags-with-modules) out="$out $cppflags_with_modules" ;;
        --cxx)                   out="$out $cxx" ;;
        --cxxflags)              out="$out $cxxflags" ;;
        --eigenflags)            out="$out $eigenflags" ;;
        --fc)                    out="$out $fc" ;;
        --fflags)                out="$out $fflags" ;;
        --flibs)                 out="$out $flibs" ;;
        --gslflags)              out="$out $gslflags" ;;
        --gsllibs)               out="$out $gsllibs" ;;
        --lapacklibs)            out="$out $lapacklibs" ;;
        --ldflags)               out="$out $ldflags" ;;
        --ldlibs)                out="$out $ldlibs" ;;
        --linking-cmd)           out="$out $linking_cmd" ;;
        --loopfuncflags)         out="$out $loopfuncflags" ;;
        --loopfunclibs)          out="$out $loopfunclibs" ;;
        --math-cmd)              out="$out $math" ;;
        --models)                out="$out $models" ;;
        --module-make-lib-cmd)   out="$out $module_make_lib_cmd" ;;
        --module-lib-ext)        out="$out $module_lib_ext" ;;
        --shared-lib-cmd)        out="$out $shared_lib_cmd" ;;
        --sqliteflags)           out="$out $sqliteflags" ;;
        --sqlitelibs)            out="$out $sqlitelibs" ;;
        --static-lib-cmd)        out="$out $static_lib_cmd" ;;
        --threadlibs)            out="$out $threadlibs" ;;
        --tsilflags)             out="$out $tsilflags" ;;
        --tsillibs)              out="$out $tsillibs" ;;
        --with-*)
      ### Check for models and addons
            f=`echo $1 | sed 's/--with-//'`
            for c in $models $addons $algorithms ; do
                if test "x`basename $c`" = "x$f" ; then
                    out="$out yes"
                    break
                fi
                c=""
            done
            if test "x$c" = "x" ; then
                out="$out no"
            fi
            ;;
      ### flags
        --enable-colors)              out="$out @ENABLE_COLOR_PRINTOUT@" ;;
        --enable-compile)             out="$out @ENABLE_COMPILE@" ;;
        --enable-compiler-warnings)   out="$out @ENABLE_COMPILER_WARNINGS@" ;;
        --enable-debug)               out="$out @ENABLE_DEBUG@" ;;
        --enable-fflite)              out="$out @ENABLE_FFLITE@" ;;
        --enable-lapack)              out="$out @ENABLE_LAPACK@" ;;
        --enable-librarylink)         out="$out @ENABLE_LIBRARYLINK@" ;;
        --enable-looptools)           out="$out @ENABLE_LOOPTOOLS@" ;;
        --enable-mass-error-check)    out="$out @ENABLE_CHECK_EIGENVALUE_ERROR@" ;;
        --enable-ilp64mkl-workaround) out="$out @ENABLE_ILP64MKL_WORKAROUND@" ;;
        --enable-silent)              out="$out @ENABLE_SILENT@" ;;
        --enable-shared-libs)         out="$out @ENABLE_SHARED_LIBS@" ;;
        --enable-sqlite)              out="$out @ENABLE_SQLITE@" ;;
        --enable-static)              out="$out @ENABLE_STATIC@" ;;
        --enable-threads)             out="$out @ENABLE_THREADS@" ;;
        --enable-tsil)                out="$out @ENABLE_TSIL@" ;;
        --enable-verbose)             out="$out @ENABLE_VERBOSE@" ;;

        --version)                    out="$out $version"  ;;
        --help)
            help
            exit 0
            ;;
        *)
            echo "Unknown argument: $1" 1>&2
            help
            exit 1
            ;;
    esac
    shift
done

### Output the stuff
echo $out
