#!/bin/sh

# configure script for FlexibleSUSY
# Author: Alexander Voigt

PROGRAM_NAME=FlexibleSUSY
PROGRAM_VERSION=0.1
# directory of this script
BASEDIR=$(dirname $0)
# target makefile
MAKEFILE=$BASEDIR/Makefile
MAKEFILE_TMPL=$BASEDIR/config/Makefile.template
# options
boost_lib_dir=""
boost_inc_dir=""
CPPFLAGS=""
CXXFLAGS="-ggdb -O2 -Wall -pedantic -Wextra -Wcast-qual\
 -Wcast-align -Woverloaded-virtual -Wnon-virtual-dtor"
FFLAGS="-g -O2"
LIBS=""
CXX="g++"
FC="gfortran"
MAKELIB="ar cru"

replace_in_makefile() {
    # $1: string to replace
    # rest: what to put into the place of $1
    local what="$1"
    shift
    local by="$@"
    echo "replacing $what by $by in $MAKEFILE"
    sed -e "s|$what|$by|g" -i.orig $MAKEFILE
    rm $MAKEFILE.orig
}

copy_makefile_template() {
    echo "copying makefile template $MAKEFILE_TMPL to $MAKEFILE"
    cp $MAKEFILE_TMPL $MAKEFILE
}

check_library() {
    # This function will try to locate a library [$1] in the directory
    # given in $2.  If $2 is empty it will look in the default paths.
    #
    # The result of the search is stored in found_lib and found_dir,
    # which should be immediately copied, since the variables value will
    # be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 2 ; then
        echo "check_library: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    default_paths="/usr/lib /usr/local/lib"
    lib=$1       ; shift
    libdirl=$1
    libdirs="$default_paths"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$libdirl" = "x" ; then
        libdirs=$libdirl
    fi

    # Write a message
    echo -n "checking for $lib ... "

    libs=""
    for i in $lib ; do
        for ext in .a .lib "" .so .sl .dylib .dll.a ; do
            libs="$libs $i$ext"
        done
    done

    found_dir=""
    found_lib=""

    for p in ${libdirs}; do
	for l in ${libs}; do
	    liblist=`echo $p/$l` # expands wildcard
            for n in ${liblist} ; do
                if test -f $n ; then
		    found_dir=$p
                    found_lib=$l
		    break
		fi
	    done
	done
    done

    if test "x$found_dir" = "x" || test "x$found_lib" = "x" ; then
	echo "not found in $libdirs"
    else
	echo "found in $found_dir"
    fi
}

check_header() {
    # This function will try to locate a header file [$1] in the
    # directory given in $2.  If $2 is empty it will look in the
    # default paths.
    #
    # The result of the search is stored in found_hdr and found_dir,
    # which should be immediately copied, since the variables value
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 2 ; then
        echo "check_header: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    default_paths="/usr/include /usr/local/include"
    hdr=$1       ; shift
    hdrdirl=$1
    hdrdirs="$default_paths"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$hdrdirl" = "x" ; then
        hdrdirs=$hdrdirl
    fi

    # Write a message
    echo -n "checking for $hdr ... "

    found_dir=""
    found_hdr=""

    for p in ${hdrdirs}; do
	hdrlist=`echo $p/$hdr` # expands wildcard
        for n in ${hdrlist} ; do
            if test -f $n ; then
		found_dir=$p
                found_hdr=$hdr
		break
	    fi
	done
    done

    if test "x$found_dir" = "x" || test "x$found_hdr" = "x" ; then
	echo "not found in $hdrdirs"
    else
	echo "found in $found_dir"
    fi
}

check_boost_libs() {
    check_library "libboost_unit_test_framework" "$boost_lib_dir"
    if test "x$found_lib" = "x" ; then
        echo "Warning: libboost_unit_test_framework must be installed"
	echo "  to compile and run the tests, see http://www.boost.org"
    else
	BOOSTLIBS=-lboost_unit_test_framework
	if [ -z "$boost_lib_dir" ]; then
            # assume that the linker will look in the default paths
	    LIBS="$LIBS $BOOSTLIBS"
	else
	    LIBS="$LIBS -L$boost_lib_dir $BOOSTLIBS"
	fi
    fi
}

check_boost_incl() {
    check_header "boost/test/unit_test.hpp" "$boost_inc_dir"
    if test "x$found_hdr" = "x" ; then
        echo "Warning: boost/test/unit_test.hpp must be installed"
	echo "  to compile and run the tests, see http://www.boost.org"
    else
        # assume that the compiler will look in the default paths
	if [ -n "$boost_inc_dir" ]; then
	    CPPFLAGS="$CPPFLAGS -I$boost_inc_dir"
	fi
    fi
}

check_fortran_libs() {
    case "$FC" in
	gfortran)
	    # get default search paths from gfortran
	    search_paths=`gfortran -print-search-dirs | grep libraries | sed 's|:|\n|g;s| *=||g' | sed '/libraries/d'`
	    # add libgfortranbegin if available
	    check_library "libgfortranbegin" "$search_paths"
	    if test "x$found_lib" != "x" ; then
		LIBS="$LIBS -lgfortranbegin"
	    fi
	    LIBS="$LIBS -lgfortran -lm"
	    ;;
    esac
}

define() {
    # $@: list of extra define statemens
    if [ -n "$@" ]; then
	echo "define $@"
	extra_defines="$extra_defines $@"
    fi
}

enable_defines() {
    if [ -n "$extra_defines" ]; then
	echo "adding defines $extra_defines to CPPFLAGS"
	CPPFLAGS="$extra_defines $CPPFLAGS"
    fi
}

help() {
    echo "Usage: ./`basename $0` [options]"
    echo "Options:"
    echo "--boost-lib-dir=    directory to search for BOOST libraries"
    echo "--boost-inc-dir=    directory to search for BOOST headers"
    echo "--colors            enable colored output"
    echo "--cxx=              C++ compiler (default: $CXX)"
    echo "--cxxflags=         C++ compiler flags (default: $CXXFLAGS)"
    echo "--debug             enable debug messages"
    echo "--fc=               Fortran compiler (default: $FC)"
    echo "--fflags=           Fortran compiler flags (default: $FFLAGS)"
    echo "--help,-h           print this help message"
    echo "--make-lib-cmd=     command to make library (default: $MAKELIB)"
    echo "--silent            suppress all command line output"
    echo "--verbose           enable verbose messages"
    echo "--version,-v        print version information"
}

version() {
    echo "$PROGRAM_NAME $PROGRAM_VERSION"
    echo "$PROGRAM_NAME is free software: you can redistribute it and/or modify"
    echo "it under the terms of the GNU General Public License as published by"
    echo "the Free Software Foundation, either version 3 of the License, or"
    echo "(at your option) any later version.  See http://www.gnu.org/licenses/"
}

if test $# -gt 0 ; then
    while test ! "x$1" = "x" ; do
	case "$1" in
	    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
	    *) optarg= ;;
	esac

	case $1 in
	    --boost-lib-dir=*)       boost_lib_dir=$optarg ;;
	    --boost-inc-dir=*)       boost_inc_dir=$optarg ;;
	    --colors)                define "-DCOLOR_PRINTOUT" ;;
	    --cxx=*)                 CXX=$optarg ;;
	    --cxxflags=*)            CXXFLAGS=$optarg ;;
	    --debug)                 define "-DDEBUG" ;;
	    --fc=*)                  FC=$optarg ;;
	    --fflags=*)              FFLAGS=$optarg ;;
	    --help|-h)               help; exit 0 ;;
	    --make-lib-cmd=*)        MAKELIB=$optarg ;;
	    --silent)                define "-DSILENT" ;;
	    --verbose)               define "-DVERBOSE" ;;
	    --version|-v)            version; exit 0 ;;
	    *)  echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;;
	esac
	shift
    done
fi

copy_makefile_template

check_boost_incl
check_boost_libs
check_fortran_libs

enable_defines

replace_in_makefile "@VERSION@"  "$PROGRAM_VERSION"
replace_in_makefile "@PKGNAME@"  "$PROGRAM_NAME"
replace_in_makefile "@LIBS@"     "$LIBS"
replace_in_makefile "@CPPFLAGS@" "$CPPFLAGS"
replace_in_makefile "@CXXFLAGS@" "$CXXFLAGS"
replace_in_makefile "@CXX@"      "$CXX"
replace_in_makefile "@FC@"       "$FC"
replace_in_makefile "@MAKELIB@"  "$MAKELIB"
replace_in_makefile "@FFLAGS@"   "$FFLAGS"
