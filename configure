#!/bin/sh

# configure script for FlexibleSUSY
# Author: Alexander Voigt

PROGRAM_NAME=FlexibleSUSY
PROGRAM_VERSION=0.2

# directory of this script
BASEDIR=$(dirname $0)

# default library directories
default_lib_paths="/usr/lib /usr/local/lib"
default_inc_paths="/usr/include /usr/local/include"

# configure log file
logfile="config.log"

# memory model
memory_model=""

# target makefile
MAKEFILE=$BASEDIR/Makefile
MAKEFILE_TMPL=$BASEDIR/config/Makefile.template

# options
boost_lib_dir=""
boost_inc_dir=""
BOOSTFLAGS=""
gsl_lib_dir=""
gsl_inc_dir=""
lapack_lib_dir=""
GSLFLAGS=""
CPPFLAGS=""
CXXFLAGS="-ggdb -O2 -Wall -pedantic -Wextra -Wcast-qual\
 -Wcast-align -Woverloaded-virtual -Wnon-virtual-dtor"
FFLAGS="-g -O2"
FLIBS=""
BOOSTLIBS=""
LIBEXT=".a"
CXX="g++"
FC="gfortran"
GSLLIBS=""
LAPACKLIBS=""
MAKELIB="ar cru"
MATH="math"
# available RG algorithms
ALGORITHMS="all"
available_algorithms="two_scale lattice"

#_____________________________________________________________________
write_configure_parameters() {
    # This function writes all parameters [$*] to config.status
    configargs="$*"
    configargs=`echo $configargs | sed 's,\\\,\\\\,g'`
    echo "$configargs" > config.status
}

#_____________________________________________________________________
message() {
    # Write a simple message to std out
    if test $# -lt 1 ; then
        echo "message: Too few arguments"
        return 1
    fi
    echo "$* ... "
    logmsg "$*"
}

#_____________________________________________________________________
logmsg() {
    # Write a simple message to std out
    if test $# -lt 1 ; then
        echo "logmsg: Too few arguments"
        return 1
    fi
    if test "x$1" = "x-n"; then
       shift
       echo -n "$*" >> $logfile
    else
       echo "$*" >> $logfile
    fi
}

#_____________________________________________________________________
guess_memory_model () {
    chip=`uname -m | tr '[A-Z]' '[a-z]'`
    case "$chip" in
	*32) memory_model="32"; return 0 ;;
	*64) memory_model="64"; return 0 ;;
	*)   message "Warning: could not guess memory model"; return 1 ;;
    esac
}

#_____________________________________________________________________
check_library() {
    # This function will try to locate a library [$1] in the directory
    # given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_lib and found_dir,
    # which should be immediately copied, since the variables value will
    # be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 3 ; then
        echo "check_library: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    lib=$1       ; shift
    libdirl=$1
    libdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$libdirl" = "x" ; then
        libdirs=$libdirl
    fi

    # Write a message
    checking_msg "$lib"

    libs=""
    for i in $lib ; do
        for ext in .a .lib "" .so .so.0 .sl .dylib .dll.a ; do
            libs="$libs $i$ext"
        done
    done

    found_dir=""
    found_lib=""

    if test "x$memory_model" = "x64"; then
	for p in ${libdirs}; do
            libdir64=`echo "$p" | grep lib | sed -e 's|lib$|lib64|g' -e 's|lib/|lib64/|g'`
            libdirs="$libdirs $libdir64"
	done
    fi
    if test "x$memory_model" = "x32"; then
	for p in ${libdirs}; do
            libdir32=`echo "$p" | grep lib | sed -e 's|lib$|lib32|g' -e 's|lib/|lib32/|g'`
            libdirs="$libdirs $libdir32"
	done
    fi

    for p in ${libdirs}; do
        for l in ${libs}; do
            liblist=`echo $p/$l` # expands wildcard
            for n in ${liblist} ; do
                if test -f $n ; then
                    found_dir=$p
                    found_lib=$l
                    break 3
                fi
            done
        done
    done

    if test "x$found_dir" = "x" || test "x$found_lib" = "x" ; then
        result "not found in $libdirs"
    else
        result "found in $found_dir"
    fi
}

#_____________________________________________________________________
check_header() {
    # This function will try to locate a header file [$1] in the
    # directory given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_hdr and found_dir,
    # which should be immediately copied, since the variables value
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 2 ; then
        echo "check_header: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    hdr=$1       ; shift
    hdrdirl=$1
    hdrdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$hdrdirl" = "x" ; then
        hdrdirs=$hdrdirl
    fi

    # Write a message
    checking_msg "$hdr"

    found_dir=""
    found_hdr=""

    for p in ${hdrdirs}; do
        hdrlist=`echo $p/$hdr` # expands wildcard
        for n in ${hdrlist} ; do
            if test -f $n ; then
                found_dir=$p
                found_hdr=$hdr
                break
            fi
        done
    done

    if test "x$found_dir" = "x" || test "x$found_hdr" = "x" ; then
        result "not found in $hdrdirs"
    else
        result "found in $found_dir"
    fi
}

#_____________________________________________________________________
checking_msg() {
    # Write a simple "checking" message to std out.
    if test $# -lt 1 ; then
        echo "checking_msg: Too few arguments"
        return 1
    fi
    echo -n "Checking for"
    logmsg -n "Checking for"
    while test $# -gt 1 ; do
        echo -n " $1,"
        logmsg -n " $1,"
        shift
        if test $# -eq 1 ; then
            echo -n " or"
            logmsg -n " or"
        fi
    done
    echo -n " $1 ... "
    logmsg -n " $1 ... "
}

#_____________________________________________________________________
result() {
    echo "$*"
    logmsg "Result: $*"
}

#_____________________________________________________________________
check_symbol() {
    # This function will try to locate a symbol [$1] in a specific
    # library [$2] and in a given directory [$3].
    # The result of the check is stored in found_symbol, 1 if true,
    # 0 otherwise, which should be immediately copied, since the variable
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -ne 3 ; then
        echo "check_symbol: not 3 arguments"
        found_symbol=0
        return 1
    fi

    # Save arguments in logical names
    symbol=$1     ; shift
    symbollib=$1  ; shift
    symboldir=$1

    if test "x$symbollib" = "x" ; then
        found_symbol=0
        unset symbol
        unset symbollib
        unset symboldir
        return 1
    fi

    symbollib=`echo $symbollib | sed -e 's/^-l/lib/'`

    if test ! "x$symboldir" = "x" ; then
        symboldir=`echo $symboldir | sed -e 's/^-L//'`
    fi

    # Check if we got a specific argument as to where the library
    # is to be found
    symbolfile=$symbollib
    exts=".so .lib .dylib"
    if test ! "x$shared" = "xno" ; then
        exts="$exts .a"
    else
        exts=".a $exts"
    fi

    usrlib="/usr/lib"
    if test "x$memory_model" = "x32" ; then
        usrlib="/usr/lib32 $usrlib"
    fi
    if test "x$memory_model" = "64" ; then
        usrlib="/usr/lib64 $usrlib"
    fi

    for d in "$symboldir" $usrlib ; do
        logmsg " Checking in $d"
        if test ! -r $d/$symbollib ; then
            logmsg "  $d/$symbollib not readable"
            for i in $exts ; do
                logmsg "   Checking extension $i with $d/$symbollib"
                if test -r $d/$symbollib$i ; then
                    logmsg "   $d/$symbollib$i readable"
                    symbolfile=$d/$symbollib$i
                    break 2
                fi
             done
        else
            logmsg "$d/$symbollib readable"
            symbolfile=$d/$symbollib
            break
        fi
    done

    if test "x$symbolfile" = "x" || test ! -r $symbolfile ; then
       found_symbol=0
       logmsg " Symbol not found"
       unset symbol
       unset symbollib
       unset symboldir
       return 1
    fi

    checking_msg "$symbol in $symbolfile"
    nm $symbolfile 2>&1 | grep $symbol > /dev/null 2>&1
    if test $? -eq 0 ; then
        found_symbol=1
        logmsg " Symbol found"
    else
        nm $symbolfile 2>&1 | grep "no symbols" > /dev/null 2>&1
        # if test $? -eq 0 ; then
        #     logmsg " $symbolfile is stripped, trying to link"
        #     # stripped library - only safe test is to link against the library
        #     check_link $symbolfile "" $symbol
        #     found_symbol=$link_result
        # else
            found_symbol=0
        # fi
    fi
    if test $found_symbol -eq 1 ; then
        result "ok"
    else
        result "no"
    fi

    unset symbol
    unset symbollib
    unset symboldir
}

#_____________________________________________________________________
use_algorithm() {
    # This function tests if a certain algorithm [$1] is used.

    # Assert that we got enough arguments
    if test $# -ne 1 ; then
        echo "use_algorithm: Exactly one argument required"
        return 1
    fi

    # check that the argument is an algorithm
    alg=`echo "$available_algorithms" | grep $1`
    if [ -z "$alg" ]; then
	message "Error: $1 is not an available algorithm"
	exit 1
    fi

    # check if the argument is in the list of used algorithms
    alg=`echo "$ALGORITHMS" | grep $1`
    if [ -z "$alg" ]; then
	return 1;
    else
	return 0;
    fi
}

#_____________________________________________________________________
exists_in_path () {
    # This function will try to locate an executable [$1] in $PATH.
    #
    # The result of the search is stored in cmd, which should be
    # immediately copied, since the variables value will be
    # overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -ne 1 ; then
        echo "exists_in_path: Exactly one argument required"
        return 1
    fi

    cmd=$(command -v -- "$1")
    case "$cmd" in
	/*) return 0 ;;
	alias\ *) return 1 ;; # alias
	*) return 1 ;; # built-in or function
    esac
}

#_____________________________________________________________________
check_algorithms() {
    algs=`echo $ALGORITHMS | tr ',' ' '`
    ALGORITHMS=""
    for a in ${algs}; do
        case "$a" in
            all)
                ALGORITHMS="$available_algorithms"; break ;;
            two_scale|lattice)
                ALGORITHMS="$ALGORITHMS $a"
                continue ;;
            *)
                message "Error: unknown algorithm: $a";
                message "Available algorithms: $available_algorithms";
                exit 1 ;;
        esac
    done
}

#_____________________________________________________________________
check_boost_libs() {
    check_library "libboost_unit_test_framework" "$boost_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Warning: libboost_unit_test_framework must be installed"
        message "  to compile and run the tests, see http://www.boost.org"
    else
        BOOSTLIBS_=-lboost_unit_test_framework
        if [ -z "$boost_lib_dir" ]; then
            # assume that the linker will look in the default paths
            BOOSTLIBS="$BOOSTLIBS_"
        else
            BOOSTLIBS="-L$boost_lib_dir $BOOSTLIBS_"
        fi
    fi
}

#_____________________________________________________________________
check_boost_incl() {
    check_header "boost/test/unit_test.hpp" "$boost_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        message "Warning: boost/test/unit_test.hpp must be installed"
        message "  to compile and run the tests, see http://www.boost.org"
    else
        # assume that the compiler will look in the default paths
        if [ -n "$boost_inc_dir" ]; then
            BOOSTFLAGS="-I$boost_inc_dir"
        fi
    fi
}

#_____________________________________________________________________
check_gsl_libs() {
    check_library "libgsl" "$gsl_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Warning: libgsl must be installed"
        message "  to run the lattice algorithm, see http://www.gnu.org/s/gsl"
    else
        GSLLIBS_=-lgsl
        if [ -z "$gsl_lib_dir" ]; then
            # assume that the linker will look in the default paths
            GSLLIBS="$GSLLIBS_"
        else
            GSLLIBS="-L$gsl_lib_dir $GSLLIBS_"
        fi
    fi
}

#_____________________________________________________________________
check_gsl_incl() {
    check_header "gsl/gsl_version.h" "$gsl_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        message "Warning: gsl/gsl_version.h must be installed"
        message "  to compile the lattice algorithm, see http://www.gnu.org/s/gsl"
    else
        # assume that the compiler will look in the default paths
        if [ -n "$gsl_inc_dir" ]; then
            GSLFLAGS="-I$gsl_inc_dir"
        fi
    fi
}

#_____________________________________________________________________
check_fortran_libs() {
    case "$FC" in
        gfortran)
            FLIBS="-lgfortran -lm" ;;
        g77|f77)
            FLIBS="-lg2c -lm" ;;
    esac
}

#_____________________________________________________________________
check_lapack_libs() {
    check_library "liblapack" "$lapack_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Warning: liblapack must be installed"
        message "  to run the lattice algorithm, see http://www.netlib.org/lapack"
    else
        LAPACKLIBS_=-llapack
        if [ -z "$lapack_lib_dir" ]; then
            # assume that the linker will look in the default paths
            LAPACKLIBS="$LAPACKLIBS_"
        else
            LAPACKLIBS="-L$lapack_lib_dir $LAPACKLIBS_"
        fi
	check_symbol dgbsv_ "$found_lib" "$found_dir"
    fi
}

#_____________________________________________________________________
check_math_cmd() {
    checking_msg "Mathematica kernel $MATH"
    exists_in_path "$MATH"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Warning: Mathematica needs to be installed to run the meta code!"
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
define() {
    # $@: list of extra define statemens
    if [ -n "$@" ]; then
        if [ -z "$extra_defines" ]; then
            extra_defines="-D$@"
        else
            extra_defines="$extra_defines -D$@"
        fi
    fi
}

#_____________________________________________________________________
enable_defines() {
    if [ -n "$extra_defines" ]; then
        message "adding defines $extra_defines to CPPFLAGS"
        CPPFLAGS="$extra_defines $CPPFLAGS"
    fi
}

#_____________________________________________________________________
help() {
    echo "Usage: ./`basename $0` [options]"
    echo "Options:"
    echo "--enable-colors          enable colored output"
    echo "--enable-debug           enable debug messages"
    echo "--enable-silent          suppress all command line output"
    echo "--enable-verbose         enable verbose messages"
    echo "--with-algorithms=       comma separated list of RG solver algorithms"
    echo "                         (default: $ALGORITHMS)"
    echo "                         possible values: all $available_algorithms"
    echo "--with-boost-libdir=     directory to search for BOOST libraries"
    echo "--with-boost-incdir=     directory to search for BOOST headers"
    echo "--with-cxx=              C++ compiler (default: $CXX)"
    echo "--with-cxxflags=         C++ compiler flags (default: $CXXFLAGS)"
    echo "--with-fc=               Fortran compiler (default: $FC)"
    echo "--with-fflags=           Fortran compiler flags (default: $FFLAGS)"
    echo "--with-gsl-incdir=       GSL support, location of gsl/gsl_version.h"
    echo "--with-gsl-libdir=       GSL support, location of libgsl"
    echo "--with-lapack-libdir=    directory to search for LAPACK and BLAS"
    echo "                         libraries"
    echo "--with-math-cmd=         Mathematic kernel (default: $MATH)"
    echo "--help,-h                print this help message"
    echo "--libext                 library extension (default: $LIBEXT)"
    echo "--make-lib-cmd=          command to make library (default: $MAKELIB)"
    echo "--version,-v             print version information"
}

#_____________________________________________________________________
version() {
    echo "$PROGRAM_NAME $PROGRAM_VERSION"
    echo "$PROGRAM_NAME is free software: you can redistribute it and/or modify"
    echo "it under the terms of the GNU General Public License as published by"
    echo "the Free Software Foundation, either version 3 of the License, or"
    echo "(at your option) any later version.  See http://www.gnu.org/licenses/"
}

rm -f $logfile
write_configure_parameters "$*"

if test $# -gt 0 ; then
    while test ! "x$1" = "x" ; do
        case "$1" in
            -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
            *) optarg= ;;
        esac

        case $1 in
            --enable-colors)         define "COLOR_PRINTOUT" ;;
            --enable-debug)          define "DEBUG" ;;
            --enable-silent)         define "SILENT" ;;
            --enable-verbose)        define "VERBOSE" ;;
            --with-algorithms=*)     ALGORITHMS=$optarg ;;
            --with-boost-libdir=*)   boost_lib_dir=$optarg ;;
            --with-boost-incdir=*)   boost_inc_dir=$optarg ;;
            --with-cxx=*)            CXX=$optarg ;;
            --with-cxxflags=*)       CXXFLAGS=$optarg ;;
            --with-fc=*)             FC=$optarg ;;
            --with-fflags=*)         FFLAGS=$optarg ;;
            --with-gsl-libdir=*)     gsl_lib_dir=$optarg ;;
            --with-gsl-incdir=*)     gsl_inc_dir=$optarg ;;
            --with-lapack-libdir=*)  lapack_lib_dir=$optarg ;;
            --with-math-cmd=*)       MATH=$optarg ;;
            --help|-h)               help; exit 0 ;;
            --libext=*)              LIBEXT=$optarg ;;
            --make-lib-cmd=*)        MAKELIB=$optarg ;;
            --version|-v)            version; exit 0 ;;
            *)  echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;;
        esac
        shift
    done
fi

guess_memory_model

check_algorithms
check_boost_incl
check_boost_libs
check_fortran_libs
if use_algorithm "lattice"; then
    check_gsl_incl
    check_gsl_libs
    check_lapack_libs
fi
check_math_cmd

enable_defines

sed -e "s|@VERSION@|$PROGRAM_VERSION|" \
    -e "s|@PKGNAME@|$PROGRAM_NAME|"    \
    -e "s|@FLIBS@|$FLIBS|"             \
    -e "s|@ALGORITHMS@|$ALGORITHMS|"   \
    -e "s|@BOOSTLIBS@|$BOOSTLIBS|"     \
    -e "s|@BOOSTFLAGS@|$BOOSTFLAGS|"   \
    -e "s|@CPPFLAGS@|$CPPFLAGS|"       \
    -e "s|@CXXFLAGS@|$CXXFLAGS|"       \
    -e "s|@CXX@|$CXX|"                 \
    -e "s|@FC@|$FC|"                   \
    -e "s|@GSLLIBS@|$GSLLIBS|"         \
    -e "s|@GSLFLAGS@|$GSLFLAGS|"       \
    -e "s|@LAPACKLIBS@|$LAPACKLIBS|"   \
    -e "s|@MAKELIB@|$MAKELIB|"         \
    -e "s|@MATH@|$MATH|"               \
    -e "s|@LIBEXT@|$LIBEXT|"           \
    -e "s|@FFLAGS@|$FFLAGS|"           \
    < $MAKEFILE_TMPL > $MAKEFILE
