#!/bin/sh

# configure script for FlexibleSUSY
# Author: Alexander Voigt

PROGRAM_NAME=FlexibleSUSY
PROGRAM_VERSION=0.2

# directory of this script
BASEDIR=$(dirname $0)

# default library directories
default_lib_paths="/usr/lib /usr/local/lib"
default_inc_paths="/usr/include /usr/local/include"

# memory model
memory_model=""

# target makefile
MAKEFILE=$BASEDIR/Makefile
MAKEFILE_TMPL=$BASEDIR/config/Makefile.template

# options
boost_lib_dir=""
boost_inc_dir=""
gsl_lib_dir=""
gsl_inc_dir=""
CPPFLAGS=""
CXXFLAGS="-ggdb -O2 -Wall -pedantic -Wextra -Wcast-qual\
 -Wcast-align -Woverloaded-virtual -Wnon-virtual-dtor"
FFLAGS="-g -O2"
FLIBS=""
BOOSTLIBS=""
LIBEXT=".a"
CXX="g++"
FC="gfortran"
GSLLIBS=""
MAKELIB="ar cru"
MATH="math"
# available RG algorithms
ALGORITHMS="all"
available_algorithms="two_scale lattice"

guess_memory_model () {
    chip=`uname -m | tr '[A-Z]' '[a-z]'`
    case "$chip" in
	*32) memory_model="32"; return 0 ;;
	*64) memory_model="64"; return 0 ;;
	*)   echo "Warning: could not guess memory model"; return 1 ;;
    esac
}

check_library() {
    # This function will try to locate a library [$1] in the directory
    # given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_lib and found_dir,
    # which should be immediately copied, since the variables value will
    # be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 3 ; then
        echo "check_library: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    lib=$1       ; shift
    libdirl=$1
    libdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$libdirl" = "x" ; then
        libdirs=$libdirl
    fi

    # Write a message
    echo -n "checking for $lib ... "

    libs=""
    for i in $lib ; do
        for ext in .a .lib "" .so .so.0 .sl .dylib .dll.a ; do
            libs="$libs $i$ext"
        done
    done

    found_dir=""
    found_lib=""

    if test "x$memory_model" = "x64"; then
        libdirs64=`echo "$libdirs" | sed -e 's|lib |lib64 |g' -e 's|lib$|lib64|g' -e 's|lib/|lib64/|g'`
        libdirs="$libdirs $libdirs64"
    fi
    if test "x$memory_model" = "x32"; then
        libdirs32=`echo "$libdirs" | sed -e 's|lib |lib32 |g' -e 's|lib$|lib32|g' -e 's|lib/|lib32/|g'`
        libdirs="$libdirs $libdirs32"
    fi

    for p in ${libdirs}; do
        for l in ${libs}; do
            liblist=`echo $p/$l` # expands wildcard
            for n in ${liblist} ; do
                if test -f $n ; then
                    found_dir=$p
                    found_lib=$l
                    break 3
                fi
            done
        done
    done

    if test "x$found_dir" = "x" || test "x$found_lib" = "x" ; then
        echo "not found in $libdirs"
    else
        echo "found in $found_dir"
    fi
}

check_header() {
    # This function will try to locate a header file [$1] in the
    # directory given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_hdr and found_dir,
    # which should be immediately copied, since the variables value
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 2 ; then
        echo "check_header: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    hdr=$1       ; shift
    hdrdirl=$1
    hdrdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$hdrdirl" = "x" ; then
        hdrdirs=$hdrdirl
    fi

    # Write a message
    echo -n "checking for $hdr ... "

    found_dir=""
    found_hdr=""

    for p in ${hdrdirs}; do
        hdrlist=`echo $p/$hdr` # expands wildcard
        for n in ${hdrlist} ; do
            if test -f $n ; then
                found_dir=$p
                found_hdr=$hdr
                break
            fi
        done
    done

    if test "x$found_dir" = "x" || test "x$found_hdr" = "x" ; then
        echo "not found in $hdrdirs"
    else
        echo "found in $found_dir"
    fi
}

exists_in_path () {
    # This function will try to locate an executable [$1] in $PATH.
    #
    # The result of the search is stored in cmd, which should be
    # immediately copied, since the variables value will be
    # overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -ne 1 ; then
        echo "exists_in_path: Exactly one argument required"
        return 1
    fi

    cmd=$(command -v -- "$1")
    case "$cmd" in
	/*) return 0 ;;
	alias\ *) return 1 ;; # alias
	*) return 1 ;; # built-in or function
    esac
}

check_algorithms() {
    algs=`echo $ALGORITHMS | tr ',' ' '`
    ALGORITHMS=""
    for a in ${algs}; do
        case "$a" in
            all)
                ALGORITHMS="$available_algorithms"; break ;;
            two_scale|lattice)
                ALGORITHMS="$ALGORITHMS $a"
                continue ;;
            *)
                echo "Error: unknown algorithm: $a";
                echo "Available algorithms: $available_algorithms";
                exit 1 ;;
        esac
    done
}

check_boost_libs() {
    check_library "libboost_unit_test_framework" "$boost_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        echo "Warning: libboost_unit_test_framework must be installed"
        echo "  to compile and run the tests, see http://www.boost.org"
    else
        BOOSTLIBS_=-lboost_unit_test_framework
        if [ -z "$boost_lib_dir" ]; then
            # assume that the linker will look in the default paths
            BOOSTLIBS="$BOOSTLIBS_"
        else
            BOOSTLIBS="-L$boost_lib_dir $BOOSTLIBS_"
        fi
    fi
}

check_boost_incl() {
    check_header "boost/test/unit_test.hpp" "$boost_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        echo "Warning: boost/test/unit_test.hpp must be installed"
        echo "  to compile and run the tests, see http://www.boost.org"
    else
        # assume that the compiler will look in the default paths
        if [ -n "$boost_inc_dir" ]; then
            CPPFLAGS="$CPPFLAGS -I$boost_inc_dir"
        fi
    fi
}

check_gsl_libs() {
    check_library "libgsl" "$gsl_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        echo "Warning: libgsl must be installed"
        echo "  to run the lattice algorithm, see http://www.gnu.org/s/gsl"
    else
        GSLLIBS_=-lgsl
        if [ -z "$gsl_lib_dir" ]; then
            # assume that the linker will look in the default paths
            GSLLIBS="$GSLLIBS_"
        else
            GSLLIBS="-L$gsl_lib_dir $GSLLIBS_"
        fi
    fi
}

check_gsl_incl() {
    check_header "gsl/gsl_version.h" "$gsl_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        echo "Warning: gsl/gsl_version.h must be installed"
        echo "  to compile the lattice algorithm, see http://www.gnu.org/s/gsl"
    else
        # assume that the compiler will look in the default paths
        if [ -n "$gsl_inc_dir" ]; then
            CPPFLAGS="$CPPFLAGS -I$gsl_inc_dir"
        fi
    fi
}

check_fortran_libs() {
    case "$FC" in
        gfortran)
            FLIBS="-lgfortran -lm" ;;
        g77|f77)
            FLIBS="-lg2c -lm" ;;
    esac
}

check_math_cmd() {
    echo -n "checking for Mathematica kernel $MATH ... "
    exists_in_path "$MATH"
    if [ -z "$cmd" ] ; then
        echo "not found"
        echo "Warning: Mathematica needs to be installed to run the meta code!"
    else
        echo "found $cmd"
    fi
}

define() {
    # $@: list of extra define statemens
    if [ -n "$@" ]; then
        echo "define $@"
        if [ -z "$extra_defines" ]; then
            extra_defines="-D$@"
        else
            extra_defines="$extra_defines -D$@"
        fi
    fi
}

enable_defines() {
    if [ -n "$extra_defines" ]; then
        echo "adding defines $extra_defines to CPPFLAGS"
        CPPFLAGS="$extra_defines $CPPFLAGS"
    fi
}

help() {
    echo "Usage: ./`basename $0` [options]"
    echo "Options:"
    echo "--enable-colors          enable colored output"
    echo "--enable-debug           enable debug messages"
    echo "--enable-silent          suppress all command line output"
    echo "--enable-verbose         enable verbose messages"
    echo "--with-algorithms=       comma separated list of RG solver algorithms"
    echo "                         (default: $ALGORITHMS)"
    echo "                         possible values: all $available_algorithms"
    echo "--with-boost-libdir=     directory to search for BOOST libraries"
    echo "--with-boost-incdir=     directory to search for BOOST headers"
    echo "--with-cxx=              C++ compiler (default: $CXX)"
    echo "--with-cxxflags=         C++ compiler flags (default: $CXXFLAGS)"
    echo "--with-fc=               Fortran compiler (default: $FC)"
    echo "--with-fflags=           Fortran compiler flags (default: $FFLAGS)"
    echo "--with-gsl-incdir=       GSL support, location of gsl/gsl_version.h"
    echo "--with-gsl-libdir=       GSL support, location of libgsl"
    echo "--with-math-cmd=         Mathematic kernel (default: $MATH)"
    echo "--help,-h                print this help message"
    echo "--libext                 library extension (default: $LIBEXT)"
    echo "--make-lib-cmd=          command to make library (default: $MAKELIB)"
    echo "--version,-v             print version information"
}

version() {
    echo "$PROGRAM_NAME $PROGRAM_VERSION"
    echo "$PROGRAM_NAME is free software: you can redistribute it and/or modify"
    echo "it under the terms of the GNU General Public License as published by"
    echo "the Free Software Foundation, either version 3 of the License, or"
    echo "(at your option) any later version.  See http://www.gnu.org/licenses/"
}

if test $# -gt 0 ; then
    while test ! "x$1" = "x" ; do
        case "$1" in
            -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
            *) optarg= ;;
        esac

        case $1 in
            --enable-colors)         define "COLOR_PRINTOUT" ;;
            --enable-debug)          define "DEBUG" ;;
            --enable-silent)         define "SILENT" ;;
            --enable-verbose)        define "VERBOSE" ;;
            --with-algorithms=*)     ALGORITHMS=$optarg ;;
            --with-boost-libdir=*)   boost_lib_dir=$optarg ;;
            --with-boost-incdir=*)   boost_inc_dir=$optarg ;;
            --with-cxx=*)            CXX=$optarg ;;
            --with-cxxflags=*)       CXXFLAGS=$optarg ;;
            --with-fc=*)             FC=$optarg ;;
            --with-fflags=*)         FFLAGS=$optarg ;;
            --with-gsl-libdir=*)     gsl_lib_dir=$optarg ;;
            --with-gsl-incdir=*)     gsl_inc_dir=$optarg ;;
            --with-math-cmd=*)       MATH=$optarg ;;
            --help|-h)               help; exit 0 ;;
            --libext=*)              LIBEXT=$optarg ;;
            --make-lib-cmd=*)        MAKELIB=$optarg ;;
            --version|-v)            version; exit 0 ;;
            *)  echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;;
        esac
        shift
    done
fi

guess_memory_model

check_algorithms
check_boost_incl
check_boost_libs
check_fortran_libs
check_gsl_incl
check_gsl_libs
check_math_cmd

enable_defines

sed -e "s|@VERSION@|$PROGRAM_VERSION|" \
    -e "s|@PKGNAME@|$PROGRAM_NAME|"    \
    -e "s|@FLIBS@|$FLIBS|"             \
    -e "s|@ALGORITHMS@|$ALGORITHMS|"   \
    -e "s|@BOOSTLIBS@|$BOOSTLIBS|"     \
    -e "s|@CPPFLAGS@|$CPPFLAGS|"       \
    -e "s|@CXXFLAGS@|$CXXFLAGS|"       \
    -e "s|@CXX@|$CXX|"                 \
    -e "s|@FC@|$FC|"                   \
    -e "s|@GSLLIBS@|$GSLLIBS|"         \
    -e "s|@MAKELIB@|$MAKELIB|"         \
    -e "s|@MATH@|$MATH|"               \
    -e "s|@LIBEXT@|$LIBEXT|"           \
    -e "s|@FFLAGS@|$FFLAGS|"           \
    < $MAKEFILE_TMPL > $MAKEFILE
