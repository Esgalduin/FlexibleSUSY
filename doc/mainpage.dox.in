/**
\mainpage FlexibleSUSY @FLEXIBLESUSY_VERSION@

FlexibleSUSY provides Mathematica and C++ code to create fast and
modular spectrum generators for supersymmetric models. It is based on
<a href="http://softsusy.hepforge.org/">SoftSUSY</a> and <a
href="http://sarah.hepforge.org/">SARAH</a>.

 - Homepage:                https://flexiblesusy.hepforge.org
 - Mailing list:            flexiblesusy@projects.hepforge.org
 - Source code repository:  https://github.com/FlexibleSUSY
 - Bug reports:             https://github.com/FlexibleSUSY/FlexibleSUSY/issues
 - References:              CPC 190 (2015) 139-172 (arxiv:1406.2319 [hep-ph])

\section quick_start Quick start

If SARAH is not installed, please run

    ./install-sarah

To create a spectrum generator for the NMSSM, execute the following
commands:

    ./createmodel --name=NMSSM
    ./configure --with-models=NMSSM
    make

To run the NMSSM spectrum generator, run

    ./models/NMSSM/run_NMSSM.x --slha-input-file=model_files/NMSSM/LesHouches.in.NMSSM

\section installation_of_sarah Installation of SARAH

FlexibleSUSY requires SARAH to be installed and to be loadable with
the ``Needs["SARAH`"]`` command from inside Mathematica.  We recommend
the following setup:

    VERSION=4.7.0
    cd ~/.Mathematica/Applications/
    wget https://www.hepforge.org/archive/sarah/SARAH-${VERSION}.tar.gz
    tar -xf SARAH-${VERSION}.tar.gz
    ln -s $PWD/SARAH-${VERSION}/ SARAH
    cd ~/.Mathematica/Kernel/
    echo "AppendTo[\$Path, \"$HOME/.Mathematica/Applications/SARAH/\"];" >> init.m

All the above steps can be executed at once using the `install-sarah`
script:

    ./install-sarah

See `./install-sarah --help` for more options.


\section generating_a_specgen Generating a spectrum generator

\subsection Requirements

 - C++ compiler (`g++` >= 4.4.7 or `clang++` >= 3.1 or `icpc` >= 12.1)
 - Fortran compiler (`gfortran`, `ifort`)
 - Mathematica (version 7.0 or higher)
 - SARAH (version 4.0.4 or higher)    http://sarah.hepforge.org
 - Boost (version 1.37.0 or higher)   http://www.boost.org
 - Eigen 3 (version 3.1 or higher)    http://eigen.tuxfamily.org
 - GNU scientific library             http://www.gnu.org/software/gsl/
 - Lapack / Blas                      http://www.netlib.org/lapack/

Optional:

 - Looptools (version 2.8 or higher)  http://www.feynarts.de/looptools/

\subsection generation Generating a spectrum generator

Before you setup a FlexibleSUSY model, you have to provide a SARAH
model file.  To make it available in FlexibleSUSY, you can put it
either into FlexibleSUSY's SARAH model directory
`FlexibleSUSY/sarah/<model>/` or directly into SARAH's own model
directly `SARAH/Models/<model>/`.

Here `<model>` is the name of your model (e.g. MSSM, NMSSM, etc.).
Note, that there are already plenty of pre-installed model files under
`SARAH/Models/` that can be used.

Setup a FlexibleSUSY model

    ./createmodel --name=<model>

See `./createmodel --help` for more details.  Afterwards there will be

- a model directory models/<model>/
- a makefile module models/<model>/module.mk
- a Mathematica start script models/<model>/start.m
- and a FlexibleSUSY model file models/<model>/FlexibleSUSY.m

To modify the model details (input parameters, boundary conditions,
etc.), please edit the FlexibleSUSY model file
`models/<model>/FlexibleSUSY.m`.  The model file options are explained
in more detail in @ref model_file_options .

Create the Makefile and register your model

    ./configure --with-models=<model>

Use `./configure --with-models=all` to build all available models.
See `./configure --help` for more options.

Start the spectrum generator generation and compile it by running

    make

When `make` is executed, Mathematica is called and generates the C++
code for the spectrum generator.  All C++ source files are written to
`models/<model>/`.  Afterwards this C++ code will be compiled and a
user example spectrum generator `models/<model>/run_<model>.x` will be
created.

### Example ###

     ./createmodel --name=NMSSM
     ./configure --with-models=NMSSM
     make

\section running_the_sg Running the spectrum generator

To run the spectrum generator execute

    ./models/<model>/run_<model>.x --slha-input-file=<slha-input-file>

where `<slha-input-file>` is an SLHA input file.  For more details on
the SLHA input options see @ref slha_input_fields .

### Example ###

    ./models/NMSSM/run_NMSSM.x --slha-input-file=model_files/NMSSM/LesHouches.in.NMSSM

The SLHA input can also read from `stdin` by using the dash `-` as
input file name:

    cat model_files/NMSSM/LesHouches.in.NMSSM | ./models/NMSSM/run_NMSSM.x --slha-input-file=-

To specify a file name for the SLHA output use the
`--slha-output-file=` option.

### Example ###

    ./models/NMSSM/run_NMSSM.x --slha-input-file=model_files/NMSSM/LesHouches.in.NMSSM --slha-output-file=LesHouches.out.NMSSM

To suppress the SLHA output leave the file name after
`--slha-output-file=` empty.

The output can also be written to an SQLite database using the
`--database-output-file=` option.

### Example ###

    ./models/NMSSM/run_NMSSM.x --slha-input-file=model_files/NMSSM/LesHouches.in.NMSSM --slha-output-file= --database-output-file=point.db


\section no_compilation Creating only the source code files -- no compilation

If you want to only create the C++ source files for your model, but do
not want to compile the code, you can use the `--disable-compile`
configure option:

    ./configure --with-models=MSSM --disable-compile
    make

Here, `configure` will not check for installed compilers or libraries.
It will only check for Mathematica and SARAH.  The execution of `make`
will stop as soon as all C++ source code files are generated.


\section only_compilation Compile only -- no code generation

If you want to only compile already created the C++ source files for
your model, you can use the `--disable-meta` configure option:

    ./configure --with-models=MSSM --disable-meta
    make

Here, `configure` will only check for installed compilers or
libraries.  It will not check for Mathematica and SARAH.

Warning: Please make sure all C++ source files of your model are
available in the model directory `models/<model>/`.  Otherwise the
compilation will fail.


\section export_src Exporting the generated source code

The generated C++ source code can be exported to a separate directory,
without the Mathematica meta code.  This exported directory will be a
complete standalone package, with it's own build system.  To export
the code, one has to set the target directory during configuration via
the `--with-install-dir=` option.  For example

    ./configure --with-models=<models> --with-install-dir=/path/to/export/directory

By running

    make install-src

the generated C++ source code for all `<models>` is copied to
`/path/to/export/directory`, together with the non-model specific
source code from `config/`, `doc/`, `legacy/`, `slhaea/` and `src/`.
Afterwards, the standalone package can be build via

    cd /path/to/export/directory
    ./configure --with-models=all
    make


\section dynamic_libraries Dynamic libraries

If you want to create dynamic libraries (instead of static libraries)
you have to pass all the following options to the `configure` script

    --disable-static-libs
    --with-lib-ext=".so"
    --with-make-lib-cmd="gcc -shared -o"

When using Intel compilers, replace `gcc` by `icc` or `icpc`.

Example:

    ./configure --with-models=MSSM,NMSSM --disable-static-libs --with-lib-ext=".so" --with-make-lib-cmd="gcc -shared -o"

Important remark:

The libraries are linked to the executables with _absolute_ paths.
This means that, if you move the package directory to another
location, the executables will no longer run, because the libraries
are now at another place.  To make the executables work again, you
have to rebuild them via

    make clean-executables
    make allexec


\section static_linking Statically linked executables

External libraries can be statically linked to the spectrum generator
executables by setting linker specific flags in `LDFLAGS`.  On some
systems additional libraries have to be linked to the executables in
such cases.  In FlexibleSUSY such additional libraries can be
specified in the variable `LDLIBS`.

Example (using `g++` on Debian Jessie):

    ./configure --with-models=CMSSM --with-ldflags="-static" --with-ldlibs="-lquadmath"

This will create a standalone executable which does not depend on
dynamic libraries.


\section looptools Looptools

It is possible to use Looptools (http://www.feynarts.de/looptools/)
for calculating the loop functions, instead of using Softsusy's loop
functions.  To enable Looptools configure via

    ./configure --enable-looptools

To use the Looptools library and header files from a specific
directory configure via

    ./configure --enable-looptools --with-looptools-incdir="/path/to/looptools/build/" --with-looptools-libdir="/path/to/looptools/build/"

Note: Looptools 2.8 or higher is required.  Versions <= 2.7 will fail
to build with the following compiler error message (or similar):

    In file included from models/MSSM/MSSM_two_scale_model.cpp:28:0:
    /usr/include/clooptools.h:67:28: error: conflicting declaration ‘typedef struct std::complex<double> Complex’
    In file included from src/utils.h:15:0,
                     from src/rge.h:17,
                     from models/MSSM/MSSM_two_scale_soft_parameters.hpp:24,
                     from models/MSSM/MSSM_two_scale_model.hpp:25,
                     from models/MSSM/MSSM_two_scale_model.cpp:21:
    src/mycomplex.h:17:7: error: ‘class Complex’ has a previous declaration as ‘class Complex’


\section plotting Plotting the mass spectrum and RG running

The pole mass spectrum and the RG flow can be written to data files
for easy plotting.  In the MSSM for example these data files can be
generated via

    ./models/MSSM/run_MSSM.x --slha-input-file=model_files/MSSM/LesHouches.in.MSSM --rgflow-output-file=MSSM_rgflow.dat --spectrum-output-file=MSSM_spectrum.dat

The generated files `MSSM_rgflow.dat` and `MSSM_spectrum.dat` can be
plotted with the gnuplot scripts in the model directory:

    gnuplot -persist -e "filename='MSSM_spectrum.dat'" models/MSSM/MSSM_plot_spectrum.gnuplot
    gnuplot -persist -e "filename='MSSM_rgflow.dat'" models/MSSM/MSSM_plot_rgflow.gnuplot

The latter is just for illustration and currently plots all DR-bar
parameters regardless of dimension, so the resulting plot is not
particularly informative.  However the user may then adapt this script
to plot any chosen subset of the parameters.


\section addons Addons

A FlexibleSUSY addon is a program or library, which uses parts of the
FlexibleSUSY libraries or the generated models.  An addon can be
created via

    ./createaddon --name=<addon>

where `<addon>` is the name of the addon.  This script creates the
directory `addons/<addon>/` and the corresponding makefile module
`addons/<addon>/module.mk`.  If an addon has been created with the
above script, the user may edit the makefile module to add his source
files in to the three variables

- `LIB@ADDON@_SRC`   (list of library source files)
- `EXE@ADDON@_SRC`   (list of soucre files with a main())
- `LIB@ADDON@_HDR`   (list of header files)

Example:

    LIB@ADDON@_SRC := $(DIR)/file1.cpp
    EXE@ADDON@_SRC := $(DIR)/run.cpp
    LIB@ADDON@_HDR := $(DIR)/file1.hpp

To configure and compile the addon run

    ./configure --with-addons=<addon>
    make

make compiles all source files and creates the addon library
`addons/<addon>/lib<addon>.a` (including the object file `file1.o`
from the above example) and an executable (`addons/<addon>/run.x` in
the above example).

\section documentation Creating the soucre code documentation

FlexibleSUSY's source code documentation (including the generated
source code files) can be generated with Doxygen in HTML format.  To
generate the documentation please run:

    make doc-html

The generated HTML index file can then be found in
`doc/html/index.html` and can be viewed with any HTML browser, e.g.

    firefox doc/html/index.html

\section Directories

 - <code>config/</code> contains helper scripts and makefile modules
   for the build system

 - <code>doc/</code> contains the FlexibleSUSY documentation

 - <code>examples/</code> contains some example spectrum generators

 - <code>legacy/</code> contains legacy C++ source code, which will be
   removed in a later FlexibleSUSY version

 - <code>meta/</code> contains the Mathematica meta code

 - <code>model_files/</code> contains default model files for some
   frequently used models (MSSM, NMSSM, SMSSM, UMSSM, etc.)

 - <code>models/</code> This is the output directory where the
   generated C++ code for the spectrum generators will be stored.

 - <code>Output/</code> contains SARAH's model-specific output files

 - <code>sarah/</code> contains extra SARAH model files

 - <code>slhaea/</code> contains the SLHA reader library from
   https://github.com/fthomas/slhaea

 - <code>src/</code> contains non-model specific FlexibleSUSY C++
   source code

 - <code>templates/</code> contains C++ template files for the
   spectrum generators

 - <code>test/</code> contains the FlexibleSUSY test suite

\section References

 - FlexibleSUSY — A spectrum generator generator for supersymmetric
   models
   [<a href="http://arxiv.org/abs/1406.2319">CPC 190 (2015) 139-172</a>]

If you use FlexibleSUSY in your work please cite the <a
  href="http://inspirehep.net/record/1299998">FlexibleSUSY manual</a>.

FlexibleSUSY depends on SARAH and contains components from
Softsusy. Therefore, please also cite the following publications along
with FlexibleSUSY:

 - SARAH
   [<a href="http://arxiv.org/abs/0909.2863">CPC 181 (2010) 1077-1086</a>,
    <a href="http://arxiv.org/abs/1002.0840">CPC 182 (2011) 808-833</a>,
    <a href="http://arxiv.org/abs/1207.0906">CPC 184 (2013) 1792-1809</a>,
    <a href="http://arxiv.org/abs/1309.7223">CPC 185 (2014) 1773-1790</a>]

 -  SoftSUSY
    [<a href="http://arxiv.org/abs/hep-ph/0104145">CPC 143 (2002) 305-331</a>,
     <a href="http://arxiv.org/abs/1311.7659">CPC 185 (2014) 2322</a>]

\section Authors

FlexibleSUSY has been written by

- Peter Athron
- Jae-hyeon Park
- Dominik Stöckinger
- Alexander Voigt

The following people have made major contributions to FlexibleSUSY:

- Dylan Harries (loop-induced effective vertices
  \f$h\rightarrow\gamma\gamma\f$ and \f$h\rightarrow gg\f$)

*/
