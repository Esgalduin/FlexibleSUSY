FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = SM;

(* input parameters *)

MINPAR = {};

EXTPAR = {
    {0, MSUSY},
    {1, M1Input},
    {2, M2Input},
    {3, M3Input},
    {4, MuInput},
    {5, mAInput},
    {6, MEWSB},
    {7, AtInput},
    {8, AbInput},
    {9, AtauInput},
    {25, TanBeta},
    {100, LambdaLoopOrder},
    {101, TwoLoopatas},
    {102, TwoLoopabas},
    {103, TwoLoopatab},
    {104, TwoLooptau},
    {105, TwoLoopatat},
    {106, OneLoopAbSM},
    {107, OneLoopAbMSSM},
    {108, OneLoopAtau}
};

FSExtraInputParameters = {
    {msq2, MSQ2IN, {3,3}}, (* 3x3 matrix *)
    {msu2, MSU2IN, {3,3}}, (* 3x3 matrix *)
    {msd2, MSD2IN, {3,3}}, (* 3x3 matrix *)
    {msl2, MSL2IN, {3,3}}, (* 3x3 matrix *)
    {mse2, MSE2IN, {3,3}}  (* 3x3 matrix *)
};

EWSBOutputParameters = { mu2 };

(* The high scale where we match to the MSSM *)
HighScale = MSUSY;

HighScaleFirstGuess = MSUSY;

HighScaleInput = {
    {\[Lambda], lambdaTree
                + UnitStep[LambdaLoopOrder-1] (
                    + lambda1LReg + lambda1LPhi
                    + lambda1LChi1 + lambda1LChi2
                    + If[OneLoopAbSM >= 1, lambda1LbottomSM, 0]
                    + If[OneLoopAbMSSM >= 1, lambda1LbottomMSSM, 0]
                    + If[OneLoopAtau >= 1, lambda1Ltau, 0]
                    )
                + UnitStep[LambdaLoopOrder-2] (
                    If[TwoLoopatas >= 1, (
                        Which[IsCloseRel[SCALE^2,msq2[3,3],0.01] &&
                              IsCloseRel[SCALE^2,msu2[3,3],0.01] &&
                              IsCloseRel[SCALE,M3Input,0.01],
                              lambda2LPhiHSSAlphaTAlphaSDegenerate,
                              IsCloseRel[M3Input^2,msq2[3,3],0.01] &&
                              IsCloseRel[M3Input^2,msu2[3,3],0.01],
                              lambda2LPhiHSSAlphaTAlphaSMQMUM3Degenerate,
                              IsCloseRel[M3Input^2,msq2[3,3],0.01],
                              lambda2LPhiHSSAlphaTAlphaSMQM3Degenerate,
                              IsCloseRel[M3Input^2,msu2[3,3],0.01],
                              lambda2LPhiHSSAlphaTAlphaSMUM3Degenerate,
                              Not[IsClose[M3Input^2, 0]] &&
                              IsCloseRel[msu2[3,3]/M3Input^2,msq2[3,3]/M3Input^2,0.01],
                              lambda2LPhiHSSAlphaTAlphaSX1X2Degenerate,
                              True,
                              lambda2LPhiHSSAlphaTAlphaSFull
                             ]
                    ), 0]
                    + If[TwoLoopatat >= 1, (
                        Which[IsCloseRel[msu2[3,3],msq2[3,3],0.01] &&
                              IsCloseRel[mAInput^2,msu2[3,3],0.01],
                              lambda2LHSSAlphaT2,
                              True,
                              lambda2LHSSAlphaT2Generic
                             ]
                      ), 0]
                    + If[TwoLoopabas >= 1, (
                        Which[IsCloseRel[msu2[3,3],msq2[3,3],0.01] &&
                              IsCloseRel[Sqrt[msu2[3,3]],M3Input,0.01],
                              lambda2LPhiHSSAlphaBAlphaSDegenerate,
                              IsCloseRel[msq2[3,3],msu2[3,3],0.01],
                              lambda2LPhiHSSAlphaBAlphaSDegenerateSquark,
                              True,
                              lambda2LPhiHSSAlphaBAlphaSFull
                             ]
                      ), 0]
                    + If[TwoLoopatab >= 1, (
                        Which[IsCloseRel[SCALE^2,msq2[3,3],0.01] &&
                              IsCloseRel[SCALE^2,msu2[3,3],0.01] &&
                              IsCloseRel[SCALE^2,msd2[3,3],0.01] &&
                              IsCloseRel[SCALE,mAInput,0.01] &&
                              IsCloseRel[SCALE,Abs[MuInput],0.01],
                              lambda2LHSSAlphaTAlphaBAllDegenerate,
                              True,
                              lambda2LHSSAlphaTAlphaBGeneric
                             ]
                      ), 0]
                    + If[TwoLooptau >= 1, lambda2LHSSTau, 0]
                )
      }
};

(* The scale where we impose the EWSB conditions
   and calculate the spectrum *)
SUSYScale = MEWSB;

SUSYScaleFirstGuess = MEWSB;

SUSYScaleInput = {};

LowScale = LowEnergyConstant[MZ];

LowScaleFirstGuess = LowEnergyConstant[MZ];

LowScaleInput = {
   {v, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2]},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic}
};

InitialGuessAtLowScale = {
   {v, LowEnergyConstant[vev]},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic}
};

DefaultPoleMassPrecision = HighPrecision;
HighPoleMassPrecision    = {hh};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

SMParticles = {
    Electron, TopQuark, BottomQuark,
    VectorP, VectorZ, VectorG, VectorW, Neutrino,
    Hp, Ah, (* goldstones *)
    hh (* Higgs *)
};

OnlyLowEnergyFlexibleSUSY = False;
UseHiggs2LoopSM = True;

ExtraSLHAOutputBlocks = {
   {EFFHIGGSCOUPLINGS, NoScale,
           {{1, FlexibleSUSYObservable`CpHiggsPhotonPhoton},
            {2, FlexibleSUSYObservable`CpHiggsGluonGluon},
            {3, FlexibleSUSYObservable`CpPseudoScalarPhotonPhoton},
            {4, FlexibleSUSYObservable`CpPseudoScalarGluonGluon} } }
};

SARAH`ParameterDefinitions = Append[
    Cases[SARAH`ParameterDefinitions, {p_ /; p =!= SARAH`\[Lambda], ___}],
    {SARAH`\[Lambda], { Description -> "SM Higgs Selfcouplings" } }
];

Get[FileNameJoin[{Directory[], "meta", "SM", "HSSUSY_corrections.m"}]];
