
FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = NMSSM/CPV;

(* CNMSSM input parameters *)

MINPAR = {
    {1, m0},
    {2, m12},
    {3, TanBeta},
    {5, Azero}
};

EXTPAR = {
    {61, LambdaInput},
    {62, KappaInput},
    {65, LambdaTimesvSInput},
    {100, etaInput},
    {101, etaSInput}
};

RealParameters = {};

EWSBOutputParameters = { mHd2, Im[T[\[Kappa]]], Re[T[\[Kappa]]], Im[T[\[Lambda]]], Re[T[\[Lambda]]] };

SUSYScale = Sqrt[Product[M[Su[i]]^(Abs[ZU[i,3]]^2 + Abs[ZU[i,6]]^2), {i,6}]];

SUSYScaleFirstGuess = Sqrt[m0^2 + 4 m12^2];

SUSYScaleInput = {
    {vS, LambdaTimesvSInput / Re[\[Lambda]]},
    {eta, etaInput},
    {etaS, etaSInput}
};

HighScale = g1 == g2;

HighScaleFirstGuess = 2.0 10^16;

HighScaleInput={
   {T[Ye], Azero*Ye},
   {T[Yd], Azero*Yd},
   {T[Yu], Azero*Yu},
   {mq2, UNITMATRIX[3] m0^2},
   {ml2, UNITMATRIX[3] m0^2},
   {md2, UNITMATRIX[3] m0^2},
   {mu2, UNITMATRIX[3] m0^2},
   {me2, UNITMATRIX[3] m0^2},
   {mHu2, m0^2},
   {ms2, m0^2},
   {\[Lambda], LambdaInput},
   {\[Kappa], KappaInput},
   {MassB, m12},
   {MassWB,m12},
   {MassG,m12}
};

LowScale = SM[MZ];

LowScaleFirstGuess = SM[MZ];

LowScaleInput = {
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic},
   {vd, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Cos[ArcTan[TanBeta]]},
   {vu, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Sin[ArcTan[TanBeta]]}
};

InitialGuessAtLowScale = {
   {vd, SM[vev] Cos[ArcTan[TanBeta]]},
   {vu, SM[vev] Sin[ArcTan[TanBeta]]},
   {\[Lambda], LambdaInput},
   {\[Kappa], KappaInput},
   {vS, LambdaTimesvSInput / LambdaInput},
   {ms2, SM[MZ]^2},
   {eta, etaInput},
   {etaS, etaSInput},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic}
};

InitialGuessAtHighScale = {};

PotentialLSPParticles = { Chi, Sv, Su, Sd, Se, Cha, Glu };

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision    = {hh, Ah, Hpm};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

ExtraSLHAOutputBlocks = {
   {FlexibleSUSYOutput,
           {{0, Hold[HighScale]},
            {1, Hold[SUSYScale]},
            {2, Hold[LowScale]} } }
};
