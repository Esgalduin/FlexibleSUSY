// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_FFMassiveV_form_factors.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include <valarray>
#include <complex>
#include <iostream>

#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_cxx_diagrams.hpp"

#include "@ModelName@_FFMassiveV_form_factors.hpp"

using namespace flexiblesusy;
using namespace cxx_diagrams;

namespace {
#include "clooptools.h"
using ChargedHiggsMultiplet = @FFMassiveVFormFactors_ChargedHiggsMultiplet@;
static constexpr double oneOver32PiSquared = 1.0/(32.0*Pi*Pi);

/**
 * @class MuEGammaVertexCorrectionFS
 * @brief A template that calculate contributions to the mu to e gamma
 *        of a given particle in a one loop diagram specified
 *        by a photon emitter and an exchange particle.
 *        Warning! We assume that the vector doesn't change the species
 *        of scalar or fermions.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template<class Fj, class Fi, class V, class F, class S>
struct FFMassiveVVertexCorrectionFS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterFj {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterFi {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};
template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterF {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};
} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_FFMassiveV_form_factors {
@FFMassiveVFormFactors_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {
/**
* @defgroup LoopFunctions Loop functions
* @brief The loop functions necessary for the Fe_I -> Fe_J gamma one-loop calculations.
*
* These are OneLoopFunctionA(), OneLoopFunctionB()
* as specified in arXiv:0808.1819
*/

template<class V>
typename field_indices<V>::type
default_indices_for_spectator( void );

template<>
typename field_indices<VP>::type
default_indices_for_spectator<VP>( void )
{
  return {};
}

template<>
typename field_indices<VZ>::type
default_indices_for_spectator<VZ>( void )
{
  return {};
}

template<>
typename field_indices<VG>::type
default_indices_for_spectator<VG>( void )
{
  return {0};
}

template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFMassiveVVertexCorrectionFS<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      EvaluationContext& context) {

   // using VertexFiBarFjVBar = Vertex<typename Fi::lorentz_conjugate, Fj, typename V::lorentz_conjugate>;
   
   // auto spectator_indices = default_indices_for_spectator<V>();
   // const auto indexFiBarFjVBar = flexiblesusy::cxx_diagrams::impl::concatenate( 
      // flexiblesusy::cxx_diagrams::impl::concatenate( indices_out, indices_in), 
      // spectator_indices);
   // const auto FiBarFjVBar = VertexFiBarFjVBar::evaluate(indexFiBarFjVBar, context);
   
   std::valarray<std::complex<double>> res {0.0, 0.0};
   
   //if(is_zero(abs(FiBarFjVBar.left())) &&  is_zero(abs(FiBarFjVBar.right()))) {
      res += FFVEmitterFj<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
      res += FFVEmitterFi<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
      res += FFVEmitterF<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
      res += FFVEmitterS<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
   //} 

   return res;
}

// emit V from the incoming fermion
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterFj<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      EvaluationContext& context) {

   using VertexFjBarFjVBar = Vertex<typename Fj::lorentz_conjugate, Fj, typename V::lorentz_conjugate>;
   using VertexFbarFjS     = Vertex<typename F::lorentz_conjugate, Fj, S>;
   using VertexFibarFSbar  = Vertex<typename Fi::lorentz_conjugate, F, typename S::lorentz_conjugate>;

   constexpr auto indexBoundsOut = VertexFibarFSbar::index_bounds;
   constexpr auto indexBoundsIn = VertexFbarFjS::index_bounds;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out)*0.;
   const auto mi2 = mi*mi;

   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: indexBoundsIn) {
      for (const auto& indexOut: indexBoundsOut) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFbarFjS::template fieldIndices<1>(indexIn);
         const auto iFieldIndices = VertexFibarFSbar::template fieldIndices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFbarFjS::template fieldIndices<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFibarFSbar::template fieldIndices<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFbarFjS::template fieldIndices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFibarFSbar::template fieldIndices<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get me the FjbarFjV vertex   
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexFjbarFjVbar = flexiblesusy::cxx_diagrams::impl::concatenate( 
            flexiblesusy::cxx_diagrams::impl::concatenate(jFieldIndices, jFieldIndices), 
            spectator_indices
         );
         const auto FjBarFjVBar = VertexFjBarFjVBar::evaluate(indexFjbarFjVbar, context);
         const auto FjBarFjVBarL = FjBarFjVBar.left();
         const auto FjBarFjVBarR = FjBarFjVBar.right();

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto mF2 = mF * mF;
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         const auto mS2 = mS*mS;

         const auto FBarFjSBar = VertexFbarFjS::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFSBar = VertexFibarFSbar::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFSBar.left();
         const auto FiBarFSR = FiBarFSBar.right();
         
         const std::complex<double> A1L = 
         (FjBarFjVBarL*(-(FBarFjSBarL*FiBarFSR*A0i(aa0,mF2)) + FBarFjSBarL*FiBarFSR*A0i(aa0,mS2) + 
       ((FiBarFSR*mF + FiBarFSL*mi)*(FBarFjSBarL*mF + FBarFjSBarR*mj) - FBarFjSBarL*FiBarFSR*mS2)*B0i(bb0,mi2,mS2,mF2) + 
       mi*(-(FBarFjSBarL*FiBarFSR*mi) + FBarFjSBarR*FiBarFSL*mj)*B0i(bb1,mi2,mS2,mF2)))/(16.*(mi - mj)*(mi + mj)*Power(Pi,2));

         const std::complex<double> A1R = 
         (FjBarFjVBarR*(-(FBarFjSBarR*FiBarFSL*A0i(aa0,mF2)) + FBarFjSBarR*FiBarFSL*A0i(aa0,mS2) + 
       ((FiBarFSL*mF + FiBarFSR*mi)*(FBarFjSBarR*mF + FBarFjSBarL*mj) - FBarFjSBarR*FiBarFSL*mS2)*B0i(bb0,mi2,mS2,mF2) + 
       mi*(-(FBarFjSBarR*FiBarFSL*mi) + FBarFjSBarL*FiBarFSR*mj)*B0i(bb1,mi2,mS2,mF2)))/(16.*(mi - mj)*(mi + mj)*Power(Pi,2));
         
         res -= std::valarray<std::complex<double>> {A1L, A1R};
      }
   }

   return res;
}

// emit V from the outgoing fermion
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterFi<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      EvaluationContext& context) {

   using VertexFiBarFiVBar = Vertex<typename Fi::lorentz_conjugate, Fi, typename V::lorentz_conjugate>;
   using VertexFBarFjS     = Vertex<typename F::lorentz_conjugate, Fj, S>;
   using VertexFiBarFSBar  = Vertex<typename Fi::lorentz_conjugate, F, typename S::lorentz_conjugate>;

   constexpr auto indexBoundsOut = VertexFiBarFSBar::index_bounds;
   constexpr auto indexBoundsIn = VertexFBarFjS::index_bounds;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out) *0.;
   const auto mi2 = mi*mi;

   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: indexBoundsIn) {
      for (const auto& indexOut: indexBoundsOut) {
         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjS::template fieldIndices<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFSBar::template fieldIndices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjS::template fieldIndices<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFSBar::template fieldIndices<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjS::template fieldIndices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFSBar::template fieldIndices<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get me the FjbarFjV vertex   
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexFiBarFiVBar = flexiblesusy::cxx_diagrams::impl::concatenate( 
            flexiblesusy::cxx_diagrams::impl::concatenate( iFieldIndices, iFieldIndices), 
             spectator_indices);
         const auto FiBarFiVBar = VertexFiBarFiVBar::evaluate(indexFiBarFiVBar, context);
         const auto FiBarFiVBarL = FiBarFiVBar.left();
         const auto FiBarFiVBarR = FiBarFiVBar.right();

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto mF2 = mF * mF;
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         const auto mS2 = mS*mS;

         const auto FBarFjSBar = VertexFBarFjS::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFSBar = VertexFiBarFSBar::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFSBar.left();
         const auto FiBarFSR = FiBarFSBar.right();
         
         const std::complex<double> A1L = 
         (FiBarFiVBarL*(FBarFjSBarL*FiBarFSR*A0i(aa0,mF2) - FBarFjSBarL*FiBarFSR*A0i(aa0,mS2) - 
       ((FiBarFSR*mF + FiBarFSL*mi)*(FBarFjSBarL*mF + FBarFjSBarR*mj) - FBarFjSBarL*FiBarFSR*mS2)*B0i(bb0,mj2,mS2,mF2) + 
       mj*(-(FBarFjSBarR*FiBarFSL*mi) + FBarFjSBarL*FiBarFSR*mj)*B0i(bb1,mj2,mS2,mF2)))/(16.*(mi - mj)*(mi + mj)*Power(Pi,2));

         const std::complex<double> A1R = 
         (FiBarFiVBarR*(FBarFjSBarR*FiBarFSL*A0i(aa0,mF2) - FBarFjSBarR*FiBarFSL*A0i(aa0,mS2) - 
       ((FiBarFSL*mF + FiBarFSR*mi)*(FBarFjSBarR*mF + FBarFjSBarL*mj) - FBarFjSBarR*FiBarFSL*mS2)*B0i(bb0,mj2,mS2,mF2) + 
       mj*(-(FBarFjSBarL*FiBarFSR*mi) + FBarFjSBarR*FiBarFSL*mj)*B0i(bb1,mj2,mS2,mF2)))/(16.*(mi - mj)*(mi + mj)*Power(Pi,2));

         res -= std::valarray<std::complex<double>> {A1L, A1R};
      }
   }
   return res;
}

// emit V from the fermion in the loop
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterF<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      EvaluationContext& context) {

   using VertexFBarFVBar  = Vertex<typename F::lorentz_conjugate, F, typename V::lorentz_conjugate>;
   using VertexFBarFjS    = Vertex<typename F::lorentz_conjugate, Fj, S>;
   using VertexFiBarFSBar = Vertex<typename Fi::lorentz_conjugate, F, typename S::lorentz_conjugate>;

   constexpr auto indexBoundsOut = VertexFiBarFSBar::index_bounds;
   constexpr auto indexBoundsIn = VertexFBarFjS::index_bounds;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out)*0.;
   const auto mi2 = mi*mi;

   auto spectator_indices = default_indices_for_spectator<V>();

   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: indexBoundsIn) {
      for (const auto& indexOut: indexBoundsOut) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjS::template fieldIndices<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFSBar::template fieldIndices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjS::template fieldIndices<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFSBar::template fieldIndices<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // get FBarFVBar vertex
         const auto fermionFieldIndicesIn = VertexFBarFjS::template fieldIndices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFSBar::template fieldIndices<1>(indexOut);
         const auto indexFBarFVBar = flexiblesusy::cxx_diagrams::impl::concatenate(
            flexiblesusy::cxx_diagrams::impl::concatenate(fermionFieldIndicesOut, fermionFieldIndicesIn),
            spectator_indices
         );
         const auto FBarFVBar = VertexFBarFVBar::evaluate(indexFBarFVBar, context);
         const auto FBarFVBarL = FBarFVBar.left();
         const auto FBarFVBarR = FBarFVBar.right();

         const auto mFB = context.mass<F>(fermionFieldIndicesIn);
         const auto mFB2 = mFB*mFB;
         const auto mFA = context.mass<F>(fermionFieldIndicesOut);
         const auto mFA2 = mFA*mFA;
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         const auto mS2 = mS*mS;

         const auto FBarFjSBar = VertexFBarFjS::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFSBar = VertexFiBarFSBar::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFSBar.left();
         const auto FiBarFSR = FiBarFSBar.right();

         // @todo: for now set to 0
         const std::complex<double> A1L = 
         (-(FBarFjSBarL*FBarFVBarR*FiBarFSR*B0i(bb0,0,mFA2,mFB2)) + (FBarFVBarL*(FiBarFSR*mFA + FiBarFSL*mi)*(FBarFjSBarL*mFB + FBarFjSBarR*mj) - 
        FBarFjSBarL*FBarFVBarR*FiBarFSR*mS2)*C0i(cc0,mi2,0,mj2,mS2,mFA2,mFB2) + 2*FBarFjSBarL*FBarFVBarR*FiBarFSR*C0i(cc00,mi2,0,mj2,mS2,mFA2,mFB2) + 
     FBarFjSBarL*FBarFVBarL*FiBarFSL*mFB*mi*C0i(cc1,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarR*FBarFVBarL*FiBarFSR*mFA*mj*C0i(cc1,mi2,0,mj2,mS2,mFA2,mFB2) + 
     2*FBarFjSBarR*FBarFVBarL*FiBarFSL*mi*mj*C0i(cc1,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarL*FBarFVBarR*FiBarFSR*mi2*C0i(cc11,mi2,0,mj2,mS2,mFA2,mFB2) + 
     FBarFjSBarR*FBarFVBarL*FiBarFSL*mi*mj*C0i(cc11,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarL*FBarFVBarR*FiBarFSR*mi2*C0i(cc12,mi2,0,mj2,mS2,mFA2,mFB2) + 
     2*FBarFjSBarR*FBarFVBarL*FiBarFSL*mi*mj*C0i(cc12,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarL*FBarFVBarR*FiBarFSR*mj2*C0i(cc12,mi2,0,mj2,mS2,mFA2,mFB2) + 
     FBarFjSBarL*FBarFVBarL*FiBarFSL*mFB*mi*C0i(cc2,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarR*FBarFVBarL*FiBarFSR*mFA*mj*C0i(cc2,mi2,0,mj2,mS2,mFA2,mFB2) + 
     2*FBarFjSBarR*FBarFVBarL*FiBarFSL*mi*mj*C0i(cc2,mi2,0,mj2,mS2,mFA2,mFB2) + 
     mj*(FBarFjSBarR*FBarFVBarL*FiBarFSL*mi + FBarFjSBarL*FBarFVBarR*FiBarFSR*mj)*C0i(cc22,mi2,0,mj2,mS2,mFA2,mFB2))/(16.*Power(Pi,2));

        const std::complex<double> A1R = 
        (-(FBarFjSBarR*FBarFVBarL*FiBarFSL*B0i(bb0,0,mFA2,mFB2)) + (FBarFVBarR*(FiBarFSL*mFA + FiBarFSR*mi)*(FBarFjSBarR*mFB + FBarFjSBarL*mj) - 
        FBarFjSBarR*FBarFVBarL*FiBarFSL*mS2)*C0i(cc0,mi2,0,mj2,mS2,mFA2,mFB2) + 2*FBarFjSBarR*FBarFVBarL*FiBarFSL*C0i(cc00,mi2,0,mj2,mS2,mFA2,mFB2) + 
     FBarFjSBarR*FBarFVBarR*FiBarFSR*mFB*mi*C0i(cc1,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarL*FBarFVBarR*FiBarFSL*mFA*mj*C0i(cc1,mi2,0,mj2,mS2,mFA2,mFB2) + 
     2*FBarFjSBarL*FBarFVBarR*FiBarFSR*mi*mj*C0i(cc1,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarR*FBarFVBarL*FiBarFSL*mi2*C0i(cc11,mi2,0,mj2,mS2,mFA2,mFB2) + 
     FBarFjSBarL*FBarFVBarR*FiBarFSR*mi*mj*C0i(cc11,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarR*FBarFVBarL*FiBarFSL*mi2*C0i(cc12,mi2,0,mj2,mS2,mFA2,mFB2) + 
     2*FBarFjSBarL*FBarFVBarR*FiBarFSR*mi*mj*C0i(cc12,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarR*FBarFVBarL*FiBarFSL*mj2*C0i(cc12,mi2,0,mj2,mS2,mFA2,mFB2) + 
     FBarFjSBarR*FBarFVBarR*FiBarFSR*mFB*mi*C0i(cc2,mi2,0,mj2,mS2,mFA2,mFB2) + FBarFjSBarL*FBarFVBarR*FiBarFSL*mFA*mj*C0i(cc2,mi2,0,mj2,mS2,mFA2,mFB2) + 
     2*FBarFjSBarL*FBarFVBarR*FiBarFSR*mi*mj*C0i(cc2,mi2,0,mj2,mS2,mFA2,mFB2) + 
     mj*(FBarFjSBarL*FBarFVBarR*FiBarFSR*mi + FBarFjSBarR*FBarFVBarL*FiBarFSL*mj)*C0i(cc22,mi2,0,mj2,mS2,mFA2,mFB2))/(16.*Power(Pi,2));

         res -= std::valarray<std::complex<double>> {A1L, A1R};
      }
   }
   return res;
}

// emit V from the scalar in the loop
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterS<Fj, Fi, V, F, S>::value(
   const typename field_indices<Fj>::type& indices_in, 
   const typename field_indices<Fi>::type& indices_out, 
   EvaluationContext& context) {

   using VertexSBarSVBar  = Vertex<typename S::lorentz_conjugate, S, typename V::lorentz_conjugate>;
   using VertexFBarFjS    = Vertex<typename F::lorentz_conjugate, Fj, S>;
   using VertexFiBarFSBar = Vertex<typename Fi::lorentz_conjugate, F, typename S::lorentz_conjugate>;

   auto spectator_indices = default_indices_for_spectator<V>();

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out);
   const auto mi2 = mi*mi;

   constexpr auto indexBoundsOut = VertexFiBarFSBar::index_bounds;
   constexpr auto indexBoundsIn = VertexFBarFjS::index_bounds;

   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: indexBoundsIn) {
      for (const auto& indexOut: indexBoundsOut) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjS::template fieldIndices<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFSBar::template fieldIndices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjS::template fieldIndices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFSBar::template fieldIndices<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get SBarSVBar vertex 
         const auto scalarFieldIndicesIn = VertexFBarFjS::template fieldIndices<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFSBar::template fieldIndices<2>(indexOut);
         const auto indexSBarSVBar = flexiblesusy::cxx_diagrams::impl::concatenate(
            flexiblesusy::cxx_diagrams::impl::concatenate(scalarFieldIndicesOut, scalarFieldIndicesIn), 
            spectator_indices
         );
         const auto SBarSVBar = VertexSBarSVBar::evaluate(indexSBarSVBar, context).value();

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto mF2 = mF*mF;
         const auto mSB = context.mass<S>(scalarFieldIndicesIn);
         const auto mSB2 = mSB*mSB;
         const auto mSA = context.mass<S>(scalarFieldIndicesOut);
         const auto mSA2 = mSA * mSA;

         const auto FBarFjSBar = VertexFBarFjS::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFSBar = VertexFiBarFSBar::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFSBar.left();
         const auto FiBarFSR = FiBarFSBar.right();

         const std::complex<double> A1L = 
         (SBarSVBar*(-2*FBarFjSBarL*FiBarFSR*C0i(cc00,0,mi2,mj2,mSB2,mSA2,mF2) /*+ FBarFjSBarL*FiBarFSR*(mi - mj)*(mi + mj)*C0i(cc12,0,mi2,mj2,mSB2,mSA2,mF2) - 
       (FBarFjSBarL*FiBarFSL*mF*mi + FBarFjSBarR*FiBarFSR*mF*mj + FBarFjSBarR*FiBarFSL*mi*mj + FBarFjSBarL*FiBarFSR*mj2)*C0i(cc2,0,mi2,mj2,mSB2,mSA2,mF2) - 
       mj*(FBarFjSBarR*FiBarFSL*mi + FBarFjSBarL*FiBarFSR*mj)*C0i(cc22,0,mi2,mj2,mSB2,mSA2,mF2)*/))/(16.*Power(Pi,2));

         const std::complex<double> A1R = 
         (SBarSVBar*(-2*FBarFjSBarR*FiBarFSL*C0i(cc00,0,mi2,mj2,mSB2,mSA2,mF2) /*+ FBarFjSBarR*FiBarFSL*(mi2 - mj2)*C0i(cc12,0,mi2,mj2,mSB2,mSA2,mF2) - 
       (FBarFjSBarR*FiBarFSR*mF*mi + FBarFjSBarL*FiBarFSL*mF*mj + FBarFjSBarL*FiBarFSR*mi*mj + FBarFjSBarR*FiBarFSL*Power(mj,2))*
        C0i(cc2,0,mi2,mj2,mSB2,mSA2,mF2) - (FBarFjSBarL*FiBarFSR*mi*mj + FBarFjSBarR*FiBarFSL*mj2)*C0i(cc22,0,mi2,mj2,mSB2,mSA2,mF2)*/))/(16.*Power(Pi,2));
         
         res -= std::valarray<std::complex<double>> {A1L, A1R};
      }
   }
   return res;
}
} // anonymous namespace
