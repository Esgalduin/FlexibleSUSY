// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_FFMassiveV_form_factors.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include <valarray>
#include <complex>
#include <iostream>

#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_cxx_diagrams.hpp"

#include "@ModelName@_FFMassiveV_form_factors.hpp"

using namespace flexiblesusy;
using namespace cxx_diagrams;

namespace {
using ChargedHiggsMultiplet = @FFMassiveVFormFactors_ChargedHiggsMultiplet@;
static constexpr double oneOver32PiSquared = 1.0/(32.0*Pi*Pi);

/**
 * @class MuEGammaVertexCorrectionFS
 * @brief A template that calculate contributions to the mu to e gamma
 *        of a given particle in a one loop diagram specified
 *        by a photon emitter and an exchange particle.
 *        Warning! We assume that the vector doesn't change the species
 *        of scalar or fermions.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template<class FermionIn, class FermionOut, class Spectator, class Fermion, class Scalar>
struct FFMassiveVVertexCorrectionFS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<FermionIn>::type& indices_in,
         const typename field_indices<FermionOut>::type& indices_out,
                       EvaluationContext& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterFj {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};

template<class FIn, class FOut, class V, class F, class S>
struct FFVEmitterFOut {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<FIn>::type& indices_in,
         const typename field_indices<FOut>::type& indices_out,
                       EvaluationContext& context);
};
template<class FIn, class FOut, class V, class F, class S>
struct FFVEmitterS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<FIn>::type& indices_in,
         const typename field_indices<FOut>::type& indices_out,
                       EvaluationContext& context);
};

template<class FIn, class FOut, class V, class F, class S>
struct FFVEmitterF {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<FIn>::type& indices_in,
         const typename field_indices<FOut>::type& indices_out,
                       EvaluationContext& context);
};
} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_FFMassiveV_form_factors {
@FFMassiveVFormFactors_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {
/**
* @defgroup LoopFunctions Loop functions
* @brief The loop functions necessary for the Fe_I -> Fe_J gamma one-loop calculations.
*
* These are OneLoopFunctionA(), OneLoopFunctionB()
* as specified in arXiv:0808.1819
*/

// eq. 15 of hep-ph/9510309 
double F(double xAX, double xBX) {
   if (false) {
      return 0.;
   } else {
      return std::log(xAX) + 1./(xAX - xBX) * (
         xAX*xAX*std::log(xAX)/(1.-xAX)
       - xBX*xBX*std::log(xBX)/(1.-xBX)
      );
   }
}

double G(double rAX/*, double rBX*/) {
   return rAX;
}

template<class Spectator>
typename field_indices<Spectator>::type
default_indices_for_spectator( void );

template<>
typename field_indices<VP>::type
default_indices_for_spectator<VP>( void )
{
  return {};
}

template<>
typename field_indices<VZ>::type
default_indices_for_spectator<VZ>( void )
{
  return {};
}

template<>
typename field_indices<VG>::type
default_indices_for_spectator<VG>( void )
{
  return {0};
}

template<class FermionIn, class FermionOut, class Spectator, class Fermion, class Scalar>
std::valarray<std::complex<double>> FFMassiveVVertexCorrectionFS<
FermionIn, FermionOut, Spectator, Fermion, Scalar
>::value(
      const typename field_indices<FermionIn>::type& indices_in, 
      const typename field_indices<FermionOut>::type& indices_out, 
      EvaluationContext& context)
{
   const auto hhhh = FFVEmitterFj<FermionIn, FermionOut, Spectator, Fermion, Scalar>::value(indices_in, indices_out, context);   
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};

/*
   using VertexFbarFinS = Vertex<
                         FermionIn,
                         Scalar,
                         typename Fermion::lorentz_conjugate
                         >;
   using VertexFoutbarFSbar = Vertex<
                         typename FermionOut::lorentz_conjugate,
                         typename Scalar::lorentz_conjugate,
                         Fermion
                         >;
   using VertexSbarSVbar = Vertex<
                         typename Spectator::lorentz_conjugate,
                         Scalar,
                         typename Scalar::lorentz_conjugate
                         >;
   using VertexFbarFVbar = Vertex<
                         typename Spectator::lorentz_conjugate,
                         Fermion,
                         typename Fermion::lorentz_conjugate
                         >;
   using VertexFinbarFinVbar = Vertex<
                         typename Spectator::lorentz_conjugate,
                         FermionIn,
                         typename FermionIn::lorentz_conjugate
                         >;
   using VertexFoutbarFoutVbar = Vertex<
                         typename Spectator::lorentz_conjugate,
                         FermionOut,
                         typename FermionOut::lorentz_conjugate
                         >;

   constexpr auto indexBoundsOut = VertexFoutbarFSbar::index_bounds;
   constexpr auto indexBoundsIn = VertexFbarFinS::index_bounds;

   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: indexBoundsIn) {
      for (const auto& indexOut: indexBoundsOut) {

         // cycle if generations of external fermions  are different then requested   
         const auto edmFieldIndicesIn = VertexFbarFinS::template fieldIndices<0>(indexIn);
         const auto edmFieldIndicesOut = VertexFoutbarFSbar::template fieldIndices<0>(indexOut);
         if (edmFieldIndicesIn != indices_in || edmFieldIndicesOut != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFbarFinS::template fieldIndices<1>(indexIn);
         const auto scalarFieldIndicesOut = VertexFoutbarFSbar::template fieldIndices<1>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFbarFinS::template fieldIndices<2>(indexIn);
         const auto fermionFieldIndicesOut = VertexFoutbarFSbar::template fieldIndices<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get me the FjbarFjV vertex   
         auto spectator_indices = default_indices_for_spectator<Spectator>();
         const auto indexFinbarFinVbar = flexiblesusy::cxx_diagrams::impl::concatenate( flexiblesusy::cxx_diagrams::impl::concatenate( spectator_indices, edmFieldIndicesIn ), edmFieldIndicesIn );
         const auto FjbarFjV = VertexFinbarFinVbar::evaluate(indexFinbarFinVbar, context);

         // get me the FibarFiV vertex   
         const auto indexFOutBarFOutVBar = flexiblesusy::cxx_diagrams::impl::concatenate( flexiblesusy::cxx_diagrams::impl::concatenate( spectator_indices, edmFieldIndicesOut ), edmFieldIndicesOut );
         const auto FibarFiV = VertexFinbarFinVbar::evaluate(indexFOutBarFOutVBar, context);

         // get SbarSV vertex
         const auto indexSBarSVBar = flexiblesusy::cxx_diagrams::impl::concatenate( flexiblesusy::cxx_diagrams::impl::concatenate( spectator_indices, scalarFieldIndicesOut ), scalarFieldIndicesIn );
         const auto SBarSVBar = VertexSbarSVbar::evaluate(indexSBarSVBar, context);

         // get FBarFV vertex
         const auto indexFBarFVBar = flexiblesusy::cxx_diagrams::impl::concatenate( flexiblesusy::cxx_diagrams::impl::concatenate( spectator_indices, fermionFieldIndicesOut ), fermionFieldIndicesIn );
         const auto FBarFVBar = VertexFbarFVbar::evaluate(indexFBarFVBar, context);

         const auto mfIn = context.mass<FermionIn>(edmFieldIndicesIn);
         const auto mfOut = context.mass<FermionOut>(edmFieldIndicesOut);

         const auto mF = context.mass<Fermion>(fermionFieldIndicesIn);
         const auto mS = context.mass<Scalar>(scalarFieldIndicesIn);
         const auto x {pow(mF/mS,2)};

         const std::complex<double> A1L = 0.;
         const std::complex<double> A1R = 0.;
         res += std::valarray<std::complex<double>> {A1L, A1R};


         const auto EmitterIndicesIn = FermionVertexIn::template fieldIndices<2>(indexIn);
         const auto EmitterIndicesOut = FermionVertexOut::template fieldIndices<2>(indexOut);
         if (EmitterIndicesIn != EmitterIndicesOut) continue;

         // Throw out SM Goldstone, it could crash if SM is used.
         if ( std::is_same<Emitter1, ChargedHiggsMultiplet>::type::value || 
                 std::is_same<Emitter1, typename ChargedHiggsMultiplet::lorentz_conjugate>::type::value )
         {
            if ( EmitterIndicesIn[0] == 0 )
                continue;
         }

         const auto vertexIn = FermionVertexIn::evaluate(indexIn, context);
         const auto vertexOut = FermionVertexOut::evaluate(indexOut, context);


         std::complex<double> EmitterCharge (vertexEmit.value());

         // eq. 15 of hep-ph/9510309
            1./18. * vertexOut.right() * vertexIn.left() * G(x);
         // eq. 16 of hep-ph/9510309
         const std::complex<double> A2L = 
            vertexOut.left() * vertexIn.right() * G(x) 
            + vertexOut.left()* vertexIn.left() * exchangeFieldMass/leptonMass * G(x);

      }
   }
*/
   return res;
}

// emit V for incoming fermion
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterFj<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      EvaluationContext& context) {

   using VertexFjBarFjVBar = Vertex<typename Fj::lorentz_conjugate, Fj, typename V::lorentz_conjugate>;
   using VertexFbarFjS     = Vertex<typename F::lorentz_conjugate, Fj, S>;
   using VertexFibarFSbar  = Vertex<typename Fi::lorentz_conjugate, F, typename S::lorentz_conjugate>;

   constexpr auto indexBoundsOut = VertexFibarFSbar::index_bounds;
   constexpr auto indexBoundsIn = VertexFbarFjS::index_bounds;

   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};

   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: indexBoundsIn) {
      for (const auto& indexOut: indexBoundsOut) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFbarFjS::template fieldIndices<1>(indexIn);
         const auto iFieldIndices = VertexFibarFSbar::template fieldIndices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFbarFjS::template fieldIndices<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFibarFSbar::template fieldIndices<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFbarFjS::template fieldIndices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFibarFSbar::template fieldIndices<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get me the FjbarFjV vertex   
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexFjbarFjVbar = flexiblesusy::cxx_diagrams::impl::concatenate( flexiblesusy::cxx_diagrams::impl::concatenate( spectator_indices, jFieldIndices), jFieldIndices );
         const auto FjbarFjV = VertexFjBarFjVBar::evaluate(indexFjbarFjVbar, context);

         std::cout << FjbarFjV.left() << ' ' << FjbarFjV.right() << std::endl;
      }
   }

   return res;
}

// emit V for outgoing fermion
template<class FIn, class FOut, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterFOut<
FIn, FOut, V, F, S
>::value(
      const typename field_indices<FIn>::type& indices_in, 
      const typename field_indices<FOut>::type& indices_out, 
      EvaluationContext& context)
{
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
}

// emit V from fermion in the loop
template<class FIn, class FOut, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterF<
FIn, FOut, V, F, S
>::value(
      const typename field_indices<FIn>::type& indices_in, 
      const typename field_indices<FOut>::type& indices_out, 
      EvaluationContext& context)
{
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
}

// emit V from scalar in the loop
template<class FIn, class FOut, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterS<
FIn, FOut, V, F, S
>::value(
      const typename field_indices<FIn>::type& indices_in, 
      const typename field_indices<FOut>::type& indices_out, 
      EvaluationContext& context)
{
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
}
} // anonymous namespace
