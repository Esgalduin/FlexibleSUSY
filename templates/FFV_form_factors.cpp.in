// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_FFV_form_factors.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */
#include <valarray>
#include <complex>
#include <iostream>

#include "@ModelName@_mu_to_egamma.hpp"
#include "@ModelName@_mass_eigenstates.hpp"

#include "cxx_qft/@ModelName@_qft.hpp"
#include "concatenate.hpp"

#define INPUTPARAMETER(p) context.model.get_input().p
#define MODELPARAMETER(p) context.model.get_##p()
#define DERIVEDPARAMETER(p) context.model.p()
#define PHASE(p) context.model.get_##p()

using namespace flexiblesusy;
using namespace cxx_qft;

namespace {
using namespace cxx_qft::fields;

using ChargedHiggsMultiplet = @FFVFormFactors_ChargedHiggsMultiplet@;
static constexpr double oneOver32PiSquared = 1.0/(32.0*Pi*Pi);

/**
 * @class MuEGammaVertexCorrectionSF
 * @brief A template that calculate contributions to the mu to e gamma
 *        of a given particle in a one loop diagram specified
 *        by a photon emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template<class Fj, class Fi, class Spectator, class ExchangeParticle, class Emitter>
struct FFVEmitterS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};

/**
* @class EDMVertexCorrectionFS
* @brief A template that calculate contributions to the EDM
*        of a given particle in a one loop diagram specified
*        by a photon emitter and an exchange particle.
* @tparam Args Specifies in order the field of which to
*              calculate the electric dipole moment,
*              the photon emitter and the exchange particle
*              in a one-loop diagram where the photon emitter
*              is a fermion and the exchange particle a scalar.
*
* This template evaluates the contribution to the electric
* dipole moment of a one loop diagram with fields given by
* \a Args.
*/

template<class FermionIn, class Fi, class Spectator, class Emitter, class ExchangeParticle>
struct FFVEmitterF {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<FermionIn>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       EvaluationContext& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFV {
static std::valarray<std::complex<double>> value(
   const typename field_indices<Fj>::type& indices_in, 
   const typename field_indices<Fi>::type& indices_out, 
   EvaluationContext& context);
};
} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_FFV_form_factors {

   /*
inline double sm_width(int generationIndex1,  int generationIndex2, const @ModelName@_mass_eigenstates& model ) {
   @ModelName@_mass_eigenstates model_ = model;
   EvaluationContext context{ model_ };
   std::array<int, 1> indices1 = { generationIndex1 };
   std::array<int, 1> indices2 = { generationIndex2 };

   const auto leptonInMass = context.mass<Fe>(indices1);
   const auto leptonOutMass = context.mass<Fe>(indices2);
   const auto ratio = pow(leptonOutMass/leptonInMass,2);
   const auto GF {1.1667e-5};
   const double Alpha = Sqr(Fe::electric_charge * unit_charge(context))/(4*Pi);

   return GF*GF * pow(leptonInMass,5) * (1.0 - 8.0*ratio ) * (1.0 + 0.5 * Alpha * (6.25-Sqr(Pi))/Pi)/(192.0*pow(Pi,3));
}
*/
@FFVFormFactors_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {
/**
* @defgroup LoopFunctions Loop functions
* @brief The loop functions necessary for the Fe_I -> Fe_J gamma one-loop calculations.
*
* These are OneLoopFunctionA(), OneLoopFunctionB()
* as specified in arXiv:0808.1819
*/

// function from eq. 15 of hep-ph/9510309 
double OneLoopFunctionA(double r)
{
   if (is_zero(1.0-r)) {
      return 1.5;
   } else if (is_zero(r)) {
      return 2.0;
   }
   else {
      return (2.0 - 9.0*r + 18.0*r*r - 11.0*r*r*r + 6.0*r*r*r*std::log(r))/pow(1.0-r,4);
   }
}

double OneLoopFunctionB(double r)
{
   if (is_zero(1.0-r)) {
      return 1.0/12.0;
   } else if (is_zero(r)) {
      return 1.0/6.0;
   }
   else {
      return (1.0 - 6.0*r + 3.0*r*r + 2.0*r*r*r - 6.0*r*r*std::log(r))/6.0/pow(1.0-r,4);
   }
}

double OneLoopFunctionC(double r)
{
   if (is_zero(1.0-r)) {
      return 1.0/3.0;
   } else if (is_zero(r)) {
      return 1.0;
   }
   else {
      return (1.0 - r*r + 2.0*r*std::log(r))/pow(1.0-r,3);
   }
}

double OneLoopFunctionD(double r)
{
   if (is_zero(1.0-r)) {
      return -9.0/2.0;
   }
   else {
      return (16.0 - 45.0*r + 36.0*r*r - 7.0*r*r*r + 6.0*(2.0-3.0*r)*std::log(r))/pow(1.0-r,4);
   }
}

double OneLoopFunctionE(double r)
{
   if (is_zero(1.0-r)) {
      return 1.0/12.0;
   } else if (is_zero(r)) {
      return 1.0/3.0;
   }
   else {
      return (2.0 + 3.0*r - 6.0*r*r + r*r*r + 6.0*r*std::log(r))/6.0/pow(1.0-r,4);
   }
}

double OneLoopFunctionF(double r)
{
   if (is_zero(1.0-r)) {
      return 2.0/3.0;
   }
   else {
      return (-3.0 + 4.0*r - r*r - 2.0*std::log(r))/pow(1.0-r,3);
   }
}

template<class Spectator>
typename field_indices<Spectator>::type
default_indices_for_spectator( void );

template<>
typename field_indices<VP>::type
default_indices_for_spectator<VP>( void )
{
  return {};
}

template<>
typename field_indices<VG>::type
default_indices_for_spectator<VG>( void )
{
  return {0};
}

// emit V from the internal scalar line
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterS<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      EvaluationContext& context) {

   using VertexFBarFjSBar = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, F, S>;
   using VertexSBarSVBar  = Vertex<typename S::lorentz_conjugate, S, typename V::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);

   auto spectator_indices = default_indices_for_spectator<V>();

   // loop over all possible particle "generations" attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template field_indices<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template field_indices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template field_indices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template field_indices<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // match indices of the scalar in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template field_indices<2>(indexIn);
         const auto scalarIndicesOut = VertexFiBarFS::template field_indices<2>(indexOut);
         if (scalarFieldIndicesIn != scalarIndicesOut) 
            continue;

         // Throw out SM Goldstone, it could crash if SM is used.
         // if ( std::is_same<S, ChargedHiggsMultiplet>::type::value || 
               //   std::is_same<S, typename ChargedHiggsMultiplet::lorentz_conjugate>::type::value )
         // {
            // if ( scalarFieldIndicesIn[0] == 0 )
               //  continue;
         // }

         const auto vertexIn = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFS::evaluate(indexOut, context);

         const auto indexEmit = concatenate(scalarFieldIndicesIn, scalarFieldIndicesIn, spectator_indices);
         const auto vertexEmit = VertexSBarSVBar::evaluate(indexEmit, context);

         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto x = pow(mF/mS, 2);

         std::complex<double> vector_boson_coupling {vertexEmit.value(1,0)};
         std::cout << "S: " << vector_boson_coupling << '\n';

         // eq. 15 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A1L =
            - 1./18. * vertexOut.right() * vertexIn.left() * OneLoopFunctionA(x);
         // eq. 16 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A2L = 
            - vertexOut.left() * vertexIn.right() * OneLoopFunctionB(x) 
            - vertexOut.left()* vertexIn.left() * mF/mj * OneLoopFunctionC(x);

         // eq. 15 & 16 of hep-ph/9510309 after replacement L <-> R (possibly with different sign)
         const std::complex<double> A1R = 
            - 1./18. * vertexOut.left() * vertexIn.right() * OneLoopFunctionA(x);
         const std::complex<double> A2R = 
            - vertexOut.right() * vertexIn.left() * OneLoopFunctionB(x) 
            - vertexOut.right()* vertexIn.right() * mF/mj * OneLoopFunctionC(x);

         const std::complex<double> massFactor = pow(mS,-2);

         res += oneOver32PiSquared * vector_boson_coupling * massFactor 
            * std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }

   return res;
}

// emit spectator from the internal fermion line
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterF<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out,
      EvaluationContext& context) {

   using VertexFBarFjSBar = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, F, S>;
   using VertexFBarFVBar  = Vertex<typename F::lorentz_conjugate, F, typename V::lorentz_conjugate>;
   
   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);

   // loop over all possible particle "generations" attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template field_indices<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template field_indices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the exchange field
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template field_indices<2>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template field_indices<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut )
            continue;

         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template field_indices<0>(indexIn);
         const auto scalarIndicesOut = VertexFiBarFS::template field_indices<1>(indexOut);
         if (scalarFieldIndicesIn != scalarIndicesOut) 
            continue;

         // Throw out SM Goldstone, it could crash if SM is used.
         if ( std::is_same<S, ChargedHiggsMultiplet>::type::value || 
                 std::is_same<S, typename ChargedHiggsMultiplet::lorentz_conjugate>::type::value )
         {
            if ( fermionFieldIndicesIn[0] == 0 )
                continue;
         }

         const auto vertexIn = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFS::evaluate(indexOut, context);
         
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexEmit = concatenate(scalarFieldIndicesIn , scalarFieldIndicesIn, spectator_indices);
         const auto vertexEmit = VertexFBarFVBar::evaluate(indexEmit, context);

         const auto mF = context.mass<F>(scalarFieldIndicesIn);
         const auto mS = context.mass<S>(fermionFieldIndicesIn);
         const auto x = pow(mF/mS, 2);

         std::complex<double> vector_boson_coupling {vertexEmit.left()};
         std::cout << "F: " << vector_boson_coupling << '\n';

         // eq. 18 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A1L =
            - 1./18. * vertexOut.right() * vertexIn.left() * OneLoopFunctionD(x);
         // eq. 19 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A2L = 
            - vertexOut.left() * vertexIn.right() * OneLoopFunctionE(x) 
            - vertexOut.left()* vertexIn.left() * mF/mj * OneLoopFunctionF(x);

         // eq. 18 & 18 of hep-ph/9510309 after replacement L <-> R (possibly with different sign)
         const std::complex<double> A1R = 
            - 1./18. * vertexOut.left() * vertexIn.right() * OneLoopFunctionD(x);
         const std::complex<double> A2R = 
            - vertexOut.right() * vertexIn.left() * OneLoopFunctionE(x) 
            - vertexOut.right()* vertexIn.right() * mF/mj * OneLoopFunctionF(x);
         const std::complex<double> massFactor = pow(mS,-2);

         res += oneOver32PiSquared * vector_boson_coupling * massFactor 
            * std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }

   return res;
}

/*
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFV<Fj, Fi, V, F, S>::value(
   const typename field_indices<Fj>::type& indices_in, 
   const typename field_indices<Fi>::type& indices_out, 
   EvaluationContext& context) {

   auto spectator_indices = default_indices_for_spectator<V>();
   using VertexFjBarFjVBar = Vertex<typename Fj::lorentz_conjugate, Fj, typename V::lorentz_conjugate>;
         const auto kuwa = concatenate(
            indices_in, indices_in, 
            spectator_indices
         );
   const auto FjBarFjVBar = VertexFjBarFjVBar::evaluate(kuwa, context).left();
   using VertexFBarFjS     = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexSBarSVBar  = Vertex<typename S::lorentz_conjugate, S, typename V::lorentz_conjugate>;
   using VertexFBarFVBar  = Vertex<typename F::lorentz_conjugate, F, typename V::lorentz_conjugate>;
   using VertexFiBarFSBar  = Vertex<typename Fi::lorentz_conjugate, F, S>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;

   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: index_range<VertexFBarFjS>()) {
      for (const auto& indexOut: index_range<VertexFiBarFSBar>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjS::template field_indices<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFSBar::template field_indices<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjS::template field_indices<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFSBar::template field_indices<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get SBarSVBar vertex 
         const auto scalarFieldIndicesIn = VertexFBarFjS::template field_indices<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFSBar::template field_indices<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         const auto indexSBarSVBar = concatenate(
            scalarFieldIndicesOut, scalarFieldIndicesIn, 
            spectator_indices
         );
         // not clear what the sign
         const auto SBarSVBar = -VertexSBarSVBar::evaluate(indexSBarSVBar, context).value(1,0);
         // const auto SBarSVBar = VertexSBarSVBar::evaluate(indexSBarSVBar, context).value(positive momentum index, negative momentum index);

         // get FBarFVBar vertex
         const auto indexFBarFVBar = concatenate(
            fermionFieldIndicesOut, fermionFieldIndicesIn,
            spectator_indices
         );
         const auto FBarFVBar = VertexFBarFVBar::evaluate(indexFBarFVBar, context).left();

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto mS = context.mass<S>(scalarFieldIndicesOut);
         const auto x = pow(mF/mS, 2);


         const auto FBarFjSBar = VertexFBarFjS::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFSBar = VertexFiBarFSBar::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFSBar.left();
         const auto FiBarFSR = FiBarFSBar.right();

         const auto A1L = (FBarFjSBarL*FiBarFSR*((-1 + x)*(18*FBarFVBar*Power(-1 + x,2) + FjBarFjVBar*(-2 + 7*x - 11*Power(x,2))) - 
       6*(-(FjBarFjVBar*Power(x,3)) + FBarFVBar*(2 - 3*x + Power(x,3)))*Log(x)))/(576.*Power(mS,2)*Power(Pi,2)*Power(-1 + x,4));

       const auto A1R = (FBarFjSBarR*FiBarFSL*((-1 + x)*(18*FBarFVBar*Power(-1 + x,2) + FjBarFjVBar*(-2 + 7*x - 11*Power(x,2))) - 
       6*(-(FjBarFjVBar*Power(x,3)) + FBarFVBar*(2 - 3*x + Power(x,3)))*Log(x)))/(576.*Power(mS,2)*Power(Pi,2)*Power(-1 + x,4));
          
      const auto A2L = 
         -(FBarFjSBarL*FiBarFSL*Sqrt(x)*((-1 + x)*(2*FBarFVBar*(-1 + x) - FjBarFjVBar*(1 + x)) + 2*(FBarFVBar - FBarFVBar*x + FjBarFjVBar*x)*Log(x)))/
    (32.*mj*mS*Power(Pi,2)*Power(-1 + x,3)) - (FBarFjSBarR*FiBarFSL*
      ((-1 + x)*(FjBarFjVBar - 5*FjBarFjVBar*x - 2*FjBarFjVBar*Power(x,2) + 3*FBarFVBar*(-1 + Power(x,2))) +
        6*x*(FBarFVBar - FBarFVBar*x + FjBarFjVBar*x)*Log(x)))/(192.*Power(mS,2)*Power(Pi,2)*Power(-1 + x,4));
         
         const auto A2R =
            -(FBarFjSBarR*FiBarFSR*Sqrt(x)*((-1 + x)*(2*FBarFVBar*(-1 + x) - FjBarFjVBar*(1 + x)) + 2*(FBarFVBar - FBarFVBar*x + FjBarFjVBar*x)*Log(x)))/
    (32.*mj*mS*Power(Pi,2)*Power(-1 + x,3)) - (FBarFjSBarL*FiBarFSR*
      ((-1 + x)*(FjBarFjVBar - 5*FjBarFjVBar*x - 2*FjBarFjVBar*Power(x,2) + 3*FBarFVBar*(-1 + Power(x,2))) +
        6*x*(FBarFVBar - FBarFVBar*x + FjBarFjVBar*x)*Log(x)))/(192.*Power(mS,2)*Power(Pi,2)*Power(-1 + x,4));
            
         res += std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }
   return res;
}
*/

} // anonymous namespace
