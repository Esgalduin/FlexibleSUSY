// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

#ifndef @ModelName@_TWO_SCALE_MATCHING_H
#define @ModelName@_TWO_SCALE_MATCHING_H

#include "two_scale_matching.hpp"
#include "@ModelName@_two_scale_model.hpp"
#include "SM_two_scale_model.hpp"
#include "@ModelName@_SM_matching.hpp"
#include "error.hpp"

namespace flexiblesusy {

class Two_scale;
class Two_scale_model;

template <class T>
class @ModelName@_SM_Matching;

template<>
class @ModelName@_SM_Matching<Two_scale>: public Matching<Two_scale>
{
public:
   @ModelName@_SM_Matching(): scale(0), eft(0), model(0) {}

   @ModelName@_SM_Matching(SM<Two_scale>* low_, @ModelName@<Two_scale>* high_):scale(0), eft(low_), model(high_) {}

   virtual ~@ModelName@_SM_Matching() {}

   virtual double get_scale() const {return scale;}

   void set_scale(double scale_) { if(scale_ >= 0.) scale = scale_;}

   virtual void set_models(Two_scale_model* low, Two_scale_model* high) {
      eft = (SM<Two_scale>*) low;
      model = (@ModelName@<Two_scale>*) high;
   }

   virtual void match_high_to_low_scale_model()
   {
      if(!model || !eft) throw SetupError("Model pointer in matching class is NULL!");

      scale = model->get_scale();
      model->calculate_DRbar_masses();
      model->solve_ewsb_one_loop();
      @ModelName@_SM_matching::matching(*eft, *model);
   }

   virtual void match_low_to_high_scale_model()
   {
      if(!model || !eft) throw SetupError("Model pointer in matching class is NULL!");

      scale = eft->get_scale();
      @ModelName@_SM_matching::matchingReverse(*model, *eft);
   }

   void match_high_to_low_scale_model_tree_level()
   {
      if(!model || !eft) throw SetupError("Model pointer in matching class is NULL!");

      scale = model->get_scale();
      @ModelName@_SM_matching::matching(*eft, *model);
   }

   void match_low_to_high_scale_model_tree_level()
   {
      if(!model || !eft) throw SetupError("Model pointer in matching class is NULL!");

      scale = eft->get_scale();
      @ModelName@_SM_matching::matchingReverseTL(*model, *eft);
   }

private:
   @ModelName@<Two_scale>* model;
   SM<Two_scale>* eft;
   double scale;
};

} // namespace flexiblesusy
#endif