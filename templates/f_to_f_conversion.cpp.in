// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_f_to_f_conversion.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */
#include <valarray>
#include <complex>
#include <iostream>

#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_cxx_diagrams.hpp"

#include "@ModelName@_f_to_f_conversion.hpp"
#include "@ModelName@_FFV_form_factors.hpp"
#include "@ModelName@_FFMassiveV_form_factors.hpp"

using namespace flexiblesusy;
using namespace cxx_diagrams;
using namespace @ModelName@_FFV_form_factors;

namespace flexiblesusy {
namespace @ModelName@_f_to_f_conversion {

struct overlap_integrals {
   double D;
   double Vp;
   double Vn;
   double Sp;
   double Sn;
};

overlap_integrals get_overlap_integrals(Nucleus N, const softsusy::QedQcd& qedqcd) {
   overlap_integrals res; 
   const auto muon_m {qedqcd.displayMass(softsusy::mMuon)};
   switch (N) {
      // Tab. 2 of hep-ph/0203110
      case Nucleus::Au:
         res.D  = 0.1670*pow(muon_m, 5./2.);
         res.Vp = 0.0859*pow(muon_m, 5./2.);
         res.Vn = 0.1080*pow(muon_m, 5./2.);
         res.Sp = 0.0523*pow(muon_m, 5./2.);
         res.Sn = 0.0610*pow(muon_m, 5./2.);
         return res;
      default:
         std::cout << "Unknown nucleus\n";
      break;
   } 
}

@FToFConversion_InterfaceDefinitions@
} // namespace @ModelName@_f_to_f_conversion
} // namespace flexiblesusy
