// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_f_to_f_conversion.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include <valarray>
#include <complex>
#include <iostream>

#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_cxx_diagrams.hpp"

#include "@ModelName@_f_to_f_conversion.hpp"
#include "@ModelName@_FFV_form_factors.hpp"
#include "@ModelName@_FFMassiveV_form_factors.hpp"

using namespace flexiblesusy;
using namespace cxx_diagrams;
using namespace @ModelName@_FFV_form_factors;
using namespace @ModelName@_FFMassiveV_form_factors;

namespace flexiblesusy {
namespace @ModelName@_f_to_f_conversion {

struct overlap_integrals {
   double D;
   double Vp;
   double Vn;
   double Sp;
   double Sn;
};

overlap_integrals get_overlap_integrals(const Nucleus N, const softsusy::QedQcd& qedqcd) {
   overlap_integrals res; 
   // get muon pole mass from input slha file
   const auto muon_pole_mass {qedqcd.displayMass(softsusy::mMuon)};
   switch (N) {
      // Tab. 2 of hep-ph/0203110
      case Nucleus::Au:
         res.D  = 0.1670*pow(muon_pole_mass, 5./2.);
         res.Vp = 0.0859*pow(muon_pole_mass, 5./2.);
         res.Vn = 0.1080*pow(muon_pole_mass, 5./2.);
         res.Sp = 0.0523*pow(muon_pole_mass, 5./2.);
         res.Sn = 0.0610*pow(muon_pole_mass, 5./2.);
         return res;
      case Nucleus::Al:
         res.D  = 0.0357*pow(muon_pole_mass, 5./2.);
         res.Vp = 0.0159*pow(muon_pole_mass, 5./2.);
         res.Vn = 0.0169*pow(muon_pole_mass, 5./2.);
         res.Sp = 0.0153*pow(muon_pole_mass, 5./2.);
         res.Sn = 0.0163*pow(muon_pole_mass, 5./2.);
         return res;
      default:
         std::cout << "Unknown nucleus\n";
      break;
   } 
}

template <class V>
std::valarray<std::complex<double>> create_massive_penguin_amp(
      int generationIndex1,  int generationIndex2, 
      const MRSSM2_mass_eigenstates& model, 
      const softsusy::QedQcd& qedqcd) {

   @ModelName@_mass_eigenstates model_ = model;
   EvaluationContext context{ model_ };

   const auto V_exchange = calculate_Fe_Fe_VZ_form_factors (generationIndex1,  generationIndex2, model);

   using FuBarFuVbarVertex = Vertex<typename Fu::lorentz_conjugate, Fu, typename V::lorentz_conjugate>;
   using FdBarFdVbarVertex = Vertex<typename Fd::lorentz_conjugate, Fd, typename V::lorentz_conjugate>;
   
   std::array<int, 4> indices {0, 0, 0, 0};
   const auto FuBarFuVbarVertexValue = FuBarFuVbarVertex::evaluate(indices, context);
   const auto FdBarFdVbarVertexValue = FdBarFdVbarVertex::evaluate(indices, context);

   const auto uVectorCurrent = 0.5*(FuBarFuVbarVertexValue.left() + FuBarFuVbarVertexValue.right());
   const auto dVectorCurrent = 0.5*(FdBarFdVbarVertexValue.left() + FdBarFdVbarVertexValue.right());

   const auto mVsqr = pow(context.mass<V>({}), 2);
   const auto GF {qedqcd.displayFermiConstant()};
   std::complex<double> guLV = -sqrt(2.0)/GF * 1./mVsqr * V_exchange[0] * uVectorCurrent;
   std::complex<double> guRV = -sqrt(2.0)/GF * 1./mVsqr * V_exchange[1] * uVectorCurrent;
   std::complex<double> gdLV = -sqrt(2.0)/GF * 1./mVsqr * V_exchange[0] * dVectorCurrent;
   std::complex<double> gdRV = -sqrt(2.0)/GF * 1./mVsqr * V_exchange[1] * dVectorCurrent;
   std::cout << "Z-triangle " << V_exchange[0] << ' ' << V_exchange[1] << '\n';
   std::cout << "GF " << GF << '\n';
   std::cout << "mZ " << context.mass<V>({}) << '\n';
   std::cout << "u vector current " << uVectorCurrent << '\n';
   std::cout << "d vector current " << dVectorCurrent << '\n';
   std::cout << "gu " << guLV << ' ' << guRV << '\n';
   std::cout << "gd " << gdLV << ' ' << gdRV << '\n';

   return {guLV, guRV, gdLV, gdRV};
}

@FToFConversion_InterfaceDefinitions@
} // namespace @ModelName@_f_to_f_conversion
} // namespace flexiblesusy
