// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_high_scale_constraint.hpp"
#include "@ModelName@_model.hpp"
#include "wrappers.hpp"
#include "logger.hpp"

#include <cassert>
#include <cmath>
#include <cerrno>
#include <cstring>

#define INPUTPARAMETER(p) inputPars.p
#define MODELPARAMETER(p) model->get_##p()
#define BETAPARAMETER(p) beta_functions.get_##p()
#define BETA(p) beta_##p

@ModelName@_high_scale_constraint::@ModelName@_high_scale_constraint(const @ModelName@_input_parameters& inputPars_)
   : Constraint<Two_scale>()
   , model(0)
   , inputPars(inputPars_)
{
@scaleGuess@
   scale = initial_scale_guess;
}

@ModelName@_high_scale_constraint::~@ModelName@_high_scale_constraint()
{
}

void @ModelName@_high_scale_constraint::apply()
{
   assert(model && "Error: @ModelName@_high_scale_constraint:"
          " model pointer must not be zero");

   update_scale();

@applyConstraint@
}

double @ModelName@_high_scale_constraint::get_scale() const
{
   return scale;
}

double @ModelName@_high_scale_constraint::get_initial_scale_guess() const
{
   return initial_scale_guess;
}

void @ModelName@_high_scale_constraint::set_model(Two_scale_model* model_)
{
   model = cast_model<@ModelName@>(model_);
}

void @ModelName@_high_scale_constraint::set_input_parameters(const @ModelName@_input_parameters& inputPars_)
{
   inputPars = inputPars_;
}

void @ModelName@_high_scale_constraint::reset()
{
   scale = initial_scale_guess;
   model = NULL;
}

void @ModelName@_high_scale_constraint::update_scale()
{
   const double currentScale = model->get_scale();
   const @ModelName@_soft_parameters beta_functions(model->calc_beta());

@calculateScale@

   if (errno == ERANGE) {
      ERROR("@ModelName@_high_scale_constraint: Overflow error during"
            " calculation of high scale: " << strerror(errno));
      scale = get_initial_scale_guess();
      errno = 0;
   }
}
