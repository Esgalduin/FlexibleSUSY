
#include "@ModelName@_initialGuesser.hpp"
#include "@ModelName@_highScaleConstraint.hpp"
#include "@ModelName@_model.hpp"
#include "lowe.h"
#include "ew_input.hpp"
#include "wrappers.hpp"

#include <cassert>

#define INPUTPARAMETER(p) input_pars.p
#define MODELPARAMETER(p) model->get_##p()
#define SM(p) Electroweak_constants::p

@ModelName@_initial_guesser::@ModelName@_initial_guesser(@ModelName@* model_, const @ModelName@_input_parameters& input_pars_)
   : Initial_guesser<Two_scale>()
   , model(model_)
   , input_pars(input_pars_)
{
   assert(model && "@ModelName@_initial_guesser: Error: pointer to model"
          " @ModelName@ must not be zero");

   low_scale_guess = 91.1876; // MZ
   high_scale_guess = @highScaleGuess@;
}

@ModelName@_initial_guesser::~@ModelName@_initial_guesser()
{
}

void @ModelName@_initial_guesser::guess()
{
   static const @ModelName@ empty;
   *model = empty;

   guess_susy_parameters();
   guess_soft_parameters();
}

void @ModelName@_initial_guesser::guess_susy_parameters()
{
   QedQcd leAtMt;
   const double sinth2 = Electroweak_constants::sinthWsq;
   const double mtpole = Electroweak_constants::PMTOP;
   const double MZDRbar = Electroweak_constants::MZ;
   const double MWDRbar = Electroweak_constants::MW;

   // guess gauge couplings at mt
   const DoubleVector a(leAtMt.getGaugeMu(mtpole, sinth2));

   model->set_@hyperchargeCoupling@(sqrt(4.0 * M_PI * a(1)));
   model->set_@leftCoupling@(sqrt(4.0 * M_PI * a(2)));
   model->set_@strongCoupling@(sqrt(4.0 * M_PI * a(3)));
   model->setMu(mtpole);
   model->setLoops(2);

@applyConstraint@

   DoubleMatrix topDRbar(3,3), bottomDRbar(3,3),  electronDRbar(3,3);
   topDRbar(1,1)      = Electroweak_constants::MUP;
   topDRbar(2,2)      = Electroweak_constants::MCHARM;
   topDRbar(3,3)      = Electroweak_constants::MTOP;
   bottomDRbar(1,1)   = Electroweak_constants::MDOWN;
   bottomDRbar(2,2)   = Electroweak_constants::MSTRANGE;
   bottomDRbar(3,3)   = Electroweak_constants::MBOTTOM;
   electronDRbar(1,1) = Electroweak_constants::MELECTRON;
   electronDRbar(2,2) = Electroweak_constants::MMUON;
   electronDRbar(3,3) = Electroweak_constants::MTAU;

@setDRbarYukawaCouplings@
}

void @ModelName@_initial_guesser::guess_soft_parameters()
{
   model->run_to(@highScaleGuess@);

   // apply high-scale constraint
   @ModelName@_high_scale_constraint high_constraint(input_pars);
   high_constraint.set_model(model);
   high_constraint.apply();

   // apply EWSB constraint
   model->runto(low_scale_guess);
   model->solve_ewsb();

   // calculate tree-level spectrum
   model->calculate_DRbar_parameters();
   model->setThresholds(3);
   model->setLoops(2);
}
