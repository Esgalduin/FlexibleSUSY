
#ifndef @ModelName@_INITIAL_GUESSER_H
#define @ModelName@_INITIAL_GUESSER_H

#include "@ModelName@_input_parameters.hpp"
#include "two_scale_initial_guesser.hpp"
#include "error.hpp"

#include <sstream>

class @ModelName@;

class @ModelName@_initial_guesser : public Initial_guesser<Two_scale> {
public:

   class NonPerturbativeRunningError : public Error {
   public:
      NonPerturbativeRunningError(@ModelName@* model_, double scale_)
         : model(model_)
         , scale(scale_)
         {}
      virtual ~NonPerturbativeRunningError() {}
      virtual std::string what() const {
         std::stringstream message;
         message << "@ModelName@_initial_guesser::NonPerturbativeRunningError:"
                    " non-perturbative running of model @ModelName@ to scale "
                 << scale;
         return message.str();
      }
   private:
      @ModelName@* model;
      double scale;
   };

   @ModelName@_initial_guesser(@ModelName@*, const @ModelName@_input_parameters&);
   virtual ~@ModelName@_initial_guesser();
   virtual void guess();

private:
   @ModelName@* model;
   @ModelName@_input_parameters input_pars;
   double low_scale_guess;
   double high_scale_guess;

   void guess_susy_parameters();
   void guess_soft_parameters();
};

#endif
