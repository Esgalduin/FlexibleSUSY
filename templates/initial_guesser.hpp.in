// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#ifndef @ModelName@_INITIAL_GUESSER_H
#define @ModelName@_INITIAL_GUESSER_H

#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_low_scale_constraint.hpp"
#include "@ModelName@_susy_scale_constraint.hpp"
#include "@ModelName@_high_scale_constraint.hpp"
#include "two_scale_initial_guesser.hpp"
#include "error.hpp"

#include <sstream>

namespace flexiblesusy {

class @ModelName@;

class @ModelName@_initial_guesser : public Initial_guesser<Two_scale> {
public:

   class NonPerturbativeRunningError : public Error {
   public:
      NonPerturbativeRunningError(@ModelName@* model_, double scale_)
         : model(model_)
         , scale(scale_)
         {}
      virtual ~NonPerturbativeRunningError() {}
      virtual std::string what() const {
         std::stringstream message;
         message << "@ModelName@_initial_guesser::NonPerturbativeRunningError:"
                    " non-perturbative running of model @ModelName@ to scale "
                 << scale;
         return message.str();
      }
   private:
      @ModelName@* model;
      double scale;
   };

   @ModelName@_initial_guesser(@ModelName@*,
                               const @ModelName@_input_parameters&,
                               const @ModelName@_low_scale_constraint&,
                               const @ModelName@_susy_scale_constraint&,
                               const @ModelName@_high_scale_constraint&);
   virtual ~@ModelName@_initial_guesser();
   virtual void guess();

private:
   @ModelName@* model;
   @ModelName@_input_parameters input_pars;
   @ModelName@_low_scale_constraint low_constraint;
   @ModelName@_susy_scale_constraint susy_constraint;
   @ModelName@_high_scale_constraint high_constraint;

   void guess_susy_parameters();
   void guess_soft_parameters();
};

}

#endif
