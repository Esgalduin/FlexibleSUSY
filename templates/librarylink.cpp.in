// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_info.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_observables.hpp"
#include "@ModelName@_physical.hpp"
#include "@ModelName@_slha_io.hpp"
#include "@ModelName@_spectrum_generator.hpp"
#include "@ModelName@_two_scale_model.hpp"
#include "@ModelName@_two_scale_model_slha.hpp"

#include "array_view.hpp"
#include "error.hpp"
#include "physical_input.hpp"
#include "slha_io.hpp"
#include "spectrum_generator_settings.hpp"
#include "lowe.h"

#include "mathlink.h"
#include "mathlink_utils.hpp"
#include "WolframLibrary.h"

#include <cmath>
#include <iostream>
#include <limits>
#include <map>
#include <sstream>
#include <string>
#include <utility>

#define INPUTPARAMETER(p) data.input.p
#define MODELPARAMETER(p) model.get_##p()
#define PHYSICALPARAMETER(p) model.get_physical().p
#define OBSERVABLE(o) observables.o

using namespace flexiblesusy;

typedef Two_scale algorithm_type;
typedef mint Handle;

class Redirect_output {
public:
   explicit Redirect_output(MLINK link_)
      : link(link_)
      , buffer()
      , old_cout(std::cout.rdbuf(buffer.rdbuf()))
      , old_cerr(std::cerr.rdbuf(buffer.rdbuf()))
      {}

   ~Redirect_output() {
      std::cout.rdbuf(old_cout);
      std::cerr.rdbuf(old_cerr);
      flush();
   }

private:
   MLINK link;               ///< redirect to this link
   std::stringstream buffer; ///< buffer caching stdout
   std::streambuf* old_cout; ///< original stdout buffer
   std::streambuf* old_cerr; ///< original stderr buffer

   void flush() {
      std::string line;
      while (std::getline(buffer, line)) {
         MLPutFunction(link, "CompoundExpression", 2);
         MLPutFunction(link, "FS@ModelName@Message", 1);
         MLPutString(link, line.c_str());
      }
   }
};

namespace flexiblesusy {
class EUnknownHandle : public Error {
public:
   explicit EUnknownHandle(Handle hid_) : hid(hid_) {}
   virtual ~EUnknownHandle() {}
   virtual std::string what() const {
      return "Unknown handle: " + ToString(hid);
   }
   Handle hid;
};

class ENotEnoughFreeHandles : public Error {
public:
   explicit ENotEnoughFreeHandles(std::size_t max_handles_)
      : max_handles(max_handles_) {}
   virtual ~ENotEnoughFreeHandles() {}
   virtual std::string what() const {
      return "Maximum number of open handles reached: "
         + ToString(max_handles) + ".  Please close some handles!";
   }
   std::size_t max_handles;
};

class EWrongNumberOfParameters : public Error {
public:
   EWrongNumberOfParameters(mint pars_, mint expected_)
      : pars(pars_), expected(expected_) {}
   virtual ~EWrongNumberOfParameters() {}
   virtual std::string what() const {
      return "Wrong number of arguments: " + ToString(pars)
         + ".  Expected: " + ToString(expected);
   }
   mint pars, expected;
};

class EInvalidSpectrum : public Error {
public:
   EInvalidSpectrum() {}
   virtual ~EInvalidSpectrum() {}
   virtual std::string what() const { return "Invalid spectrum"; }
};

} // namespace flexiblesusy

struct Model_data {
   @ModelName@_input_parameters input{};     ///< model input parameters
   Physical_input physical_input{};          ///< extra non-SLHA physical input
   softsusy::QedQcd qedqcd{};                ///< SLHA physical input
   Spectrum_generator_settings settings{};   ///< spectrum generator settings
   SLHA_io::Modsel modsel{};                 ///< MODSEL input
   @ModelName@_slha<algorithm_type> model{}; ///< running parameters and pole masses
   @ModelName@_observables observables{};    ///< observables
   @ModelName@_scales scales;                ///< scale information
};

/// current handles
typedef std::map<Handle, Model_data> Handle_map;
Handle_map handles;

/******************************************************************/

Handle get_new_handle()
{
   static const std::size_t max_handles =
      static_cast<std::size_t>(std::exp2(8*sizeof(Handle)) - 1);

   if (handles.size() >= max_handles)
      throw ENotEnoughFreeHandles(handles.size());

   Handle hid = 0;

   while (handles.find(hid) != handles.end())
      hid++;

   return hid;
}

/******************************************************************/

auto find_handle(Handle hid) -> decltype(handles.find(hid))
{
   const auto handle = handles.find(hid);

   if (handle == handles.end())
      throw EUnknownHandle(hid);

   return handle;
}

/******************************************************************/

Model_data& find_data(Handle hid)
{
   return find_handle(hid)->second;
}

/******************************************************************/

Handle get_handle_from(MLINK link)
{
   Handle hid;
   MLGet(link, &hid);

   return hid;
}

/******************************************************************/

Handle get_handle_from(MArgument arg)
{
   return MArgument_getInteger(arg);
}

/******************************************************************/

long number_of_args(MLINK link, const std::string& head)
{
   long argc;

   if (!MLCheckFunction(link, head.c_str(), &argc))
      std::cerr << "Error: argument is not a " << head << std::endl;

   return argc;
}

/******************************************************************/

bool check_number_of_args(MLINK link, long number_of_arguments,
                          const std::string& function_name)
{
   const long n_given = number_of_args(link, "List");
   const bool ok = n_given == number_of_arguments;

   if (!ok) {
      std::cerr << "Error: " << function_name << " expects "
                << ToString(number_of_arguments) << " argument ("
                << n_given << " given)." << std::endl;
   }

   return ok;
}

/******************************************************************/

void put_error_output(MLINK link)
{
   MLPutSymbol(link, "$Failed");
}

/******************************************************************/

void put_message(MLINK link,
                 const std::string& function_name,
                 const std::string& message_tag,
                 const std::string& message_str)
{
   MLPutFunction(link, "CompoundExpression", 2);
   MLPutFunction(link, "Message", 2);
   MLPutFunction(link, "MessageName", 2);
   MLPutSymbol(link, function_name.c_str());
   MLPutString(link, message_tag.c_str());
   MLPutString(link, message_str.c_str());
}

/******************************************************************/

void put_settings(const Model_data& data, MLINK link)
{
   MLPutFunction(link, "List", 23);

   MLPutRuleTo(link, data.settings.get(Spectrum_generator_settings::precision), "precisionGoal");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::max_iterations)), "maxIterations");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::calculate_sm_masses)), "calculateStandardModelMasses");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::pole_mass_loop_order)), "poleMassLoopOrder");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::ewsb_loop_order)), "ewsbLoopOrder");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::beta_loop_order)), "betaFunctionLoopOrder");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::threshold_corrections_loop_order)), "thresholdCorrectionsLoopOrder");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::higgs_2loop_correction_at_as)), "higgs2loopCorrectionAtAs");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::higgs_2loop_correction_ab_as)), "higgs2loopCorrectionAbAs");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::higgs_2loop_correction_at_at)), "higgs2loopCorrectionAtAt");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::higgs_2loop_correction_atau_atau)), "higgs2loopCorrectionAtauAtau");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::force_output)), "forceOutput");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::top_pole_qcd_corrections)), "topPoleQCDCorrections");
   MLPutRuleTo(link, data.settings.get(Spectrum_generator_settings::beta_zero_threshold), "betaZeroThreshold");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::force_positive_masses)), "forcePositiveMasses");
   MLPutRuleTo(link, data.settings.get(Spectrum_generator_settings::pole_mass_scale), "poleMassScale");
   MLPutRuleTo(link, data.settings.get(Spectrum_generator_settings::eft_pole_mass_scale), "eftPoleMassScale");
   MLPutRuleTo(link, data.settings.get(Spectrum_generator_settings::eft_matching_scale), "eftMatchingScale");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::eft_matching_loop_order_up)), "eftMatchingLoopOrderUp");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::eft_matching_loop_order_down)), "eftMatchingLoopOrderDown");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::eft_higgs_index)), "eftHiggsIndex");
   MLPutRuleTo(link, static_cast<int>(data.settings.get(Spectrum_generator_settings::calculate_bsm_masses)), "calculateBSMMasses");
   MLPutRuleTo(link, data.modsel.parameter_output_scale, "parameterOutputScale");

   MLEndPacket(link);
}

/******************************************************************/

void put_sm_input_parameters(const Model_data& data, MLINK link)
{
   MLPutFunction(link, "List", 29);

   MLPutRuleTo(link, data.qedqcd.displayAlphaEmInput(), "alphaEmMZ");
   MLPutRuleTo(link, data.qedqcd.displayFermiConstant(), "GF");
   MLPutRuleTo(link, data.qedqcd.displayAlphaSInput(), "alphaSMZ");
   MLPutRuleTo(link, data.qedqcd.displayPoleMZ(), "MZ");
   MLPutRuleTo(link, data.qedqcd.displayMbMb(), "mbmb");
   MLPutRuleTo(link, data.qedqcd.displayPoleMt(), "Mt");
   MLPutRuleTo(link, data.qedqcd.displayPoleMtau(), "Mtau");
   MLPutRuleTo(link, data.qedqcd.displayNeutrinoPoleMass(3), "Mv3");
   MLPutRuleTo(link, data.qedqcd.displayPoleMW(), "MW");
   MLPutRuleTo(link, data.qedqcd.displayPoleMel(), "Me");
   MLPutRuleTo(link, data.qedqcd.displayNeutrinoPoleMass(1), "Mv1");
   MLPutRuleTo(link, data.qedqcd.displayPoleMmuon(), "Mm");
   MLPutRuleTo(link, data.qedqcd.displayNeutrinoPoleMass(2), "Mv2");
   MLPutRuleTo(link, data.qedqcd.displayMd2GeV(), "md2GeV");
   MLPutRuleTo(link, data.qedqcd.displayMu2GeV(), "mu2GeV");
   MLPutRuleTo(link, data.qedqcd.displayMs2GeV(), "ms2GeV");
   MLPutRuleTo(link, data.qedqcd.displayMcMc(), "mcmc");

   const flexiblesusy::CKM_parameters ckm(data.qedqcd.displayCKM());
   MLPutRuleTo(link, ckm.theta_12, "CKMTheta12");
   MLPutRuleTo(link, ckm.theta_13, "CKMTheta13");
   MLPutRuleTo(link, ckm.theta_23, "CKMTheta23");
   MLPutRuleTo(link, ckm.delta   , "CKMDelta");

   const flexiblesusy::PMNS_parameters pmns(data.qedqcd.displayPMNS());
   MLPutRuleTo(link, pmns.theta_12, "PMNSTheta12");
   MLPutRuleTo(link, pmns.theta_13, "PMNSTheta13");
   MLPutRuleTo(link, pmns.theta_23, "PMNSTheta23");
   MLPutRuleTo(link, pmns.delta   , "PMNSDelta");
   MLPutRuleTo(link, pmns.alpha_1 , "PMNSAlpha1");
   MLPutRuleTo(link, pmns.alpha_2 , "PMNSAlpha2");

   MLPutRuleTo(link, data.physical_input.get(Physical_input::alpha_em_0), "alphaEm0");
   MLPutRuleTo(link, data.physical_input.get(Physical_input::mh_pole), "Mh");

   MLEndPacket(link);
}

/******************************************************************/

void put_input_parameters(const Model_data& data, MLINK link)
{
   MLPutFunction(link, "List", @numberOfInputParameterRules@);

@putInputParameters@

   MLEndPacket(link);
}

/******************************************************************/

template <typename P>
unsigned number_of_problems(const P& problems)
{
   return problems.have_tachyon()
      + problems.no_ewsb()
      + problems.no_convergence()
      + (problems.no_perturbative() || problems.have_non_perturbative_parameter())
      + problems.no_rho_convergence()
      + problems.have_thrown()
      + problems.have_failed_pole_mass_convergence();
}

/******************************************************************/

template <typename P>
unsigned number_of_warnings(const P& problems)
{
   return problems.have_bad_mass();
}

/******************************************************************/

template <typename F>
void put_masses(MLINK link, const F& flags,
                const std::vector<std::string>& heads = {})
{
   for (std::size_t i = 0; i < flags.size(); i++) {
      if (flags[i]) {
         MLPutHeads(link, heads);
         MLPutSymbol(link, @ModelName@_info::particle_names[i].c_str());
      }
   }
}

/******************************************************************/

template <typename F>
void put_masses(MLINK link, const std::string& rule, const F& flags,
                const std::vector<std::string>& heads)
{
   const auto n_masses = std::count(flags.cbegin(), flags.cend(), true);

   MLPutRule(link, rule);
   MLPutFunction(link, "List", n_masses);
   put_masses(link, flags, heads);
}

/******************************************************************/

template <typename F>
void put_masses(MLINK link, const std::string& rule,
                const F& flags1, const std::vector<std::string>& heads1,
                const F& flags2, const std::vector<std::string>& heads2)
{
   const auto n_masses = std::count(flags1.cbegin(), flags1.cend(), true)
                       + std::count(flags2.cbegin(), flags2.cend(), true);

   MLPutRule(link, rule);
   MLPutFunction(link, "List", n_masses);
   put_masses(link, flags1, heads1);
   put_masses(link, flags2, heads2);
}

/******************************************************************/

void put_problems(const Model_data& data, MLINK link)
{
   const auto& problems = data.model.get_problems();
   const auto n_problems = number_of_problems(problems);

   MLPutFunction(link, "List", n_problems);

   if (problems.have_tachyon())
      put_masses(link, "Tachyons",
                 problems.get_running_tachyons(), {"M"},
                 problems.get_pole_tachyons(), {"Pole", "M"});
   if (problems.no_ewsb())
      MLPutRuleTo(link, "True", "NoEWSB");
   if (problems.no_convergence())
      MLPutRuleTo(link, "True", "NoConvergence");
   if (problems.no_perturbative() || problems.have_non_perturbative_parameter())
      MLPutRuleTo(link, "True", "NonPerturbative");
   if (problems.no_rho_convergence())
      MLPutRuleTo(link, "True", "NoRhoConvergence");
   if (problems.have_thrown())
      MLPutRuleTo(link, "True", "Exceptions");
   if (problems.have_failed_pole_mass_convergence())
      put_masses(link, "NoPoleMassConvergence", problems.get_failed_pole_mass_convergence(), {"Pole", "M"});

   MLEndPacket(link);
}

/******************************************************************/

void put_warnings(const Model_data& data, MLINK link)
{
   const auto& problems = data.model.get_problems();
   const auto n_warnings = number_of_warnings(problems);

   MLPutFunction(link, "List", n_warnings);

   if (problems.have_bad_mass())
      put_masses(link, "ImpreciseMasses", problems.get_bad_masses(), {"M"});

   MLEndPacket(link);
}

/******************************************************************/

@ModelName@_slha_io get_slha_io(const Model_data& data)
{
   const auto& model = data.model;
   const auto& problems = data.model.get_problems();
   const auto force_output = model.do_force_output();
   @ModelName@_slha_io slha_io;

   slha_io.set_spinfo(problems);
   slha_io.set_settings(data.settings);
   slha_io.set_sminputs(data.qedqcd);
   slha_io.set_physical_input(data.physical_input);
   slha_io.set_modsel(data.modsel);
   slha_io.set_input(data.input);
   if (!problems.have_problem() || force_output) {
      slha_io.set_print_imaginary_parts_of_majorana_mixings(
         data.settings.get(Spectrum_generator_settings::force_positive_masses));
      slha_io.set_spectrum(model);
      slha_io.set_extra(model, data.scales, data.observables);
   }

   return slha_io;
}

/******************************************************************/

void put_slha(const Model_data& data, MLINK link)
{
   const auto slha_io = get_slha_io(data);
   std::ostringstream ostr;

   slha_io.write_to_stream(ostr);

   MLPutString(link, ostr.str().c_str());
   MLEndPacket(link);
}

/******************************************************************/

void put_spectrum(const @ModelName@_slha<algorithm_type>& model, MLINK link)
{
   MLPutFunction(link, "List", @numberOfSpectrumEntries@);

@putSpectrum@

   MLEndPacket(link);
}

/******************************************************************/

void put_observables(const @ModelName@_observables& observables, MLINK link)
{
   MLPutFunction(link, "List", @numberOfObservables@);

@putObservables@

   MLEndPacket(link);
}

/******************************************************************/

void check_spectrum(const Model_data& data, MLINK link)
{
   const auto& problems = data.model.get_problems();

   for (const auto& s: problems.get_problem_strings())
      put_message(link, "FS@ModelName@CalculateSpectrum", "error", s);

   for (const auto& s: problems.get_warning_strings())
      put_message(link, "FS@ModelName@CalculateSpectrum", "warning", s);

   if (problems.have_problem() &&
       !data.settings.get(Spectrum_generator_settings::force_output))
      throw EInvalidSpectrum();
}

/******************************************************************/

void calculate_spectrum(Model_data& data, MLINK link)
{
   @ModelName@_spectrum_generator<algorithm_type> spectrum_generator;
   spectrum_generator.set_settings(data.settings);
   spectrum_generator.set_parameter_output_scale(data.modsel.parameter_output_scale);
   spectrum_generator.run(data.qedqcd, data.input);

   data.model = @ModelName@_slha<algorithm_type>(
      spectrum_generator.get_model(),
      data.settings.get(Spectrum_generator_settings::force_positive_masses) == 0.);

   data.scales.HighScale = spectrum_generator.get_high_scale();
   data.scales.SUSYScale = spectrum_generator.get_susy_scale();
   data.scales.LowScale  = spectrum_generator.get_low_scale();
}

/******************************************************************/

template <typename Element_t>
Model_data fill(const Dynamic_array_view<Element_t>& pars)
{
   using Index_t = typename Dynamic_array_view<Element_t>::Index_t;

   const Index_t n_settings = 23, n_sm_parameters = 29, n_input_pars = @numberOfInputParameters@;
   const Index_t n_total = n_settings + n_sm_parameters + n_input_pars;

   if (pars.size() != n_total)
      throw EWrongNumberOfParameters(pars.size(), n_total);

   Model_data data;
   Index_t c = 0; // counter

   data.settings.set(Spectrum_generator_settings::precision, pars[c++]);
   data.settings.set(Spectrum_generator_settings::max_iterations, pars[c++]);
   data.settings.set(Spectrum_generator_settings::calculate_sm_masses, pars[c++]);
   data.settings.set(Spectrum_generator_settings::pole_mass_loop_order, pars[c++]);
   data.settings.set(Spectrum_generator_settings::ewsb_loop_order, pars[c++]);
   data.settings.set(Spectrum_generator_settings::beta_loop_order, pars[c++]);
   data.settings.set(Spectrum_generator_settings::threshold_corrections_loop_order, pars[c++]);
   data.settings.set(Spectrum_generator_settings::higgs_2loop_correction_at_as, pars[c++]);
   data.settings.set(Spectrum_generator_settings::higgs_2loop_correction_ab_as, pars[c++]);
   data.settings.set(Spectrum_generator_settings::higgs_2loop_correction_at_at, pars[c++]);
   data.settings.set(Spectrum_generator_settings::higgs_2loop_correction_atau_atau, pars[c++]);
   data.settings.set(Spectrum_generator_settings::force_output, pars[c++]);
   data.settings.set(Spectrum_generator_settings::top_pole_qcd_corrections, pars[c++]);
   data.settings.set(Spectrum_generator_settings::beta_zero_threshold, pars[c++]);
   data.settings.set(Spectrum_generator_settings::force_positive_masses, pars[c++]);
   data.settings.set(Spectrum_generator_settings::pole_mass_scale, pars[c++]);
   data.settings.set(Spectrum_generator_settings::eft_pole_mass_scale, pars[c++]);
   data.settings.set(Spectrum_generator_settings::eft_matching_scale, pars[c++]);
   data.settings.set(Spectrum_generator_settings::eft_matching_loop_order_up, pars[c++]);
   data.settings.set(Spectrum_generator_settings::eft_matching_loop_order_down, pars[c++]);
   data.settings.set(Spectrum_generator_settings::eft_higgs_index, pars[c++]);
   data.settings.set(Spectrum_generator_settings::calculate_bsm_masses, pars[c++]);
   data.modsel.parameter_output_scale = pars[c++];

   data.qedqcd.setAlpha(softsusy::ALPHA, pars[c]);
   data.qedqcd.setAlphaEmInput(pars[c++]);
   data.qedqcd.setFermiConstant(pars[c++]);
   data.qedqcd.setAlpha(softsusy::ALPHAS, pars[c]);
   data.qedqcd.setAlphaSInput(pars[c++]);
   data.qedqcd.setPoleMZ(pars[c]);
   data.qedqcd.setMu(pars[c++]);
   data.qedqcd.setMass(softsusy::mBottom, pars[c]);
   data.qedqcd.setMbMb(pars[c++]);
   data.qedqcd.setPoleMt(pars[c++]);
   data.qedqcd.setMass(softsusy::mTau, pars[c]);
   data.qedqcd.setPoleMtau(pars[c++]);
   data.qedqcd.setNeutrinoPoleMass(3, pars[c++]);
   data.qedqcd.setPoleMW(pars[c++]);
   data.qedqcd.setMass(softsusy::mElectron, pars[c]);
   data.qedqcd.setPoleMel(pars[c++]);
   data.qedqcd.setNeutrinoPoleMass(1, pars[c++]);
   data.qedqcd.setMass(softsusy::mMuon, pars[c]);
   data.qedqcd.setPoleMmuon(pars[c++]);
   data.qedqcd.setNeutrinoPoleMass(2, pars[c++]);
   data.qedqcd.setMass(softsusy::mDown, pars[c]);
   data.qedqcd.setMd2GeV(pars[c++]);
   data.qedqcd.setMass(softsusy::mUp, pars[c]);
   data.qedqcd.setMu2GeV(pars[c++]);
   data.qedqcd.setMass(softsusy::mStrange, pars[c]);
   data.qedqcd.setMs2GeV(pars[c++]);
   data.qedqcd.setMass(softsusy::mCharm, pars[c]);
   data.qedqcd.setMcMc(pars[c++]);

   {
      flexiblesusy::CKM_parameters ckm;
      ckm.theta_12 = pars[c++];
      ckm.theta_13 = pars[c++];
      ckm.theta_23 = pars[c++];
      ckm.delta    = pars[c++];
      data.qedqcd.setCKM(ckm);
   }

   {
      flexiblesusy::PMNS_parameters pmns;
      pmns.theta_12 = pars[c++];
      pmns.theta_13 = pars[c++];
      pmns.theta_23 = pars[c++];
      pmns.delta    = pars[c++];
      pmns.alpha_1  = pars[c++];
      pmns.alpha_2  = pars[c++];
      data.qedqcd.setPMNS(pmns);
   }

   data.physical_input.set(Physical_input::alpha_em_0, pars[c++]);
   data.physical_input.set(Physical_input::mh_pole, pars[c++]);

@setInputParameters@

   return data;
}

extern "C" {

/******************************************************************/

DLLEXPORT mint WolframLibrary_getVersion()
{
   return WolframLibraryVersion;
}

/******************************************************************/

DLLEXPORT int WolframLibrary_initialize(WolframLibraryData /* libData */)
{
   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@GetSettings(WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@GetSettings"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      put_settings(find_data(hid), link);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@GetSMInputParameters(WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@GetSMInputParameters"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      put_sm_input_parameters(find_data(hid), link);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@GetInputParameters(WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@GetInputParameters"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      put_input_parameters(find_data(hid), link);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@OpenHandle(
   WolframLibraryData libData, mint Argc, MArgument* Args, MArgument Res)
{
   if (Argc != 1)
      return LIBRARY_TYPE_ERROR;

   MTensor pars = MArgument_getMTensor(Args[0]);

   if (libData->MTensor_getType(pars) != MType_Real ||
       libData->MTensor_getRank(pars) != 1)
      return LIBRARY_TYPE_ERROR;

   try {
      auto data = fill(make_dynamic_array_view(
                          libData->MTensor_getRealData(pars),
                          libData->MTensor_getDimensions(pars)[0]));

      const auto hid = get_new_handle();

      handles.insert(std::make_pair(hid, std::move(data)));

      MArgument_setInteger(Res, hid);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      return LIBRARY_FUNCTION_ERROR;
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@CloseHandle(
   WolframLibraryData /* libData */, mint Argc, MArgument* Args, MArgument /* Res */)
{
   if (Argc != 1)
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(Args[0]);
   const auto handle = handles.find(hid);

   if (handle != handles.end())
      handles.erase(handle);

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@Set(
   WolframLibraryData libData, mint Argc, MArgument* Args, MArgument /* Res */)
{
   if (Argc != 2)
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(Args[0]);
   MTensor pars = MArgument_getMTensor(Args[1]);

   if (libData->MTensor_getType(pars) != MType_Real ||
       libData->MTensor_getRank(pars) != 1)
      return LIBRARY_TYPE_ERROR;

   try {
      find_data(hid) = fill(make_dynamic_array_view(
                               libData->MTensor_getRealData(pars),
                               libData->MTensor_getDimensions(pars)[0]));
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      return LIBRARY_FUNCTION_ERROR;
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@GetProblems(
   WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@GetProblems"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      put_problems(find_data(hid), link);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@ToSLHA(WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@ToSLHA"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      put_slha(find_data(hid), link);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@GetWarnings(
   WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@GetWarnings"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      put_warnings(find_data(hid), link);
   } catch (const flexiblesusy::Error& e) {
      std::cerr << e.what() << std::endl;
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@CalculateSpectrum(
   WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@CalculateSpectrum"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      auto data = find_data(hid);

      {
         Redirect_output crd(link);
         calculate_spectrum(data, link);
      }

      handles[hid] = data;

      check_spectrum(data, link);
      put_spectrum(data.model, link);
   } catch (const flexiblesusy::Error&) {
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

/******************************************************************/

DLLEXPORT int FS@ModelName@CalculateObservables(
   WolframLibraryData /* libData */, MLINK link)
{
   if (!check_number_of_args(link, 1, "FS@ModelName@CalculateObservables"))
      return LIBRARY_TYPE_ERROR;

   const auto hid = get_handle_from(link);

   try {
      auto data = find_data(hid);

      if (data.model.get_scale() == 0.) {
         put_message(link,
            "FS@ModelName@CalculateObservables", "warning",
            "Renormalization scale is 0.  Did you run "
            "FS@ModelName@CalculateSpectrum[]?");
      }

      {
         Redirect_output crd(link);
         data.observables =
            calculate_observables(data.model, data.qedqcd, data.physical_input);
      }

      handles[hid] = data;

      put_observables(data.observables, link);
   } catch (const flexiblesusy::Error& e) {
      put_message(link, "FS@ModelName@CalculateObservables", "error", e.what());
      put_error_output(link);
   }

   return LIBRARY_NO_ERROR;
}

} // extern "C"
