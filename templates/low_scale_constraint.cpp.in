// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_low_scale_constraint.hpp"
#include "@ModelName@_model.hpp"
#include "wrappers.hpp"
#include "logger.hpp"
#include "ew_input.hpp"

#include <cassert>
#include <cmath>

#define INPUTPARAMETER(p) inputPars.p
#define MODELPARAMETER(p) model->get_##p()
#define BETAPARAMETER(p) beta_functions.get_##p()
#define BETA(p) beta_##p
#define SM(p) Electroweak_constants::p

@ModelName@_low_scale_constraint::@ModelName@_low_scale_constraint(const @ModelName@_input_parameters& inputPars_)
   : Constraint<Two_scale>()
   , model(0)
   , inputPars(inputPars_)
{
@scaleGuess@
}

@ModelName@_low_scale_constraint::~@ModelName@_low_scale_constraint()
{
}

void @ModelName@_low_scale_constraint::apply()
{
   assert(model && "Error: @ModelName@_low_scale_constraint:"
          " model pointer must not be zero");

   model->solve_ewsb(0);
   model->calculate_DRbar_parameters();
   update_scale();
   calculate_DRbar_gauge_couplings();
   calculate_DRbar_yukawa_couplings();

   const double MZDRbar
      = model->calculate_M@VectorZ@_DRbar_1loop(Electroweak_constants::MZ);
   const double MWDRbar
      = model->calculate_M@VectorW@_DRbar_1loop(Electroweak_constants::MW);

@applyConstraint@
}

double @ModelName@_low_scale_constraint::get_scale() const
{
   return scale;
}

void @ModelName@_low_scale_constraint::set_model(Two_scale_model* model_)
{
   model = cast_model<@ModelName@>(model_);
}

void @ModelName@_low_scale_constraint::update_scale()
{
@calculateScale@
}

void @ModelName@_low_scale_constraint::calculate_DRbar_gauge_couplings()
{
   const double currentScale = model->get_scale();
   const double MZ = Electroweak_constants::MZ;
   const double MW = Electroweak_constants::MW;
   const double MZ2 = Sqr(MZ);
   const double MW2 = Sqr(MW);
   const double cW2 = MW2/MZ2;
   const double sW2 = 1.0 - cW2;
   const double sW  = Sqrt(sW2);

   const double self_energy_Z = Re(model->self_energy_@VectorZ@_heavy(MZ));
   const double self_energy_W = Re(model->self_energy_@VectorW@_heavy(MW));
   const double delta_sW2 = - cW2 * (self_energy_W / MW2 - self_energy_Z / MZ2);
   const double delta_sW  = 0.5 * delta_sW2 / sW;
   double sinThetaW_drbar = SM(sinThetaW) + delta_sW;

   if (Abs(sinThetaW_drbar) >= 0.99) {
#ifdef VERBOSE
      WARNING("@ModelName@_low_scale_constraint: loop corrections to"
              " sinThetaW are non-perturbative, resetting sinThetaW to"
              " the Standard Model value");
#endif
      sinThetaW_drbar = SM(sinThetaW);
   }

@setDRbarGaugeCouplings@
}

void @ModelName@_low_scale_constraint::calculate_DRbar_yukawa_couplings()
{
   Eigen::Matrix<double,3,3> topDRbar(Eigen::Matrix<double,3,3>::Zero()),
      bottomDRbar(Eigen::Matrix<double,3,3>::Zero()),
      electronDRbar(Eigen::Matrix<double,3,3>::Zero());
   topDRbar(0,0)      = model->calculate_M@TopQuark@_DRbar_1loop(Electroweak_constants::MUP, 1);
   topDRbar(1,1)      = model->calculate_M@TopQuark@_DRbar_1loop(Electroweak_constants::MCHARM, 2);
   topDRbar(2,2)      = model->calculate_M@TopQuark@_DRbar_1loop(Electroweak_constants::PMTOP, 3);
   bottomDRbar(0,0)   = model->calculate_M@BottomQuark@_DRbar_1loop(Electroweak_constants::MDOWN, 1);
   bottomDRbar(1,1)   = model->calculate_M@BottomQuark@_DRbar_1loop(Electroweak_constants::MSTRANGE, 2);
   bottomDRbar(2,2)   = model->calculate_M@BottomQuark@_DRbar_1loop(Electroweak_constants::MBOTTOM, 3);
   electronDRbar(0,0) = model->calculate_M@Electron@_DRbar_1loop(Electroweak_constants::MELECTRON, 1);
   electronDRbar(1,1) = model->calculate_M@Electron@_DRbar_1loop(Electroweak_constants::MMUON, 2);
   electronDRbar(2,2) = model->calculate_M@Electron@_DRbar_1loop(Electroweak_constants::MTAU, 3);

@setDRbarYukawaCouplings@
}
