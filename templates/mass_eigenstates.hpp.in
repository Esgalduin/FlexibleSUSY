// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_mass_eigenstates.hpp
 *
 * @brief contains class for model with routines needed to solve boundary
 *        value problem using the two_scale solver by solving EWSB
 *        and determine the pole masses and mixings
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_MASS_EIGENSTATES_H
#define @ModelName@_MASS_EIGENSTATES_H

#include "@ModelName@_soft_parameters.hpp"
#include "@ModelName@_physical.hpp"
#include "@ModelName@_info.hpp"
#include "two_loop_corrections.hpp"
#include "error.hpp"
#include "lrs_tensor.hpp"
#include "problems.hpp"
#include "config.h"

#include <iosfwd>
#include <string>

#include <Eigen/Core>

namespace flexiblesusy {

class EWSB_solver;
/**
 * @class @ModelName@_mass_eigenstates
 * @brief model class with routines for determing masses and mixinga and EWSB
 */
class @ModelName@_mass_eigenstates : public @ModelName@_soft_parameters {
public:
   explicit @ModelName@_mass_eigenstates(const @ModelName@_input_parameters& input_ = @ModelName@_input_parameters());
   @ModelName@_mass_eigenstates(const @ModelName@_mass_eigenstates&) = default;
   @ModelName@_mass_eigenstates(@ModelName@_mass_eigenstates&&) = default;
   virtual ~@ModelName@_mass_eigenstates() = default;
   @ModelName@_mass_eigenstates& operator=(const @ModelName@_mass_eigenstates&) = default;
   @ModelName@_mass_eigenstates& operator=(@ModelName@_mass_eigenstates&&) = default;

   /// number of EWSB equations
   static const int number_of_ewsb_equations = @numberOfEWSBEquations@;

   void calculate_DRbar_masses();
   void calculate_pole_masses();
   void check_pole_masses_for_tachyons();
   virtual void clear() override;
   void clear_DRbar_parameters();
   Eigen::ArrayXd get_DRbar_masses() const;
   void do_calculate_sm_pole_masses(bool);
   bool do_calculate_sm_pole_masses() const;
   void do_calculate_bsm_pole_masses(bool);
   bool do_calculate_bsm_pole_masses() const;
   void do_force_output(bool);
   bool do_force_output() const;
   void reorder_DRbar_masses();
   void reorder_pole_masses();
   void set_ewsb_iteration_precision(double);
   void set_ewsb_loop_order(int);
   void set_two_loop_corrections(const Two_loop_corrections&);
   const Two_loop_corrections& get_two_loop_corrections() const;
   void set_DRbar_masses(const Eigen::ArrayXd&);
   void set_pole_mass_loop_order(int);
   int get_pole_mass_loop_order() const;
   void set_physical(const @ModelName@_physical&);
   double get_ewsb_iteration_precision() const;
   double get_ewsb_loop_order() const;
   const @ModelName@_physical& get_physical() const;
   @ModelName@_physical& get_physical();
   const Problems<@ModelName@_info::NUMBER_OF_PARTICLES, @ModelName@_info::NUMBER_OF_PARAMETERS>& get_problems() const;
   Problems<@ModelName@_info::NUMBER_OF_PARTICLES, @ModelName@_info::NUMBER_OF_PARAMETERS>& get_problems();
   int solve_ewsb_tree_level();
   int solve_ewsb_one_loop();
   int solve_ewsb();            ///< solve EWSB at ewsb_loop_order level

   void calculate_spectrum();
   void clear_problems();
   std::string name() const;
   void run_to(double scale, double eps = -1.0);
   void print(std::ostream& out = std::cout) const;
   void set_precision(double);
   double get_precision() const;

@lspGetters@
@massGetters@
@higgsMassGetterPrototypes@
@mixingMatrixGetters@
@phasesGetterSetters@
@extraParameterSetters@
@extraParameterGetters@
@massCalculationPrototypes@
@tadpoleEqPrototypes@
@selfEnergyPrototypes@

   using EWSB_vector_t = Eigen::Matrix<double,number_of_ewsb_equations,1>;

   /// calculates the tadpoles at current loop order
   void tadpole_equations(double[number_of_ewsb_equations]) const;
   /// calculates the tadpoles at current loop order
   EWSB_vector_t tadpole_equations() const;
   /// calculates the tadpoles divided by VEVs at current loop order
   EWSB_vector_t tadpole_equations_over_vevs() const;

@thirdGenerationHelperPrototypes@
@twoLoopSelfEnergyPrototypes@
@twoLoopTadpolePrototypes@
@threeLoopSelfEnergyPrototypes@
@loopMassesPrototypes@
@runningDRbarMassesPrototypes@
@dependencePrototypes@

private:
   class EEWSBStepFailed : public Error {
   public:
      virtual ~EEWSBStepFailed() = default;
      virtual std::string what() const override { return "Could not perform EWSB step."; }
   };

   int ewsb_loop_order;      ///< loop order for EWSB
   int pole_mass_loop_order; ///< loop order for pole masses
   bool calculate_sm_pole_masses; ///< switch to calculate the pole masses of the Standard Model particles
   bool calculate_bsm_pole_masses;///< switch to calculate the pole masses of the BSM particles
   bool force_output;             ///< switch to force output of pole masses
   double precision;              ///< RG running precision
   double ewsb_iteration_precision; ///< precision goal of EWSB solution
   @ModelName@_physical physical; ///< contains the pole masses and mixings
   Problems<@ModelName@_info::NUMBER_OF_PARTICLES, @ModelName@_info::NUMBER_OF_PARAMETERS> problems; ///< problems
   Two_loop_corrections two_loop_corrections; ///< used 2-loop corrections

   int get_number_of_ewsb_iterations() const;
   int get_number_of_mass_iterations() const;
   void set_ewsb_solution(const EWSB_solver*);
   template <typename It> void set_best_ewsb_solution(It, It);
   int solve_ewsb_iteratively();
   int solve_ewsb_iteratively(int);
   int solve_ewsb_iteratively_with(EWSB_solver*, const EWSB_vector_t&);
   int solve_ewsb_tree_level_custom();
   EWSB_vector_t ewsb_initial_guess();
   EWSB_vector_t ewsb_step() const;
   void copy_DRbar_masses_to_pole_masses();

   // Passarino-Veltman loop functions
   double A0(double) const;
   double B0(double, double, double) const;
   double B1(double, double, double) const;
   double B00(double, double, double) const;
   double B22(double, double, double) const;
   double H0(double, double, double) const;
   double F0(double, double, double) const;
   double G0(double, double, double) const;

   // DR-bar masses
@physicalMassesDef@
   // DR-bar mixing matrices
@mixingMatricesDef@
   // phases
@phasesDefinition@
   // extra parameters
@extraParameterDefs@
};

std::ostream& operator<<(std::ostream&, const @ModelName@_mass_eigenstates&);

} // namespace flexiblesusy

#endif
