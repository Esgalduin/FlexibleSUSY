// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

#ifndef @ModelName@_H
#define @ModelName@_H

#include "@ModelName@_softPars.hpp"
#include "@ModelName@_physical.hpp"

#include <iosfwd>

#include <gsl/gsl_vector.h>
#include <gsl/gsl_multiroots.h>

class @ModelName@ : public @ModelName@_soft_parameters {
public:
   @ModelName@();
   virtual ~@ModelName@();

   void calculate_DRbar_parameters();
   void calculate_1loop_masses();
   void set_number_of_ewsb_iterations(std::size_t);
   void set_ewsb_loop_order(unsigned);
   void set_ewsb_iteration_precision(double);
   unsigned get_ewsb_loop_order() const;
   double get_ewsb_iteration_precision() const;
   const @ModelName@_physical& get_physical() const;
   double getScale() const { return displayMu(); }
   int solve_ewsb();
   int solve_ewsb_with(const gsl_multiroot_fsolver_type*, const double*);
   void ewsb_initial_guess(double*);
   virtual void print(std::ostream&) const;
   void print_state(std::size_t, gsl_multiroot_fsolver*) const;

@massGetters@
@mixingMatrixGetters@
@phasesGetterSetters@
@massCalculationPrototypes@
@tadpoleEqPrototypes@
@selfEnergyPrototypes@
@loopMassesPrototypes@
@runningDRbarMassesPrototypes@
@dependenceNumPrototypes@

private:
   std::size_t number_of_ewsb_iterations;
   std::size_t number_of_mass_iterations;
   unsigned ewsb_loop_order;
   double ewsb_iteration_precision;
   double mass_iteration_precision;
   static const std::size_t numberOfEWSBEquations = @numberOfEWSBEquations@;
   @ModelName@_physical physical;

   double A0(double) const;
   Complex B0(double, double, double) const;
   Complex B1(double, double, double) const;
   Complex B00(double, double, double) const;
   Complex B22(double, double, double) const;
   Complex H0(double, double, double) const;
   Complex F0(double, double, double) const;
   Complex G0(double, double, double) const;

@physicalMassesDef@
@mixingMatricesDef@
@phasesDefinition@

};

int tadpole_equations(const gsl_vector*, void*, gsl_vector*);

#endif
