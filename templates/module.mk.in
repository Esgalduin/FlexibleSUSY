DIR          := @DIR@
MODNAME      := @CLASSNAME@
SARAH_MODEL  := @MODEL@

@CLASSNAME@_INSTALL_DIR := $(INSTALL_DIR)/$(DIR)

@CLASSNAME@_MK     := \
		$(DIR)/module.mk

@CLASSNAME@_TWO_SCALE_SUSY_MK := \
		$(DIR)/two_scale_susy.mk

@CLASSNAME@_TWO_SCALE_SOFT_MK := \
		$(DIR)/two_scale_soft.mk

@CLASSNAME@_TWO_SCALE_MK := \
		$(@CLASSNAME@_TWO_SCALE_SUSY_MK) \
		$(@CLASSNAME@_TWO_SCALE_SOFT_MK)

@CLASSNAME@_SLHA_INPUT := \
		$(DIR)/LesHouches.in.@CLASSNAME@_generated \
@SLHA_INPUT@

@CLASSNAME@_GNUPLOT := \
		$(DIR)/@CLASSNAME@_plot_rgflow.gnuplot \
		$(DIR)/@CLASSNAME@_plot_spectrum.gnuplot

@CLASSNAME@_TARBALL := \
		$(MODNAME).tar.gz

LIB@CLASSNAME@_SRC :=
EXE@CLASSNAME@_SRC :=

LIB@CLASSNAME@_HDR :=

ifneq ($(findstring two_scale,$(ALGORITHMS)),)
LIB@CLASSNAME@_SRC += \
		$(DIR)/@CLASSNAME@_effective_couplings.cpp \
		$(DIR)/@CLASSNAME@_mass_eigenstates.cpp \
		$(DIR)/@CLASSNAME@_info.cpp \
		$(DIR)/@CLASSNAME@_input_parameters.cpp \
		$(DIR)/@CLASSNAME@_observables.cpp \
		$(DIR)/@CLASSNAME@_slha_io.cpp \
		$(DIR)/@CLASSNAME@_physical.cpp \
		$(DIR)/@CLASSNAME@_utilities.cpp \
		$(DIR)/@CLASSNAME@_standard_model_matching.cpp \
		$(DIR)/@CLASSNAME@_standard_model_two_scale_initial_guesser.cpp \
		$(DIR)/@CLASSNAME@_standard_model_two_scale_matching.cpp \
		$(DIR)/@CLASSNAME@_two_scale_convergence_tester.cpp \
		$(DIR)/@CLASSNAME@_two_scale_high_scale_constraint.cpp \
		$(DIR)/@CLASSNAME@_two_scale_initial_guesser.cpp \
		$(DIR)/@CLASSNAME@_two_scale_low_scale_constraint.cpp \
		$(DIR)/@CLASSNAME@_two_scale_model.cpp \
		$(DIR)/@CLASSNAME@_two_scale_model_slha.cpp \
		$(DIR)/@CLASSNAME@_two_scale_susy_parameters.cpp \
		$(DIR)/@CLASSNAME@_two_scale_soft_parameters.cpp \
		$(DIR)/@CLASSNAME@_two_scale_susy_scale_constraint.cpp
EXE@CLASSNAME@_SRC += \
		$(DIR)/run_@CLASSNAME@.cpp \
		$(DIR)/run_cmd_line_@CLASSNAME@.cpp \
		$(DIR)/scan_@CLASSNAME@.cpp
LIB@CLASSNAME@_HDR += \
		$(DIR)/@CLASSNAME@_convergence_tester.hpp \
		$(DIR)/@CLASSNAME@_effective_couplings.hpp \
		$(DIR)/@CLASSNAME@_high_scale_constraint.hpp \
		$(DIR)/@CLASSNAME@_mass_eigenstates.hpp \
		$(DIR)/@CLASSNAME@_info.hpp \
		$(DIR)/@CLASSNAME@_initial_guesser.hpp \
		$(DIR)/@CLASSNAME@_input_parameters.hpp \
		$(DIR)/@CLASSNAME@_low_scale_constraint.hpp \
		$(DIR)/@CLASSNAME@_model.hpp \
		$(DIR)/@CLASSNAME@_model_slha.hpp \
		$(DIR)/@CLASSNAME@_observables.hpp \
		$(DIR)/@CLASSNAME@_physical.hpp \
		$(DIR)/@CLASSNAME@_slha_io.hpp \
		$(DIR)/@CLASSNAME@_standard_model_matching.hpp \
		$(DIR)/@CLASSNAME@_standard_model_two_scale_initial_guesser.hpp \
		$(DIR)/@CLASSNAME@_spectrum_generator_interface.hpp \
		$(DIR)/@CLASSNAME@_standard_model_spectrum_generator.hpp \
		$(DIR)/@CLASSNAME@_standard_model_two_scale_matching.hpp \
		$(DIR)/@CLASSNAME@_spectrum_generator.hpp \
		$(DIR)/@CLASSNAME@_susy_scale_constraint.hpp \
		$(DIR)/@CLASSNAME@_utilities.hpp \
		$(DIR)/@CLASSNAME@_two_scale_convergence_tester.hpp \
		$(DIR)/@CLASSNAME@_two_scale_high_scale_constraint.hpp \
		$(DIR)/@CLASSNAME@_two_scale_initial_guesser.hpp \
		$(DIR)/@CLASSNAME@_two_scale_low_scale_constraint.hpp \
		$(DIR)/@CLASSNAME@_two_scale_model.hpp \
		$(DIR)/@CLASSNAME@_two_scale_model_slha.hpp \
		$(DIR)/@CLASSNAME@_two_scale_soft_parameters.hpp \
		$(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp \
		$(DIR)/@CLASSNAME@_two_scale_susy_scale_constraint.hpp

ifneq ($(MAKECMDGOALS),showbuild)
ifneq ($(MAKECMDGOALS),tag)
ifneq ($(MAKECMDGOALS),release)
ifneq ($(MAKECMDGOALS),doc)
-include $(@CLASSNAME@_TWO_SCALE_SUSY_MK)
-include $(@CLASSNAME@_TWO_SCALE_SOFT_MK)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),pack-$(MODNAME)-src)
ifeq ($(findstring clean-,$(MAKECMDGOALS)),)
ifeq ($(findstring distclean-,$(MAKECMDGOALS)),)
ifeq ($(findstring doc-,$(MAKECMDGOALS)),)
$(@CLASSNAME@_TWO_SCALE_SUSY_MK): run-metacode-$(MODNAME)
		@$(CONVERT_DOS_PATHS) $@
$(@CLASSNAME@_TWO_SCALE_SOFT_MK): run-metacode-$(MODNAME)
		@$(CONVERT_DOS_PATHS) $@
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif

endif

# remove duplicates in case all algorithms are used
LIB@CLASSNAME@_SRC := $(sort $(LIB@CLASSNAME@_SRC))
EXE@CLASSNAME@_SRC := $(sort $(EXE@CLASSNAME@_SRC))

LIB@CLASSNAME@_OBJ := \
		$(patsubst %.cpp, %.o, $(filter %.cpp, $(LIB@CLASSNAME@_SRC))) \
		$(patsubst %.f, %.o, $(filter %.f, $(LIB@CLASSNAME@_SRC)))

EXE@CLASSNAME@_OBJ := \
		$(patsubst %.cpp, %.o, $(filter %.cpp, $(EXE@CLASSNAME@_SRC))) \
		$(patsubst %.f, %.o, $(filter %.f, $(EXE@CLASSNAME@_SRC)))

EXE@CLASSNAME@_EXE := \
		$(patsubst %.cpp, %.x, $(filter %.cpp, $(EXE@CLASSNAME@_SRC))) \
		$(patsubst %.f, %.x, $(filter %.f, $(EXE@CLASSNAME@_SRC)))

LIB@CLASSNAME@_DEP := \
		$(LIB@CLASSNAME@_OBJ:.o=.d)

EXE@CLASSNAME@_DEP := \
		$(EXE@CLASSNAME@_OBJ:.o=.d)

LIB@CLASSNAME@     := $(DIR)/lib$(MODNAME)$(LIBEXT)


ifeq ($(MODNAME),SM)
LIBEFT             :=
else
LIBEFT             := $(LIBSM)
endif

METACODE_STAMP_@CLASSNAME@ := $(DIR)/00_DELETE_ME_TO_RERUN_METACODE

ifeq ($(ENABLE_META),yes)
SARAH_MODEL_FILES_@CLASSNAME@ := \
		$(shell $(SARAH_DEP_GEN) $(SARAH_MODEL))
endif

.PHONY:         all-$(MODNAME) clean-$(MODNAME) clean-$(MODNAME)-src \
		clean-$(MODNAME)-dep clean-$(MODNAME)-lib \
		clean-$(MODNAME)-obj distclean-$(MODNAME) \
		run-metacode-$(MODNAME) pack-$(MODNAME)-src

all-$(MODNAME): $(LIB@CLASSNAME@) $(EXE@CLASSNAME@_EXE)
		@true

ifneq ($(INSTALL_DIR),)
install-src::
		install -d $(@CLASSNAME@_INSTALL_DIR)
		install -m u=rw,g=r,o=r $(LIB@CLASSNAME@_SRC) $(@CLASSNAME@_INSTALL_DIR)
		install -m u=rw,g=r,o=r $(LIB@CLASSNAME@_HDR) $(@CLASSNAME@_INSTALL_DIR)
		install -m u=rw,g=r,o=r $(EXE@CLASSNAME@_SRC) $(@CLASSNAME@_INSTALL_DIR)
		$(INSTALL_STRIPPED) $(@CLASSNAME@_MK) $(@CLASSNAME@_INSTALL_DIR) -m u=rw,g=r,o=r
		install -m u=rw,g=r,o=r $(@CLASSNAME@_TWO_SCALE_MK) $(@CLASSNAME@_INSTALL_DIR)
ifneq ($(@CLASSNAME@_SLHA_INPUT),)
		install -m u=rw,g=r,o=r $(@CLASSNAME@_SLHA_INPUT) $(@CLASSNAME@_INSTALL_DIR)
endif
		install -m u=rw,g=r,o=r $(@CLASSNAME@_GNUPLOT) $(@CLASSNAME@_INSTALL_DIR)
endif

clean-$(MODNAME)-dep:
		-rm -f $(LIB@CLASSNAME@_DEP)
		-rm -f $(EXE@CLASSNAME@_DEP)

clean-$(MODNAME)-lib:
		-rm -f $(LIB@CLASSNAME@)

clean-$(MODNAME)-obj:
		-rm -f $(LIB@CLASSNAME@_OBJ)
		-rm -f $(EXE@CLASSNAME@_OBJ)

# BEGIN: NOT EXPORTED ##########################################
clean-$(MODNAME)-src:
		-rm -f $(LIB@CLASSNAME@_SRC)
		-rm -f $(LIB@CLASSNAME@_HDR)
		-rm -f $(EXE@CLASSNAME@_SRC)
		-rm -f $(METACODE_STAMP_@CLASSNAME@)
		-rm -f $(@CLASSNAME@_TWO_SCALE_MK)
		-rm -f $(@CLASSNAME@_SLHA_INPUT)
		-rm -f $(@CLASSNAME@_GNUPLOT)

clean-$(MODNAME): clean-$(MODNAME)-src
# END:   NOT EXPORTED ##########################################

clean-$(MODNAME): clean-$(MODNAME)-dep clean-$(MODNAME)-lib clean-$(MODNAME)-obj
		-rm -f $(EXE@CLASSNAME@_EXE)

distclean-$(MODNAME): clean-$(MODNAME)
		@true

clean-obj::     clean-$(MODNAME)-obj

clean::         clean-$(MODNAME)

distclean::     distclean-$(MODNAME)

pack-$(MODNAME)-src:
		tar -czf $(@CLASSNAME@_TARBALL) \
		$(LIB@CLASSNAME@_SRC) $(LIB@CLASSNAME@_HDR) \
		$(EXE@CLASSNAME@_SRC) \
		$(@CLASSNAME@_MK) $(@CLASSNAME@_TWO_SCALE_MK) \
		$(@CLASSNAME@_SLHA_INPUT) $(@CLASSNAME@_GNUPLOT)

$(LIB@CLASSNAME@_SRC) $(LIB@CLASSNAME@_HDR) $(EXE@CLASSNAME@_SRC) \
: run-metacode-$(MODNAME)
		@true

run-metacode-$(MODNAME): $(METACODE_STAMP_@CLASSNAME@)
		@true

ifeq ($(ENABLE_META),yes)
$(METACODE_STAMP_@CLASSNAME@): $(DIR)/start.m $(DIR)/FlexibleSUSY.m $(META_SRC) $(TEMPLATES) $(SARAH_MODEL_FILES_@CLASSNAME@)
		"$(MATH)" -run "Get[\"$<\"]; Quit[]"
		@touch "$(METACODE_STAMP_@CLASSNAME@)"
		@echo "Note: to regenerate @CLASSNAME@ source files," \
		      "please remove the file "
		@echo "\"$(METACODE_STAMP_@CLASSNAME@)\" and run make"
		@echo "---------------------------------"
else
$(METACODE_STAMP_@CLASSNAME@):
		@true
endif

$(LIB@CLASSNAME@_DEP) $(EXE@CLASSNAME@_DEP) $(LIB@CLASSNAME@_OBJ) $(EXE@CLASSNAME@_OBJ): CPPFLAGS += $(GSLFLAGS) $(EIGENFLAGS) $(BOOSTFLAGS) $(TSILFLAGS)

ifneq (,$(findstring yes,$(ENABLE_LOOPTOOLS)$(ENABLE_FFLITE)))
$(LIB@CLASSNAME@_DEP) $(EXE@CLASSNAME@_DEP) $(LIB@CLASSNAME@_OBJ) $(EXE@CLASSNAME@_OBJ): CPPFLAGS += $(LOOPFUNCFLAGS)
endif

$(LIB@CLASSNAME@): $(LIB@CLASSNAME@_OBJ)
		$(MAKELIB) $@ $^

$(DIR)/%.x: $(DIR)/%.o $(LIB@CLASSNAME@) $(LIBFLEXI) $(LIBLEGACY) $(filter-out -%,$(LOOPFUNCLIBS))
		$(CXX) $(LDFLAGS) -o $@ $(call abspathx,$^ $(ADDONLIBS)) $(filter -%,$(LOOPFUNCLIBS)) $(GSLLIBS) $(BOOSTTHREADLIBS) $(THREADLIBS) $(LAPACKLIBS) $(BLASLIBS) $(FLIBS) $(SQLITELIBS) $(TSILLIBS) $(LDLIBS)

ALLDEP += $(LIB@CLASSNAME@_DEP) $(EXE@CLASSNAME@_DEP)
ALLSRC += $(LIB@CLASSNAME@_SRC) $(EXE@CLASSNAME@_SRC)
ALLLIB += $(LIB@CLASSNAME@)
ALLEXE += $(EXE@CLASSNAME@_EXE)
