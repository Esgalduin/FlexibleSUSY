DIR          := @DIR@
MODNAME      := lib@CLASSNAME@

LIB@CLASSNAME@_SRC :=

ifneq ($(findstring two_scale,$(ALGORITHMS)),)
LIB@CLASSNAME@_SRC += \
		$(DIR)/@CLASSNAME@_two_scale_convergence_tester.cpp \
		$(DIR)/@CLASSNAME@_two_scale_high_scale_constraint.cpp \
		$(DIR)/@CLASSNAME@_two_scale_initial_guesser.cpp \
		$(DIR)/@CLASSNAME@_two_scale_low_scale_constraint.cpp \
		$(DIR)/@CLASSNAME@_two_scale_model.cpp \
		$(DIR)/@CLASSNAME@_two_scale_physical.cpp \
		$(DIR)/run_@CLASSNAME@.cpp \
		$(DIR)/@CLASSNAME@_two_scale_susy_parameters.cpp \
		$(DIR)/@CLASSNAME@_two_scale_soft_parameters.cpp \
		$(DIR)/@CLASSNAME@_two_scale_susy_scale_constraint.cpp \
		$(DIR)/@CLASSNAME@_two_scale_utilities.cpp
endif

LIB@CLASSNAME@_OBJ := \
		$(patsubst %.cpp, %.o, $(filter %.cpp, $(LIB@CLASSNAME@_SRC))) \
		$(patsubst %.f, %.o, $(filter %.f, $(LIB@CLASSNAME@_SRC)))

LIB@CLASSNAME@_DEP := \
		$(LIB@CLASSNAME@_OBJ:.o=.d)

$(LIB@CLASSNAME@_DEP) $(LIB@CLASSNAME@_OBJ): CPPFLAGS += $(GSLFLAGS)

LIB@CLASSNAME@     := $(DIR)/$(MODNAME)$(LIBEXT)

RUN_@CLASSNAME@_EXE := $(DIR)/run_@CLASSNAME@.x

.PHONY:         all-$(MODNAME) clean-$(MODNAME) distclean-$(MODNAME)

all-$(MODNAME): $(LIB@CLASSNAME@)

clean-$(MODNAME):
		rm -rf $(LIB@CLASSNAME@_OBJ)

distclean-$(MODNAME): clean-$(MODNAME)
		rm -rf $(LIB@CLASSNAME@_DEP)
		rm -rf $(LIB@CLASSNAME@)

clean::         clean-$(MODNAME)

distclean::     distclean-$(MODNAME)

$(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp: $(DIR)/start.m $(META_SRC) $(TEMPLATES)
	$(MATH) -run "Get[\"$<\"]; Quit[]"

$(DIR)/@CLASSNAME@_two_scale_susy_parameters.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_soft_parameters.hpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_soft_parameters.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_physical.hpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_physical.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_model.hpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_model.hpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_model.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/run_@CLASSNAME@.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_high_scale_constraint.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_susy_scale_constraint.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_low_scale_constraint.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_high_scale_constraint.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_susy_scale_constraint.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_low_scale_constraint.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_convergence_tester.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_initial_guesser.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_initial_guesser.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_utilities.hpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(DIR)/@CLASSNAME@_two_scale_utilities.cpp: $(DIR)/@CLASSNAME@_two_scale_susy_parameters.hpp
	true

$(LIB@CLASSNAME@_DEP) $(LIB@CLASSNAME@_OBJ) $(DIR)/run_@CLASSNAME@.o: CPPFLAGS += $(EIGENFLAGS)

$(LIB@CLASSNAME@): $(LIB@CLASSNAME@_OBJ)
		$(MAKELIB) $@ $^

ifeq ($(ENABLE_LOOPTOOLS),yes)
$(LIB@CLASSNAME@_OBJ) $(LIB@CLASSNAME@_DEP): CPPFLAGS += $(LOOPTOOLSFLAGS)
endif

$(RUN_@CLASSNAME@_EXE): $(DIR)/run_@CLASSNAME@.o $(LIB@CLASSNAME@) $(LIBFLEXI) $(LIBLEGACY)
		$(CXX) -o $@ $(abspath $^) $(GSLLIBS) $(FLIBS) $(LOOPTOOLSLIBS)

ALLDEP += $(LIB@CLASSNAME@_DEP)
ALLLIB += $(LIB@CLASSNAME@)
ALLEXE += $(RUN_@CLASSNAME@_EXE)
