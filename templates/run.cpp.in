#include "@ModelName@_model.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_high_scale_constraint.hpp"
#include "@ModelName@_susy_scale_constraint.hpp"
#include "@ModelName@_low_scale_constraint.hpp"
#include "@ModelName@_convergence_tester.hpp"
#include "@ModelName@_initial_guesser.hpp"

#include "two_scale_running_precision.hpp"
#include "two_scale_solver.hpp"
#include "coupling_monitor.hpp"
#include "error.hpp"
#include "ew_input.hpp"

#include <iostream>
#include <vector>

using namespace std;

class Parameter_getter {
public:
   template <class Rge>
   Eigen::ArrayXd operator()(const Rge& rge) {
      return rge.display();
   }
};

int main()
{
   @ModelName@_input_parameters input;
   @ModelName@_high_scale_constraint high_scale_input(input);
   @ModelName@_susy_scale_constraint susy_scale_input(input);
   @ModelName@_low_scale_constraint  low_scale_input(input);

   std::vector<Constraint<Two_scale>*> upward_constraints;
   upward_constraints.push_back(&low_scale_input);
   upward_constraints.push_back(&high_scale_input);

   std::vector<Constraint<Two_scale>*> downward_constraints;
   downward_constraints.push_back(&high_scale_input);
   downward_constraints.push_back(&susy_scale_input);
   downward_constraints.push_back(&low_scale_input);

   @ModelName@ model(input);

   @ModelName@_convergence_tester convergence_tester(&model, 1.0e-5);
   @ModelName@_initial_guesser initial_guesser(&model, input);
   Two_scale_increasing_precision precision(10.0, 1.0e-5);

   RGFlow<Two_scale> solver;
   solver.set_convergence_tester(&convergence_tester);
   solver.set_running_precision(&precision);
   solver.set_initial_guesser(&initial_guesser);
   solver.add_model(&model, upward_constraints, downward_constraints);

   try {
      solver.solve();
      model.calculate_spectrum();
      model.print(std::cout);
   } catch (Error& error) {
      cout << "Error: " << error.what() << endl;
   } catch (std::string& str) {
      cout << "Error: " << str << endl;
   }

#if 0
   const double gut_scale = high_scale_input.get_scale();
   const double MZ = Electroweak_constants::MZ;
   Coupling_monitor cm;
   Parameter_getter pg;

   model.run_to(MZ);
   cm.run(model, pg, MZ, gut_scale, 100, true);
   cm.write_to_file("@ModelName@_rge_running.dat");
#endif

   return 0;
}
