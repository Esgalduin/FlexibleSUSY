// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_model.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_low_scale_constraint.hpp"
#include "@ModelName@_susy_scale_constraint.hpp"
#include "@ModelName@_convergence_tester.hpp"
#include "@ModelName@_initial_guesser.hpp"
#include "@ModelName@_utilities.hpp"

#include "two_scale_running_precision.hpp"
#include "two_scale_solver.hpp"
#include "error.hpp"
#include "ew_input.hpp"
#include "lowe.h"
#include "command_line_options.hpp"

#include <iostream>
#include <vector>

int main(int argc, const char* argv[])
{
   using namespace flexiblesusy;
   using namespace softsusy;

   Command_line_options options(argc, argv);
   if (options.must_exit())
      return options.status();

   const std::string slha_input_file(options.get_slha_input_file());
   QedQcd oneset;
   @ModelName@_input_parameters input;

   if (!slha_input_file.empty()) {
      @ModelName@_slha_reader slha_reader(slha_input_file);
      slha_reader.fill(oneset);
      slha_reader.fill(input);
   }
   oneset.toMz(); // run SM fermion masses to MZ

   @ModelName@ model(input);
   @ModelName@_low_scale_constraint low_scale_constraint(input, oneset);
   @ModelName@_susy_scale_constraint susy_scale_constraint(input);
   @ModelName@_convergence_tester convergence_tester(&model, 1.0e-5);
   @ModelName@_initial_guesser initial_guesser(&model, input, oneset, low_scale_constraint);
   Two_scale_constant_precision precision(1.0e-5);

   RGFlow<Two_scale> solver;
   solver.set_convergence_tester(&convergence_tester);
   solver.set_running_precision(&precision);
   solver.set_initial_guesser(&initial_guesser);
   std::vector<Constraint<Two_scale>*> constraints;
   constraints.push_back(&low_scale_constraint);
   solver.add_model(&model, constraints);

   try {
      solver.solve();
      model.run_to(susy_scale_constraint.get_scale());
      model.calculate_spectrum();
      model.print(std::cout);
      // @ModelName@_spectrum_plotter plotter;
      // plotter.extract_spectrum(model);
      // plotter.write_to_file("@ModelName@_spectrum.dat");
   } catch (const Error& error) {
      ERROR(error.what());
   } catch (const std::string& str) {
      ERROR(str);
   } catch (const char* str) {
      ERROR(str);
   }

   return 0;
}
