// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_semi_analytic_initial_guesser.hpp"
#include "@ModelName@_semi_analytic_model.hpp"
#include "@ModelName@_semi_analytic_susy_convergence_tester.hpp"
#include "lowe.h"
#include "error.hpp"
#include "ew_input.hpp"
#include "raii.hpp"
#include "wrappers.hpp"
#include "two_scale_running_precision.hpp"
#include "two_scale_solver.hpp"

#include <Eigen/Core>

namespace flexiblesusy {

#define DERIVEDPARAMETER(p) model->p()
#define INPUTPARAMETER(p) model->get_input().p
#define MODELPARAMETER(p) model->get_##p()
#define PHASE(p) model->get_##p()
#define LowEnergyConstant(p) Electroweak_constants::p
#define MODEL model

@ModelName@_initial_guesser<Semi_analytic>::@ModelName@_initial_guesser(
   @ModelName@<Semi_analytic>* model_,
   const softsusy::QedQcd& qedqcd_,
   const @ModelName@_low_scale_constraint<Semi_analytic>& low_constraint_,
   const @ModelName@_susy_scale_constraint<Semi_analytic>& susy_constraint_,
   @ModelName@_high_scale_constraint<Semi_analytic>& high_constraint_
)
   : model(model_)
   , qedqcd(qedqcd_)
   , low_constraint(low_constraint_)
   , susy_constraint(susy_constraint_)
   , high_constraint(high_constraint_)
   , main_high_constraint(&high_constraint_)
{
   if (!model)
      throw SetupError("@ModelName@_initial_guesser: Error: pointer to model"
                       " @ModelName@<Semi_analytic> must not be zero");
}

@ModelName@_initial_guesser<Semi_analytic>::~@ModelName@_initial_guesser()
{
}

/**
 * Guesses the DR-bar model parameters by calling
 * guess_susy_parameters() and guess_soft_parameters() .
 */
void @ModelName@_initial_guesser<Semi_analytic>::guess()
{
   guess_susy_parameters();
   guess_soft_parameters();
}

/**
 * Guesses the SUSY parameters (gauge, Yukawa couplings) at
 * \f$m_\text{top}^\text{pole}\f$ from the Standard Model gauge
 * couplings and fermion masses.  Threshold corrections are ignored.
 * The user-defined initial guess at the low-scale and high-scale
 * are applied, before a two-scale iteration is used to obtain a full
 * initial guess for the SUSY parameters.
 */
void @ModelName@_initial_guesser<Semi_analytic>::guess_susy_parameters()
{
   initial_guess_low_scale_parameters();
   initial_guess_high_scale_parameters();
   solve_susy_parameters();
   if (main_high_constraint)
      main_high_constraint->set_scale(high_constraint.get_scale());
}

void @ModelName@_initial_guesser<Semi_analytic>::initial_guess_low_scale_parameters()
{
   softsusy::QedQcd leAtMt(qedqcd);
   const double MZ = Electroweak_constants::MZ;
   const double MW = Electroweak_constants::MW;
   const double sinThetaW2 = 1.0 - Sqr(MW / MZ);
   const double mtpole = leAtMt.displayPoleMt();

   mu_guess = leAtMt.displayMass(softsusy::mUp);
   mc_guess = leAtMt.displayMass(softsusy::mCharm);
   mt_guess = model->get_thresholds() > 0 ?
      leAtMt.displayMass(softsusy::mTop) - 30.0 :
      leAtMt.displayPoleMt();
   md_guess = leAtMt.displayMass(softsusy::mDown);
   ms_guess = leAtMt.displayMass(softsusy::mStrange);
   mb_guess = leAtMt.displayMass(softsusy::mBottom);
   me_guess = model->get_thresholds() > 0 ?
      leAtMt.displayMass(softsusy::mElectron) :
      leAtMt.displayPoleMel();
   mm_guess = model->get_thresholds() > 0 ?
      leAtMt.displayMass(softsusy::mMuon) :
      leAtMt.displayPoleMmuon();
   mtau_guess = leAtMt.displayMass(softsusy::mTau);

   // guess gauge couplings at mt
   const auto alpha_sm(leAtMt.getGaugeMu(mtpole, sinThetaW2));

@initialGuessAtLowScaleGaugeCouplings@

   model->set_scale(mtpole);

   // apply user-defined initial guess at the low scale
@initialGuessAtLowScale@
}

void @ModelName@_initial_guesser<Semi_analytic>::calculate_DRbar_yukawa_couplings()
{
   calculate_@UpYukawa@_DRbar();
   calculate_@DownYukawa@_DRbar();
   calculate_@ElectronYukawa@_DRbar();
}

/**
 * Calculates the Yukawa couplings @UpYukawa@ of the up-type quarks
 * from the Standard Model up-type quark masses (ignoring threshold
 * corrections).
 */
void @ModelName@_initial_guesser<Semi_analytic>::calculate_@UpYukawa@_DRbar()
{
   Eigen::Matrix<std::complex<double>,3,3> upQuarksDRbar(ZEROMATRIXCOMPLEX(3,3));
   upQuarksDRbar(0,0) = mu_guess;
   upQuarksDRbar(1,1) = mc_guess;
   upQuarksDRbar(2,2) = mt_guess;

@setDRbarUpQuarkYukawaCouplings@
}

/**
 * Calculates the Yukawa couplings @DownYukawa@ of the down-type
 * quarks from the Standard Model down-type quark masses (ignoring
 * threshold corrections).
 */
void @ModelName@_initial_guesser<Semi_analytic>::calculate_@DownYukawa@_DRbar()
{
   Eigen::Matrix<std::complex<double>,3,3> downQuarksDRbar(ZEROMATRIXCOMPLEX(3,3));
   downQuarksDRbar(0,0) = md_guess;
   downQuarksDRbar(1,1) = ms_guess;
   downQuarksDRbar(2,2) = mb_guess;

@setDRbarDownQuarkYukawaCouplings@
}

/**
 * Calculates the Yukawa couplings @ElectronYukawa@ of the leptons
 * from the Standard Model down-type lepton masses (ignoring threshold
 * corrections).
 */
   void @ModelName@_initial_guesser<Semi_analytic>::calculate_@ElectronYukawa@_DRbar()
{
   Eigen::Matrix<std::complex<double>,3,3> downLeptonsDRbar(ZEROMATRIXCOMPLEX(3,3));
   downLeptonsDRbar(0,0) = me_guess;
   downLeptonsDRbar(1,1) = mm_guess;
   downLeptonsDRbar(2,2) = mtau_guess;

@setDRbarElectronYukawaCouplings@
}

void @ModelName@_initial_guesser<Semi_analytic>::initial_guess_high_scale_parameters()
{
   const double high_scale_guess = high_constraint.get_initial_scale_guess();

   model->run_to(high_scale_guess, running_precision);

   // apply high-scale constraint
   high_constraint.set_model(model);
   high_constraint.apply();

   // apply user-defined initial guess at the high scale
@initialGuessAtHighScale@
}

/**
 * Performs an initial iteration for the SUSY parameters, ignoring
 * threshold corrections.
 */
void @ModelName@_initial_guesser<Semi_analytic>::solve_susy_parameters()
{
   const double low_scale_guess = low_constraint.get_initial_scale_guess();
   model->run_to(low_scale_guess, running_precision);

   const auto old_thresholds = model->get_thresholds();
   const auto save_thresholds = make_raii_guard(
      [this, old_thresholds] () { this->model->set_thresholds(old_thresholds); });

   model->set_thresholds(0);

   const softsusy::QedQcd old_low_sm_parameters = low_constraint.get_sm_parameters();
   const auto save_low_sm_parameters = make_raii_guard(
      [this, &old_low_sm_parameters] () { this->low_constraint.set_sm_parameters(old_low_sm_parameters); });
   const softsusy::QedQcd old_susy_sm_parameters = susy_constraint.get_sm_parameters();
   const auto save_susy_sm_parameters = make_raii_guard(
      [this, &old_susy_sm_parameters] () { this->susy_constraint.set_sm_parameters(old_susy_sm_parameters); });

   softsusy::QedQcd tmp_sm_parameters(old_low_sm_parameters);

   tmp_sm_parameters.setMass(softsusy::mUp, mu_guess);
   tmp_sm_parameters.setMass(softsusy::mCharm, mc_guess);
   tmp_sm_parameters.setPoleMt(mt_guess);
   tmp_sm_parameters.setMass(softsusy::mDown, md_guess);
   tmp_sm_parameters.setMass(softsusy::mStrange, ms_guess);
   tmp_sm_parameters.setMass(softsusy::mBottom, mb_guess);
   tmp_sm_parameters.setPoleMel(me_guess);
   tmp_sm_parameters.setPoleMmuon(mm_guess);
   tmp_sm_parameters.setPoleMtau(mtau_guess);

   low_constraint.set_sm_parameters(tmp_sm_parameters);
   susy_constraint.set_sm_parameters(tmp_sm_parameters);

   @ModelName@_susy_convergence_tester<Semi_analytic> convergence_tester(
      model, running_precision);
   Two_scale_increasing_precision precision(10.0, running_precision);

   low_constraint.set_model(model);
   susy_constraint.set_model(model);

   RGFlow<Two_scale> initial_solver;
   initial_solver.set_convergence_tester(&convergence_tester);
   initial_solver.set_running_precision(&precision);
   initial_solver.add(&low_constraint, model);
   initial_solver.add(&high_constraint, model);
   initial_solver.solve();
}

void @ModelName@_initial_guesser<Semi_analytic>::guess_soft_parameters()
{
   const double low_scale_guess = low_constraint.get_initial_scale_guess();
   const double high_scale_guess = high_constraint.get_scale();

   model->run_to(low_scale_guess, running_precision);

   // apply EWSB constraint
   model->calculate_semi_analytic_solutions(high_scale_guess);
   model->solve_ewsb_tree_level();

   // calculate tree-level spectrum
   model->calculate_DRbar_masses();
}

} // namespace flexiblesusy
