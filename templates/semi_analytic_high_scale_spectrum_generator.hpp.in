// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#ifndef @ModelName@_SEMI_ANALYTIC_SPECTRUM_GENERATOR_H
#define @ModelName@_SEMI_ANALYTIC_SPECTRUM_GENERATOR_H

#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_spectrum_generator_interface.hpp"
#include "@ModelName@_spectrum_generator.hpp"
#include "@ModelName@_semi_analytic_high_scale_constraint.hpp"
#include "@ModelName@_semi_analytic_susy_scale_constraint.hpp"
#include "@ModelName@_semi_analytic_low_scale_constraint.hpp"
#include "@ModelName@_semi_analytic_soft_parameters_constraint.hpp"
#include "@ModelName@_semi_analytic_model.hpp"
#include "@ModelName@_model_slha.hpp"

#include <tuple>

namespace softsusy { class QedQcd; }

namespace flexiblesusy {

class Semi_analytic;

template<>
class @ModelName@_spectrum_generator<Semi_analytic>
   : public @ModelName@_spectrum_generator_interface<Semi_analytic> {
public:
   @ModelName@_spectrum_generator() = default;
   virtual ~@ModelName@_spectrum_generator() {}

   std::tuple<@ModelName@<Semi_analytic> > get_models() const { return std::make_tuple(this->get_model()); }
   std::tuple<@ModelName@_slha<@ModelName@<Semi_analytic> > > get_models_slha() const { return std::make_tuple(this->get_model_slha()); }

   double get_high_scale() const { return high_scale_constraint.get_scale(); }
   double get_susy_scale() const { return susy_scale_constraint.get_scale(); }
   double get_low_scale()  const { return low_scale_constraint.get_scale(); }
   double get_pole_mass_scale() const;

   void write_running_couplings(const std::string& filename = "@ModelName@_rgflow.dat") const;

protected:
   virtual void run_except(const softsusy::QedQcd&, const @ModelName@_input_parameters&) override;

private:
   @ModelName@_high_scale_constraint<Semi_analytic> high_scale_constraint{};
   @ModelName@_susy_scale_constraint<Semi_analytic> susy_scale_constraint{};
   @ModelName@_low_scale_constraint<Semi_analytic>  low_scale_constraint{};
   @ModelName@_soft_parameters_constraint<Semi_analytic> soft_constraint{};

   void calculate_spectrum();
};

} // namespace flexiblesusy

#endif
