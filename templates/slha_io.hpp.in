// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#ifndef @ModelName@_SLHA_IO_H
#define @ModelName@_SLHA_IO_H

#include "@ModelName@_two_scale_model_slha.hpp"
#include "@ModelName@_info.hpp"
#include "@ModelName@_physical.hpp"
#include "slha_io.hpp"
#include "ckm.hpp"
#include "ew_input.hpp"

#include <Eigen/Core>
#include <string>
#include <utility>

#define Pole(p) physical.p
#define PHYSICAL(p) model.get_physical().p
#define LOCALPHYSICAL(p) physical.p
#define MODELPARAMETER(p) model.get_##p()
#define DEFINE_PARAMETER(p)                                            \
   typename std::remove_const<typename std::remove_reference<decltype(MODELPARAMETER(p))>::type>::type p;
#define DEFINE_POLE_MASS(p)                                            \
   typename std::remove_const<typename std::remove_reference<decltype(PHYSICAL(p))>::type>::type p;
#define SM(p) Electroweak_constants::p
#define SCALES(p) scales.p

namespace flexiblesusy {

struct @ModelName@_input_parameters;
class Spectrum_generator_settings;

struct @ModelName@_scales {
   @ModelName@_scales() : HighScale(0.), SUSYScale(0.), LowScale(0.) {}
   double HighScale, SUSYScale, LowScale;
};

class @ModelName@_slha_io {
public:
   @ModelName@_slha_io();
   ~@ModelName@_slha_io() {}

   void clear();

   void fill(QedQcd& qedqcd) const { slha_io.fill(qedqcd); }
   void fill(@ModelName@_input_parameters&) const;
   template <class T> void fill(@ModelName@_slha<T>&) const;
   void fill(Spectrum_generator_settings&) const;
   double get_parameter_output_scale() const;
   const SLHA_io& get_slha_io() const { return slha_io; }
   void read_from_file(const std::string&);
   void set_extpar(const @ModelName@_input_parameters&);
   template <class T> void set_extra(const @ModelName@_slha<T>&, const @ModelName@_scales&);
   void set_minpar(const @ModelName@_input_parameters&);
   void set_sminputs(const softsusy::QedQcd&);
   template <class T> void set_spectrum(const @ModelName@_slha<T>&);
   template <class T> void set_spectrum(const @ModelName@<T>&);
   void set_spinfo(const Problems<@ModelName@_info::NUMBER_OF_PARTICLES>&);
   void write_to_file(const std::string&);
   void write_to_stream(std::ostream& ostr = std::cout) { slha_io.write_to_stream(ostr); }

   static void fill_minpar_tuple(@ModelName@_input_parameters&, int, double);
   static void fill_extpar_tuple(@ModelName@_input_parameters&, int, double);
   static void fill_flexiblesusy_tuple(Spectrum_generator_settings&, int, double);

   template <class T>
   static void fill_slhaea(SLHAea::Coll&, const @ModelName@_slha<T>&, const QedQcd&, const @ModelName@_scales&);

   template <class T>
   static SLHAea::Coll fill_slhaea(const @ModelName@_slha<T>&, const QedQcd&);

   template <class T>
   static SLHAea::Coll fill_slhaea(const @ModelName@_slha<T>&, const QedQcd&, const @ModelName@_scales&);

private:
   SLHA_io slha_io; ///< SLHA io class
   static unsigned const NUMBER_OF_DRBAR_BLOCKS = @numberOfDRbarBlocks@;
   static char const * const drbar_blocks[NUMBER_OF_DRBAR_BLOCKS];

   void set_mass(const @ModelName@_physical&, bool);
   void set_mixing_matrices(const @ModelName@_physical&, bool);
   template <class T> void set_model_parameters(const @ModelName@_slha<T>&);
   void set_ckm(const Eigen::Matrix<std::complex<double>,3,3>&, double);
   void set_pmns(const Eigen::Matrix<std::complex<double>,3,3>&, double);
   double read_scale() const;
   template <class T> void fill_drbar_parameters(@ModelName@_slha<T>&) const;
   template <class T> void fill_physical(@ModelName@_slha<T>&) const;
};

/**
 * Reads DR-bar parameters, pole masses and mixing matrices from a
 * SLHA output file.
 */
template <class T>
void @ModelName@_slha_io::fill(@ModelName@_slha<T>& model) const
{
   fill_drbar_parameters(model);
   fill_physical(model);
}

/**
 * Reads DR-bar parameters from a SLHA output file.
 */
template <class T>
void @ModelName@_slha_io::fill_drbar_parameters(@ModelName@_slha<T>& model) const
{
@readLesHouchesOutputParameters@

   model.set_scale(read_scale());
}

/**
 * Reads pole masses and mixing matrices from a SLHA output file.
 */
template <class T>
void @ModelName@_slha_io::fill_physical(@ModelName@_slha<T>& model) const
{
@readLesHouchesPhyicalParameters@
}

template <class T>
void @ModelName@_slha_io::fill_slhaea(
   SLHAea::Coll& slhaea, const @ModelName@_slha<T>& model,
   const QedQcd& qedqcd, const @ModelName@_scales& scales)
{
   @ModelName@_slha_io slha_io;
   const @ModelName@_input_parameters& input = model.get_input();
   const Problems<@ModelName@_info::NUMBER_OF_PARTICLES>& problems
      = model.get_problems();
   const bool error = problems.have_problem();

   slha_io.set_spinfo(problems);
   slha_io.set_sminputs(qedqcd);
   slha_io.set_minpar(input);
   slha_io.set_extpar(input);
   if (!error) {
      slha_io.set_spectrum(model);
      slha_io.set_extra(model, scales);
   }

   slhaea = slha_io.get_slha_io().get_data();
}

template <class T>
SLHAea::Coll @ModelName@_slha_io::fill_slhaea(
   const @ModelName@_slha<T>& model, const QedQcd& qedqcd)
{
   @ModelName@_scales scales;

   return fill_slhaea(model, qedqcd, scales);
}

template <class T>
SLHAea::Coll @ModelName@_slha_io::fill_slhaea(
   const @ModelName@_slha<T>& model, const QedQcd& qedqcd,
   const @ModelName@_scales& scales)
{
   SLHAea::Coll slhaea;
   @ModelName@_slha_io::fill_slhaea(slhaea, model, qedqcd, scales);

   return slhaea;
}

/**
 * Stores the model (DR-bar) parameters in the SLHA object.
 *
 * @param model model class
 */
template <class T>
void @ModelName@_slha_io::set_model_parameters(const @ModelName@_slha<T>& model)
{
@writeSLHAModelParametersBlocks@
}

/**
 * Writes extra SLHA blocks
 *
 * @param model model class
 */
template <class T>
void @ModelName@_slha_io::set_extra(
   const @ModelName@_slha<T>& model, const @ModelName@_scales& scales)
{
   const @ModelName@_physical physical(model.get_physical_slha());

@writeExtraSLHAOutputBlock@
}

/**
 * Stores the model (DR-bar) parameters, masses and mixing matrices in
 * the SLHA object.
 *
 * @param model model class in BPMZ convention
 */
template <class T>
void @ModelName@_slha_io::set_spectrum(const @ModelName@<T>& model)
{
   const @ModelName@_slha<T> model_slha(model);
   set_spectrum(model_slha);
}

/**
 * Stores the model (DR-bar) parameters, masses and mixing matrices in
 * the SLHA object.
 *
 * @param model model class in SLHA convention
 */
template <class T>
void @ModelName@_slha_io::set_spectrum(const @ModelName@_slha<T>& model)
{
   const @ModelName@_physical physical(model.get_physical_slha());
   const bool write_sm_masses = model.do_calculate_sm_pole_masses();

   set_model_parameters(model);
   set_mass(physical, write_sm_masses);
   set_mixing_matrices(physical, write_sm_masses);

   if (slha_io.get_modsel().quark_flavour_violated)
      set_ckm(model.get_ckm_matrix(), model.get_scale());

   if (slha_io.get_modsel().lepton_flavour_violated)
      set_pmns(model.get_pmns_matrix(), model.get_scale());
}

} // namespace flexiblesusy

#endif
