// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#ifndef @ModelName@_STANDARD_MODEL_SPECTRUM_GENERATOR_H
#define @ModelName@_STANDARD_MODEL_SPECTRUM_GENERATOR_H

#include "@ModelName@_spectrum_generator_interface.hpp"
#include "@ModelName@_spectrum_generator.hpp"
#include "@ModelName@_two_scale_high_scale_constraint.hpp"
#include "@ModelName@_two_scale_susy_scale_constraint.hpp"
#include "@ModelName@_two_scale_model.hpp"
#include "@ModelName@_model_slha.hpp"
#include "@ModelName@_standard_model_matching.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_standard_model_two_scale_matching.hpp"
#include "standard_model_two_scale_model.hpp"
#include "standard_model_two_scale_low_scale_constraint.hpp"

#include "lowe.h"
#include "two_scale_solver.hpp"

namespace flexiblesusy {

class Two_scale;

template <>
class @ModelName@_spectrum_generator<Two_scale>
   : public @ModelName@_spectrum_generator_interface<Two_scale> {
public:
   @ModelName@_spectrum_generator()
      : @ModelName@_spectrum_generator_interface<Two_scale>()
      , solver()
      , high_scale_constraint()
      , susy_scale_constraint()
      , low_scale_constraint()
      , matching_up()
      , matching_down()
      , eft()
   {}
   virtual ~@ModelName@_spectrum_generator() {}

   std::tuple<@ModelName@<Two_scale>, standard_model::StandardModel<Two_scale> > get_models() const
   { return std::make_tuple(this->get_model(), eft); }
   std::tuple<@ModelName@_slha<@ModelName@<Two_scale> >, standard_model::StandardModel<Two_scale> > get_models_slha() const
   { return std::make_tuple(this->get_model_slha(), eft); }

   const standard_model::StandardModel<Two_scale>& get_eft() const { return eft; }

   double get_high_scale() const { return high_scale_constraint.get_scale(); }
   double get_susy_scale() const { return susy_scale_constraint.get_scale(); }
   double get_low_scale()  const { return low_scale_constraint.get_scale(); }
   double get_pole_mass_scale() const;
   double get_eft_pole_mass_scale() const;

   void write_running_couplings(const std::string& filename = "@ModelName@_rgflow.dat") const;

protected:
   virtual void run_except(const softsusy::QedQcd&, const @ModelName@_input_parameters&) override;

private:
   RGFlow<Two_scale> solver;
   @ModelName@_high_scale_constraint<Two_scale> high_scale_constraint;
   @ModelName@_susy_scale_constraint<Two_scale> susy_scale_constraint;
   standard_model::Standard_model_low_scale_constraint<Two_scale>  low_scale_constraint;
   @ModelName@_standard_model_matching_up<Two_scale> matching_up;
   @ModelName@_standard_model_matching_down<Two_scale> matching_down;
   standard_model::StandardModel<Two_scale> eft;

   void calculate_spectrum();
};

} // namespace flexiblesusy

#endif
