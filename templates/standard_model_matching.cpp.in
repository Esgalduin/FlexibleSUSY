// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_standard_model_matching.hpp"
#include "wrappers.hpp"
#include "two_scale_matching.hpp"
#include "standard_model.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_info.hpp"
#include "config.h"
#include <cmath>

#ifdef ENABLE_THREADS
#include <thread>
#endif

using namespace flexiblesusy::standard_model;

namespace flexiblesusy {

#define MODELPARAMETER(p) model.get_##p()
#define SMPARAMETER(p) sm.get_##p()
#define INPUTPARAMETER(p) model.get_input().p

namespace {

class Loop_order_setter {
public:
   Loop_order_setter(
      Standard_model* sm_, @ModelName@_mass_eigenstates* model_, unsigned loop_order_)
      : sm(sm_), model(model_), loop_order(loop_order_)
   {
      assert(sm);
      assert(model);

      // store old loop orders
      model_pole_mass_order = model->get_pole_mass_loop_order();
      model_ewsb_order      = model->get_ewsb_loop_order();
      sm_pole_mass_order    = sm->get_pole_mass_loop_order();
      sm_ewsb_order         = sm->get_ewsb_loop_order();

      // temporarily set loop order to `loop_order'
      model->set_pole_mass_loop_order(loop_order);
      model->set_ewsb_loop_order(loop_order);
      sm->set_pole_mass_loop_order(loop_order);
      sm->set_ewsb_loop_order(loop_order);
   }

   ~Loop_order_setter() {
      // reset loop order
      model->set_pole_mass_loop_order(model_pole_mass_order);
      model->set_ewsb_loop_order(model_ewsb_order);
      sm->set_pole_mass_loop_order(sm_pole_mass_order);
      sm->set_ewsb_loop_order(sm_ewsb_order);

      model->calculate_DRbar_masses();
      model->solve_ewsb();
      sm->calculate_DRbar_masses();
      sm->solve_ewsb();
   }
private:
   Standard_model* sm;
   @ModelName@_mass_eigenstates* model;
   unsigned loop_order;            ///< temporary loop order
   unsigned model_pole_mass_order; ///< old model pole mass loop order
   unsigned model_ewsb_order;      ///< old model EWSB loop order
   unsigned sm_pole_mass_order;    ///< old SM pole mass loop order
   unsigned sm_ewsb_order;         ///< old SM EWSB loop order
};

} // anonymous namespace

/**
 * Calculates \f$\lambda(Q)\f$ at the tree level from the lightest
 * CP-even Higgs boson mass of the @ModelName@.
 */
void @ModelName@_standard_model_matching::match_high_to_low_scale_model_tree_level(
   Standard_model& sm, @ModelName@_mass_eigenstates& model)
{
   model.calculate_DRbar_masses();
   sm.set_Lambdax(Sqr(model.get_M@HiggsBoson(0)@/sm.get_v()));
   sm.calculate_DRbar_masses();
}


/**
 * Calculates \f$\lambda(Q)\f$ at the 1-loop level from the lightest
 * CP-even Higgs boson mass of the @ModelName@ by requiring that the
 * 1-loop Higgs pole masses are equal in both models.
 */
void @ModelName@_standard_model_matching::match_high_to_low_scale_model(
   Standard_model& sm, @ModelName@_mass_eigenstates& model, unsigned loop_order)
{
   if (loop_order == 0) {
      match_high_to_low_scale_model_tree_level(sm, model);
      return;
   }

   // temporarily set loop order to `loop_order'
   Loop_order_setter los(&sm, &model, loop_order);

   match_high_to_low_scale_model(sm, model);

   model.get_physical().clear();
   sm.get_physical().clear();
}


/**
 * Calculates \f$\lambda(Q)\f$ at the current loop level from the
 * lightest CP-even Higgs boson mass of the @ModelName@ by requiring
 * that the Higgs pole masses are equal in both models.
 */
void @ModelName@_standard_model_matching::match_high_to_low_scale_model(
   Standard_model& sm, @ModelName@_mass_eigenstates& model)
{
   model.calculate_DRbar_masses();
   model.solve_ewsb();
   model.calculate_M@HiggsBoson@_pole();

   sm.calculate_DRbar_masses();
   sm.solve_ewsb();
   sm.calculate_Mhh_pole();

   sm.set_Lambdax((Sqr(model.get_physical().M@HiggsBoson_0@) - Sqr(sm.get_physical().Mhh) + Sqr(sm.get_Mhh()))/Sqr(sm.get_v()));
}

/**
 * Calculates the gauge and Yukawa couplings and the SM-like VEV in
 * the @ModelName@ at the tree level from the known Standard Model
 * couplings and the SM vev.
 */
void @ModelName@_standard_model_matching::match_low_to_high_scale_model_tree_level(
   @ModelName@_mass_eigenstates& model, Standard_model& sm)
{
   sm.calculate_DRbar_masses();
   model.set_@hyperchargeCoupling@(sm.get_g1()*standard_model_info::normalization_g1/@ModelName@_info::normalization_g1);
   model.set_@leftCoupling@(sm.get_g2()*standard_model_info::normalization_g2/@ModelName@_info::normalization_g2);
   model.set_@strongCoupling@(sm.get_g3()*standard_model_info::normalization_g3/@ModelName@_info::normalization_g3);

   {
      @ModelName@_mass_eigenstates* MODEL = &model;
      const double VEV = sm.get_v();

@applyUserMatching@
   }

   Eigen::Matrix<double, 3, 3> upQuarksDRbar    = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> downQuarksDRbar  = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> downLeptonsDRbar = ZEROMATRIX(3,3);

   for (unsigned gen = 0; gen < 3; gen++) {
      upQuarksDRbar(gen, gen)    = sm.get_MFu(gen);
      downQuarksDRbar(gen, gen)  = sm.get_MFd(gen);
      downLeptonsDRbar(gen, gen) = sm.get_MFe(gen);
   }

@setYukawas@

   model.calculate_DRbar_masses();
}

static void calculate_SM_pole_masses(@ModelName@_mass_eigenstates& model, Standard_model& sm)
{
#ifdef ENABLE_THREADS
#define CLASSNAME @ModelName@_mass_eigenstates

   typedef @ModelName@_mass_eigenstates::Thread Thread;

   model.clear_thread_exception();
   sm.clear_thread_exception();

   std::thread thread_Standard_model_MFu(Standard_model::Thread(&sm, &Standard_model::calculate_MFu_pole));
   std::thread thread_Standard_model_MFd(Standard_model::Thread(&sm, &Standard_model::calculate_MFd_pole));
   std::thread thread_Standard_model_MFe(Standard_model::Thread(&sm, &Standard_model::calculate_MFe_pole));
   std::thread thread_Standard_model_MVW(Standard_model::Thread(&sm, &Standard_model::calculate_MVWp_pole));
   std::thread thread_Standard_model_MVZ(Standard_model::Thread(&sm, &Standard_model::calculate_MVZ_pole));
@callAllSMPoleMassFunctionsThreads@
   thread_Standard_model_MFu.join();
   thread_Standard_model_MFd.join();
   thread_Standard_model_MFe.join();
   thread_Standard_model_MVW.join();
   thread_Standard_model_MVZ.join();

   model.rethrow_thread_exception();
   sm.rethrow_thread_exception();

#undef CLASSNAME
#else
@callAllSMPoleMassFunctions@
   sm.calculate_MFu_pole();
   sm.calculate_MFd_pole();
   sm.calculate_MFe_pole();
   sm.calculate_MVWp_pole();
   sm.calculate_MVZ_pole();
#endif
}

/**
 * Calculates the gauge and Yukawa couplings and the SM-like VEV in
 * the @ModelName@ at the 1-loop level from the known Standard Model
 * couplings and the SM vev.
 */
void @ModelName@_standard_model_matching::match_low_to_high_scale_model(
   @ModelName@_mass_eigenstates& model, Standard_model& sm, unsigned loop_order)
{
   if (loop_order == 0) {
      match_low_to_high_scale_model_tree_level(model, sm);
      return;
   }

   // temporarily set loop order to `loop_order'
   Loop_order_setter los(&sm, &model, loop_order);

   match_low_to_high_scale_model(model, sm);

   model.get_physical().clear();
   sm.get_physical().clear();
}

/**
 * Calculates the gauge and Yukawa couplings and the SM-like VEV in
 * the @ModelName@ at the current loop level from the known Standard
 * Model couplings and the SM vev.
 */
void @ModelName@_standard_model_matching::match_low_to_high_scale_model(
   @ModelName@_mass_eigenstates& model, Standard_model& sm)
{
   Eigen::Matrix<double, 3, 3> upQuarksDRbar    = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> downQuarksDRbar  = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> downLeptonsDRbar = ZEROMATRIX(3,3);

   model.calculate_DRbar_masses();
   model.solve_ewsb();

   sm.calculate_DRbar_masses();
   sm.solve_ewsb();

   const double alpha_em = Sqr(sm.get_g1() * sm.get_g2() * standard_model_info::normalization_g1 * standard_model_info::normalization_g2)
            /(4. * Pi * (Sqr(sm.get_g1()*standard_model_info::normalization_g1) + Sqr(sm.get_g2()*standard_model_info::normalization_g2)));
   const double alpha_s  = Sqr(sm.get_g3() * standard_model_info::normalization_g3)/(4. * Pi);
   const double currentScale = sm.get_scale();
   double delta_alpha_em = 0., delta_alpha_s = 0.;

@gauge1Linit@
@alphaEM1Lmatching@
@alphaS1Lmatching@

   calculate_SM_pole_masses(model, sm);

   // running W, Z masses (via 1L matching)
   const double mW2_1L = Sqr(sm.get_physical().MVWp) - Sqr(model.get_physical().M@VectorW_0@) + Sqr(model.get_M@VectorW(0)@);
   const double mZ2_1L = Sqr(sm.get_physical().MVZ) - Sqr(model.get_physical().M@VectorZ_0@) + Sqr(model.get_M@VectorZ(0)@);

   if (mZ2_1L < 0.)
      model.get_problems().flag_tachyon(@ModelName@_info::@VectorZ@);
   else
      model.get_problems().unflag_tachyon(@ModelName@_info::@VectorZ@);

   if (mW2_1L < 0.)
      model.get_problems().flag_tachyon(@ModelName@_info::@VectorW@);
   else
      model.get_problems().unflag_tachyon(@ModelName@_info::@VectorW@);

@setRunningFermionMasses@

   // define and apply 1L-matched gauge parameters
   const double g1_1L = AbsSqrt(4. * Pi * alpha_em * (1. + delta_alpha_em) * mZ2_1L / mW2_1L) / @ModelName@_info::normalization_g1;
   const double g2_1L = AbsSqrt(4. * Pi * alpha_em * (1. + delta_alpha_em) / (1. - mW2_1L/mZ2_1L)) / @ModelName@_info::normalization_g2;
   const double g3_1L = AbsSqrt(4. * Pi * alpha_s * (1. + delta_alpha_s)) / @ModelName@_info::normalization_g3;

   model.set_@hyperchargeCoupling@(g1_1L);
   model.set_@leftCoupling@(g2_1L);
   model.set_@strongCoupling@(g3_1L);

   {
      @ModelName@_mass_eigenstates* MODEL = &model;
      const double VEV = 2. * AbsSqrt(mZ2_1L/(Sqr(g1_1L*@ModelName@_info::normalization_g1) + Sqr(g2_1L*@ModelName@_info::normalization_g2)));

@applyUserMatching@
   }

@setYukawas@
}

} // namespace flexiblesusy
