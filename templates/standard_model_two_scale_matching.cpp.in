// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_standard_model_two_scale_matching.hpp"
#include "@ModelName@_standard_model_matching.hpp"
#include "@ModelName@_two_scale_model.hpp"
#include "standard_model_two_scale_model.hpp"
#include "error.hpp"
#include "two_scale_constraint.hpp"

#define CLASSNAME @ModelName@_standard_model_Matching<Two_scale>

namespace flexiblesusy {

CLASSNAME::@ModelName@_standard_model_Matching()
   : model(0), eft(0), constraint(0), scale(0.)
{}

CLASSNAME::@ModelName@_standard_model_Matching(
   standard_model::StandardModel<Two_scale>* low_,
   @ModelName@<Two_scale>* high_,
   Constraint<Two_scale>* constraint_)
   : model(high_), eft(low_), constraint(constraint_), scale(0.)
{}

CLASSNAME::~@ModelName@_standard_model_Matching()
{}

double CLASSNAME::get_scale() const
{
   if (scale != 0.)
      return scale;

   if (!constraint)
      throw SetupError("Constraint pointer in matching class is NULL!");

   return constraint->get_scale();
}

void CLASSNAME::set_models(Two_scale_model* low, Two_scale_model* high)
{
   eft = cast_model<standard_model::StandardModel<Two_scale>*>(low);
   model = cast_model<@ModelName@<Two_scale>*>(high);
}

void CLASSNAME::match_high_to_low_scale_model()
{
   if (!model || !eft)
      throw SetupError("Model pointer in matching class is NULL!");
   if (!constraint)
      throw SetupError("Constraint pointer in matching class is NULL!");

   eft->run_to(get_scale());
   model->run_to(get_scale());

   if (!model->get_thresholds())
      @ModelName@_standard_model_matching::match_high_to_low_scale_model_tree_level(*eft, *model);
   else
      @ModelName@_standard_model_matching::match_high_to_low_scale_model(*eft, *model);
}

void CLASSNAME::match_low_to_high_scale_model()
{
   if (!model || !eft)
      throw SetupError("Model pointer in matching class is NULL!");
   if (!constraint)
      throw SetupError("Constraint pointer in matching class is NULL!");

   eft->run_to(get_scale());
   model->run_to(get_scale());

   if (!model->get_thresholds())
      @ModelName@_standard_model_matching::match_low_to_high_scale_model_tree_level(*model, *eft);
   else
      @ModelName@_standard_model_matching::match_low_to_high_scale_model(*model, *eft);
}

void CLASSNAME::match_high_to_low_scale_model_tree_level()
{
   if (!model || !eft)
      throw SetupError("Model pointer in matching class is NULL!");
   if (!constraint)
      throw SetupError("Constraint pointer in matching class is NULL!");

   eft->run_to(get_scale());
   model->run_to(get_scale());

   @ModelName@_standard_model_matching::match_high_to_low_scale_model_tree_level(*eft, *model);
}

void CLASSNAME::match_low_to_high_scale_model_tree_level()
{
   if (!model || !eft)
      throw SetupError("Model pointer in matching class is NULL!");
   if (!constraint)
      throw SetupError("Constraint pointer in matching class is NULL!");

   eft->run_to(get_scale());
   model->run_to(get_scale());

   @ModelName@_standard_model_matching::match_low_to_high_scale_model_tree_level(*model, *eft);
}

void CLASSNAME::set_constraint(Constraint<Two_scale>* constraint_)
{
   constraint = constraint_;
}

void CLASSNAME::set_scale(double scale_)
{
   scale = scale_;
}

} // namespace flexiblesusy
