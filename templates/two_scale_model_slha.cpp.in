// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_two_scale_model_slha.cpp
 * @brief @ModelName@ model class wrapper for SLHA conversion
 */

#include "@ModelName@_two_scale_model_slha.hpp"
#include "slha_io.hpp"
#include "ckm.hpp"

namespace flexiblesusy {

#define CLASSNAME @ModelName@_slha<Two_scale>
#define LOCALPHYSICAL(p) physical.p

CLASSNAME::@ModelName@_slha(const @ModelName@_input_parameters& input_)
   : @ModelName@<Two_scale>(input_)
   , physical_slha()
   , ckm(Eigen::Matrix<std::complex<double>,3,3>::Identity())
{
}

/**
 * Copy constructor.  Copies from base class (two-scale model class in
 * BPMZ convention) and converts parameters to SLHA.
 *
 * @param model_ model class in BPMZ convention
 */
CLASSNAME::@ModelName@_slha(const @ModelName@<Two_scale>& model_)
   : @ModelName@<Two_scale>(model_)
{
   convert_to_slha();
}

CLASSNAME::~@ModelName@_slha()
{
}

void CLASSNAME::clear()
{
   @ModelName@<Two_scale>::clear();
   physical_slha.clear();
}

void CLASSNAME::calculate_spectrum()
{
   @ModelName@<Two_scale>::calculate_spectrum();
   convert_to_slha();
}

void CLASSNAME::convert_to_slha()
{
   physical_slha = get_physical();

   convert_to_slha(physical_slha);

   convert_yukawa_couplings_to_slha();
   calculate_ckm_matrix();
   convert_trilinear_couplings_to_slha();
   convert_soft_squared_masses_to_slha();
}

/**
 * Convert masses and mixing matrices to SLHA convention: Fermion
 * mixing matrices are always real and fermion masses are allowed to
 * be negative.
 *
 * @param physical struct of physical parameters to convert
 */
void CLASSNAME::convert_to_slha(@ModelName@_physical& physical)
{
@convertMixingsToSLHAConvention@
}

void CLASSNAME::calculate_ckm_matrix()
{
@calculateCKMMatrix@
}

/**
 * Convert Yukawa couplings to SLHA convention
 */
void CLASSNAME::convert_yukawa_couplings_to_slha()
{
@convertYukawaCouplingsToSLHA@
}

/**
 * Convert trilinear couplings to SLHA convention
 */
void CLASSNAME::convert_trilinear_couplings_to_slha()
{
@convertTrilinearCouplingsToSLHA@
}

/**
 * Convert trilinear couplings to SLHA convention
 */
void CLASSNAME::convert_soft_squared_masses_to_slha()
{
@convertSoftSquaredMassesToSLHA@
}

const @ModelName@_physical& CLASSNAME::get_physical_slha() const
{
   return physical_slha;
}

@ModelName@_physical& CLASSNAME::get_physical_slha()
{
   return physical_slha;
}

void CLASSNAME::print(std::ostream& ostr) const
{
   @ModelName@<Two_scale>::print(ostr);

   ostr << "----------------------------------------\n"
           "SLHA convention:\n"
           "----------------------------------------\n";
   physical_slha.print(ostr);
}

} // namespace flexiblesusy
