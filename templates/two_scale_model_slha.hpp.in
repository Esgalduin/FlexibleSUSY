// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

/**
 * @file @ModelName@_two_scale_model_slha.hpp
 * @brief contains wrapper class for model class in SLHA convention
 */

// File generated at @DateAndTime@

#ifndef @ModelName@_TWO_SCALE_SLHA_H
#define @ModelName@_TWO_SCALE_SLHA_H

#include "@ModelName@_two_scale_model.hpp"
#include "@ModelName@_physical.hpp"
#include "@ModelName@_model_slha.hpp"
#include "wrappers.hpp"

#define PHYSICAL_SLHA(p) physical_slha.p
#define PHYSICAL_SLHA_REAL(p) Re(physical_slha.p)

namespace flexiblesusy {

class Two_scale;

/**
 * @class @ModelName@_slha<Two_scale>
 * @brief model class wrapper in SLHA convention
 */

template<>
class @ModelName@_slha<Two_scale> : public @ModelName@<Two_scale> {
public:
   explicit @ModelName@_slha(const @ModelName@_input_parameters& input_ = @ModelName@_input_parameters());
   explicit @ModelName@_slha(const @ModelName@<Two_scale>&);
   virtual ~@ModelName@_slha();

   virtual void clear();
   void convert_to_slha(); ///< converts pole masses and couplings to SLHA convention
   const Eigen::Matrix<std::complex<double>,3,3>& get_ckm_matrix() const { return ckm; }
   const Eigen::Matrix<std::complex<double>,3,3>& get_pmns_matrix() const { return pmns; }
   const @ModelName@_physical& get_physical_slha() const; ///< returns pole masses to SLHA convention
   @ModelName@_physical& get_physical_slha(); ///< returns pole masses to SLHA convention

   // interface functions
   virtual void calculate_spectrum();
   virtual void print(std::ostream&) const;

@slhaPoleMassGetters@
@slhaPoleMixingMatrixGetters@
@slhaYukawaGetter@
@slhaTrilinearCouplingsGetter@
@slhaSoftSquaredMassesGetter@
@slhaFerimonMixingMatricesGetters@

private:
   @ModelName@_physical physical_slha; ///< contains the pole masses and mixings in slha convention
   Eigen::Matrix<std::complex<double>,3,3> ckm;
   Eigen::Matrix<std::complex<double>,3,3> pmns;
@slhaYukawaDef@
@slhaFerimonMixingMatricesDef@
@slhaTrilinearCouplingsDef@
@slhaSoftSquaredMassesDef@

   void calculate_ckm_matrix();
   void calculate_pmns_matrix();
   void convert_yukawa_couplings_to_slha();
   void convert_trilinear_couplings_to_slha();
   void convert_soft_squared_masses_to_slha();
};

} // namespace flexiblesusy

#undef PHYSICAL_SLHA
#undef PHYSICAL_SLHA_REAL

#endif
