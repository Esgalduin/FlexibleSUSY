// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_utilities.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "logger.hpp"
#include "wrappers.hpp"
#include "lowe.h"
#include "linalg.h"
#include "config.h"

#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cassert>
#include "boost/format.hpp"

using namespace softsusy;

namespace flexiblesusy {

   namespace {
      /// SLHA line formatter for the MASS block entries
      const boost::format mass_formatter(" %9d   %16.8E   # %s\n");
      /// SLHA line formatter for the mixing matrix entries (NMIX, UMIX, VMIX, ...)
      const boost::format mixing_matrix_formatter(" %2d %2d   %16.8E   # %s\n");
      /// SLHA number formatter
      const boost::format number_formatter("%16.8E");
      /// SLHA line formatter for the one-element entries (HMIX, GAUGE, MSOFT, ...)
      const boost::format single_element_formatter(" %5d   %16.8E   # %s\n");
      /// SLHA line formatter for the SPINFO block entries
      const boost::format spinfo_formatter(" %5d   %s\n");
   }

#define PHYSICAL(p) model.get_physical().p
#define MODELPARAMETER(p) model.get_##p()
#define FORMAT_MASS(pdg,mass,name) \
   boost::format(mass_formatter) % pdg % mass % name
#define FORMAT_MIXING_MATRIX(i,k,entry,name)                            \
   boost::format(mixing_matrix_formatter) % i % k % entry % name
#define FORMAT_ELEMENT(pdg,value,name)                                  \
   boost::format(single_element_formatter) % pdg % value % name
#define FORMAT_NUMBER(n)                                                \
   boost::format(number_formatter) % n

@ModelName@_spectrum_plotter::@ModelName@_spectrum_plotter()
   : spectrum()
   , scale(0.0)
   , width(16)
{
}


void @ModelName@_spectrum_plotter::extract_spectrum(const @ModelName@<Two_scale>& model)
{
   spectrum.clear();
   scale = model.get_scale();

@fillSpectrumVectorWithSusyParticles@
   if (model.do_calculate_sm_pole_masses()) {
@fillSpectrumVectorWithSMParticles@
   }
}

void @ModelName@_spectrum_plotter::write_to_file(const std::string& file_name) const
{
   if (spectrum.empty())
      return;

   std::ofstream filestr(file_name.c_str(), std::ios::out);
   VERBOSE_MSG("@ModelName@_spectrum_plotter::write_to_file: opening file: "
               << file_name.c_str());
   if (filestr.fail()) {
      ERROR("@ModelName@_spectrum_plotter::write_to_file: can't open file "
            << file_name);
      return;
   }

   filestr << "### one-loop pole masses (Q = " << scale << " GeV)\n";
   write_spectrum(spectrum, filestr);

   filestr.close();
   VERBOSE_MSG("@ModelName@_spectrum_plotter::write_to_file: file written: "
               << file_name.c_str());
}

void @ModelName@_spectrum_plotter::write_spectrum(const TSpectrum& spectrum, std::ofstream& filestr) const
{
   for (std::size_t s = 0; s < spectrum.size(); ++s) {
      if (!filestr.good()) {
         ERROR("@ModelName@_spectrum_plotter::write_spectrum: "
               "file stream is corrupted");
         break;
      }

      const std::string& name = spectrum[s].name;
      const std::string& latex_name = spectrum[s].latex_name;
      const std::valarray<double>& masses = spectrum[s].masses;
      const std::size_t multiplicity = masses.size();

      filestr << std::left << "# " << name << '\n';

      for (std::size_t i = 0; i < multiplicity; ++i) {
         std::string lname("$" + latex_name + "$");
         std::stringstream lname_with_index;
         lname_with_index << "$" << latex_name;
         if (multiplicity > 1)
            lname_with_index << "_{" << (i+1) << "}";
         lname_with_index  << "$";

         filestr << std::left << std::setw(width) << s
                 << std::left << std::setw(width) << masses[i]
                 << std::left << std::setw(width) << name
                 << std::left << std::setw(2*width) << lname
                 << std::left << std::setw(2*width) << lname_with_index.str()
                 << '\n';
      }
   }
}

@ModelName@_slha_io::@ModelName@_slha_io()
   : slha_io()
{
}

void @ModelName@_slha_io::set_block(const std::string& name,
                                    const DoubleMatrix& matrix,
                                    const std::string& symbol, double scale)
{
   std::ostringstream ss;
   ss << "Block " << name;
   if (scale != 0.)
      ss << " Q= " << FORMAT_NUMBER(scale);
   ss << '\n';

   for (int i = 1; i <= matrix.displayRows(); ++i)
      for (int k = 1; k <= matrix.displayCols(); ++k) {
         ss << boost::format(mixing_matrix_formatter) % i % k % matrix(i,k)
            % (symbol + "(" + std::to_string(i) + "," + std::to_string(k) + ")");
      }

   slha_io.set_block(ss);
}

void @ModelName@_slha_io::set_block(const std::string& name,
                                    const Eigen::MatrixXd& matrix,
                                    const std::string& symbol, double scale)
{
   std::ostringstream ss;
   ss << "Block " << name;
   if (scale != 0.)
      ss << " Q= " << FORMAT_NUMBER(scale);
   ss << '\n';

   const int rows = matrix.rows();
   const int cols = matrix.cols();
   for (int i = 1; i <= rows; ++i)
      for (int k = 1; k <= cols; ++k) {
         ss << boost::format(mixing_matrix_formatter) % i % k % matrix(i-1,k-1)
            % (symbol + "(" + std::to_string(i) + "," + std::to_string(k) + ")");
      }

   slha_io.set_block(ss);
}

void @ModelName@_slha_io::set_block(const std::string& name,
                                    const ComplexMatrix& matrix,
                                    const std::string& symbol, double scale)
{
   std::ostringstream ss;
   ss << "Block " << name;
   if (scale != 0.)
      ss << " Q= " << FORMAT_NUMBER(scale);
   ss << '\n';

   for (int i = 1; i <= matrix.displayRows(); ++i)
      for (int k = 1; k <= matrix.displayCols(); ++k) {
         ss << boost::format(mixing_matrix_formatter) % i % k
            % Re(matrix(i,k))
            % ("Re(" + symbol + "(" + std::to_string(i) + "," + std::to_string(k) + "))");
      }

   slha_io.set_block(ss);
}

void @ModelName@_slha_io::set_spinfo(const Problems<@ModelName@_info::NUMBER_OF_PARTICLES>& problems)
{
   std::ostringstream serious_problems;
   problems.print(serious_problems);

   std::ostringstream spinfo;
   spinfo << "Block SPINFO\n"
          << boost::format(spinfo_formatter) % 1 % PKGNAME
          << boost::format(spinfo_formatter) % 2 % VERSION;

   if (!serious_problems.str().empty())
      spinfo << boost::format(spinfo_formatter) % 4 % serious_problems.str();

   slha_io.set_block(spinfo);
}

void @ModelName@_slha_io::set_mass(const @ModelName@<Two_scale>& model)
{
@writeSLHAMassBlock@
}

void @ModelName@_slha_io::set_mixing_matrices(const @ModelName@<Two_scale>& model)
{
@writeSLHAMixingMatricesBlocks@
}

void @ModelName@_slha_io::set_model_parameters(const @ModelName@<Two_scale>& model)
{
@writeSLHAModelParametersBlocks@
}

void @ModelName@_slha_io::write_to_file(const std::string& file_name)
{
   slha_io.write_to_file(file_name);
}

void @ModelName@_slha_io::fill(@ModelName@_input_parameters& input) const
{
   using namespace std::placeholders;
   SLHA_io::Tuple_processor minpar_processor
      = std::bind(&@ModelName@_slha_io::fill_minpar_tuple, std::ref(input), _1, _2);
   SLHA_io::Tuple_processor extpar_processor
      = std::bind(&@ModelName@_slha_io::fill_extpar_tuple, std::ref(input), _1, _2);

   slha_io.read_block("MINPAR", minpar_processor);
   slha_io.read_block("EXTPAR", extpar_processor);
}

void @ModelName@_slha_io::fill_minpar_tuple(@ModelName@_input_parameters& input,
                                                int key, double value)
{
@fillInputParametersFromMINPAR@
}

void @ModelName@_slha_io::fill_extpar_tuple(@ModelName@_input_parameters& input,
                                                int key, double value)
{
@fillInputParametersFromEXTPAR@
}

} // namespace flexiblesusy
