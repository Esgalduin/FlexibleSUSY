// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#ifndef @ModelName@_UTILITIES_H
#define @ModelName@_UTILITIES_H

#include "@ModelName@_two_scale_model.hpp"
#include "@ModelName@_info.hpp"
#include "slha_io.hpp"

#include <Eigen/Core>
#include <string>
#include <vector>
#include <valarray>
#include <utility>

namespace flexiblesusy {

class @ModelName@_parameter_getter {
public:
   Eigen::ArrayXd get_parameters(const @ModelName@<Two_scale>& model) {
      return model.display();
   }
   std::vector<std::string> get_parameter_names(const @ModelName@<Two_scale>&) const {
      using namespace @ModelName@_info;
      return std::vector<std::string>(parameter_names,
                                      parameter_names + NUMBER_OF_PARAMETERS);
   }
};

class @ModelName@_spectrum_plotter {
public:
   @ModelName@_spectrum_plotter();
   ~@ModelName@_spectrum_plotter() {}

   void extract_spectrum(const @ModelName@<Two_scale>&);
   void write_to_file(const std::string&) const;

private:
   struct TParticle {
      std::string name;
      std::string latex_name;
      std::valarray<double> masses;
      TParticle(const std::string& name_, const std::string& latex_name_,
                const std::valarray<double>& masses_)
         : name(name_)
         , latex_name(latex_name_)
         , masses(masses_)
         {}
   };
   typedef std::vector<TParticle> TSpectrum;
   TSpectrum spectrum;
   double scale;
   unsigned width;

   void write_spectrum(const TSpectrum&, std::ofstream&) const;
};

struct @ModelName@_input_parameters;

class @ModelName@_slha_io {
public:
   @ModelName@_slha_io();
   ~@ModelName@_slha_io() {}

   void fill(QedQcd& qedqcd) const { slha_io.fill(qedqcd); }
   void fill(@ModelName@_input_parameters&) const;
   void read_from_file(const std::string& file_name) { slha_io.read_from_file(file_name); }
   void set_spinfo(const Problems<@ModelName@_info::NUMBER_OF_PARTICLES>&);
   void write_to_file(const std::string&);
   void write_to_stream(std::ostream& ostr = std::cout) { slha_io.write_to_stream(ostr); }

   static void fill_minpar_tuple(@ModelName@_input_parameters&, int, double);
   static void fill_extpar_tuple(@ModelName@_input_parameters&, int, double);

private:
   SLHA_io slha_io; ///< SLHA io class
};

} // namespace flexiblesusy

#endif
