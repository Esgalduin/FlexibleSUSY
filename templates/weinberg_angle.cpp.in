// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_weinberg_angle.hpp"
#include "wrappers.hpp"
#include "logger.hpp"
#include "numerics2.hpp"
#include "config.h"
#include "numerics.h"
#include "error.hpp"
#include "pv.hpp"

#include <limits>
#include <cmath>

namespace flexiblesusy {

#define CLASSNAME @ModelName@_weinberg_angle

#define MODEL model
#define MODELPARAMETER(p) model->get_##p()
#define INPUTPARAMETER(p) model->get_input().p
#define DERIVEDPARAMETER(p) model->p()
#define SINTHETAW sinThetaW
#define RHOHATRATIO rhohat_ratio
#define GFERMI gfermi
#define MW mw
#define MZ mz
#define MT mt
#define RHO2 rho_2
#define DELTARHAT1LOOP deltaRHat1Loop
#define PIZZTMZ pizzt_MZ
const double ROOT2 = Sqrt(2.0);

CLASSNAME::Sm_parameters::Sm_parameters()
   : fermi_constant(0.)
   , mw_pole(0.)
   , mz_pole(0.)
   , mt_pole(0.)
{
}

/**
 * Sets the maximum number of iterations to 20, the number of loops to 2,
 * the precision goal to 1.0e-8, and the model pointer as well as the
 * SM parameter struct to the ones which are handed over as parameters. 
 *
 * @param model_ pointer to the model for which the calculation shall be done
 * @param sm_parameters_ struct containing the required SM parameters
 */
CLASSNAME::@ModelName@_weinberg_angle(
   const @ModelName@_mass_eigenstates* model_,
   const Sm_parameters& sm_parameters_)
   : number_of_iterations(20)
   , number_of_loops(2)
   , precision_goal(1.0e-8)
   , include_dvbsusy(true)
   , model(model_)
   , sm_parameters(sm_parameters_)
   , pizzt_MZ(0.)
   , piwwt_MW(0.)
   , piwwt_0(0.)
{
}

void CLASSNAME::set_number_of_iterations(unsigned n)
{
   number_of_iterations = n;
}

void CLASSNAME::set_number_of_loops(unsigned n)
{
   number_of_loops = n;
}

void CLASSNAME::set_precision_goal(double p)
{
   precision_goal = p;
}

void CLASSNAME::enable_dvbsusy()
{
   include_dvbsusy = true;
}

void CLASSNAME::disable_dvbsusy()
{
   include_dvbsusy = false;
}

void CLASSNAME::set_model(const @ModelName@_mass_eigenstates* model_)
{
   model = model_;
}

void CLASSNAME::set_sm_parameters(const Sm_parameters& sm_parameters_)
{
   sm_parameters = sm_parameters_;
}

/**
 * Calculates the DR-bar weak mixing angle \f$\sin\hat{\theta}_W\f$ as
 * defined in Eq. (C.3) from hep-ph/9606211 given the Fermi constant,
 * the Z-boson pole mass and the DR-bar electromagnetic coupling as input
 * and taking the tree-level value of the rhohat parameter into account.
 *
 * The function throws an exception of type NoSinThetaWConvergenceError if the
 * iterative procedure to determine the weak mixing angle does not converge.
 *
 * @param sinThetaW_start initial guess for the sine of the weak mixing angle
 *
 * @return sine of the DR-bar weak mixing angle
 */
double CLASSNAME::calculate(double sinThetaW_start)
{
   const double gY         = model->get_@hyperchargeCoupling@() * @hyperchargeCouplingGutNormalization@;
   const double g2         = model->get_@leftCoupling@() * @leftCouplingGutNormalization@;
   const double eDRbar     = gY * g2 / Sqrt(Sqr(gY) + Sqr(g2));
   const double alphaDRbar = Sqr(eDRbar) / (4.0 * Pi);
   const double mw         = sm_parameters.mw_pole;
   const double mz         = sm_parameters.mz_pole;
   const double gfermi     = sm_parameters.fermi_constant;

   pizzt_MZ = calculate_self_energy_@VectorZ@(mz);
   piwwt_MW = calculate_self_energy_@VectorW@(mw);
   piwwt_0  = calculate_self_energy_@VectorW@(0.);

   const double rhohat_tree = calculate_rho_hat_tree();

   unsigned iteration = 0;
   bool not_converged = true;
   double sinThetaW_old = sinThetaW_start;
   double sinThetaW_new = sinThetaW_start;

   while (not_converged && iteration < number_of_iterations) {
      double deltaRhoHat = calculate_delta_rho_hat(sinThetaW_old);

      if (!std::isfinite(deltaRhoHat)) {
#if defined(ENABLE_VERBOSE) || defined(ENABLE_DEBUG)
         WARNING("delta_rho non-finite");
#endif
         deltaRhoHat = 0.;
      }

      double rhohat_ratio;
      if (Abs(deltaRhoHat) < 1.0)
         rhohat_ratio = 1.0 / (1.0 - deltaRhoHat);
      else
         rhohat_ratio = 1.0;

      double deltaRHat = calculate_delta_r_hat(rhohat_ratio, sinThetaW_old);

      if (deltaRHat > 1.) {
#if defined(ENABLE_VERBOSE) || defined(ENABLE_DEBUG)
         WARNING("delta_r_hat > 1");
#endif
         deltaRHat = 0.;
      }

      if (!std::isfinite(deltaRHat)) {
#if defined(ENABLE_VERBOSE) || defined(ENABLE_DEBUG)
         WARNING("delta_r_hat non-finite");
#endif
         deltaRHat = 0.;
      }

      double sin2thetasqO4 = Pi * alphaDRbar /
         (ROOT2 * Sqr(mz) * gfermi * (1.0 - deltaRHat) * rhohat_tree);

      if (sin2thetasqO4 >= 0.25)
         sin2thetasqO4 = 0.25;

      if (sin2thetasqO4 < 0.0)
         sin2thetasqO4 = 0.0;

      const double sin2theta = Sqrt(4.0 * sin2thetasqO4);
      const double theta = 0.5 * ArcSin(sin2theta);

      sinThetaW_new = Sin(theta);

      const double precision = Abs(sinThetaW_old / sinThetaW_new - 1.0);

      VERBOSE_MSG("Iteration step " << iteration
                  << ": prec=" << precision
                  << " dRhoHat=" << deltaRhoHat
                  << " rhohat_ratio=" << rhohat_ratio
                  << " dRHat=" << deltaRHat
                  << " sinThetaW_new=" << sinThetaW_new);

      not_converged = precision >= precision_goal;

      sinThetaW_old = sinThetaW_new;
      iteration++;
   }

   if (not_converged)
      throw NoSinThetaWConvergenceError(number_of_iterations, sinThetaW_new);

   return sinThetaW_new;
}

double CLASSNAME::calculate_rho_hat_tree()
{
   double rhohat_tree = 1.;
@RhoHatTree@
   return rhohat_tree;
}

/**
 * Calculates the \f$\Delta\hat{\rho}\f$ corrections as defined in
 * Eqs. (C.4), (C.6) from hep-ph/9606211 but with the dependency on 
 * rhohat eliminated.
 *
 * @param sinThetaW sin(theta_W)
 *
 * @return \f$\Delta\hat{\rho}\f$ as defined in (C.4) and (C.6) from hep-ph/9606211
 */
double CLASSNAME::calculate_delta_rho_hat(double sinThetaW)
{
   const double gfermi = sm_parameters.fermi_constant;
   const double mw = sm_parameters.mw_pole;
   const double mz = sm_parameters.mz_pole;
   const double mt = sm_parameters.mt_pole;

   double deltaRhoHat1Loop = 0.;
   if (number_of_loops > 0)
      deltaRhoHat1Loop = 1 - (1 + piwwt_MW / Sqr(mw)) / (1 + pizzt_MZ / Sqr(mz));

   std::complex<double> deltaRhoHat2LoopSM(0., 0.);
   if (number_of_loops > 1) {
@DeltaRhoHat2LoopSM@   }

   const double deltaRhoHat2LoopSMreal = std::real(deltaRhoHat2LoopSM);

   const double deltaRhoHat = deltaRhoHat1Loop + deltaRhoHat2LoopSMreal;

   return deltaRhoHat;
}

/**
 * Calculates the \f$\Delta\hat{r}\f$ corrections as defined in
 * Eqs. (C.3), (C.5) from hep-ph/9606211 taking the tree-level
 * value of the rhohat parameter into account.
 *
 * @param rhohat_ratio = rhohat / rhohat_tree
 * @param sinThetaW sin(theta_W)
 *
 * @return \f$\Delta\hat{r}\f$ as defined in (C.3) and (C.5) from hep-ph/9606211
 */
double CLASSNAME::calculate_delta_r_hat(double rhohat_ratio, double sinThetaW)
{
   const double gfermi = sm_parameters.fermi_constant;
   const double mw = sm_parameters.mw_pole;
   const double mz = sm_parameters.mz_pole;
   const double mt = sm_parameters.mt_pole;

   double dvb = 0.;
   if (number_of_loops > 0)
      dvb = calculate_delta_vb(rhohat_ratio, sinThetaW);

   double deltaRHat1Loop = 0.;
   if (number_of_loops > 0)
      deltaRHat1Loop = rhohat_ratio * piwwt_0 / Sqr(mw) - pizzt_MZ / Sqr(mz) + dvb;

   std::complex<double> deltaRHat2LoopSM(0., 0.);
   if (number_of_loops > 1) {
@DeltaRHat2LoopSM@   }

   const double deltaRHat2LoopSMreal = std::real(deltaRHat2LoopSM);

   const double deltaRHat = deltaRHat1Loop + deltaRHat2LoopSMreal;

   return deltaRHat;
}

/**
 * Calculates the vertex, box and external wave-function
 * renormalizations \f$\delta_{\text{VB}}\f$ as given in
 * Eqs. (C.11)-(C.16), (C.20) from hep-ph/9606211.
 *
 * @param rhohat_ratio = rhohat / rhohat_tree
 * @param sinThetaW sin(theta_W)
 *
 * @return \f$\delta_{\text{VB}}\f$ as defined in (C.11) from hep-ph/9606211
 */
double CLASSNAME::calculate_delta_vb(double rhohat_ratio, double sinThetaW)
{
   const double deltaVbSM = calculate_delta_vb_sm(rhohat_ratio, sinThetaW);

   double deltaVbSusy = 0.;
   if (include_dvbsusy)
      deltaVbSusy = calculate_delta_vb_susy(sinThetaW);

   const double deltaVb = deltaVbSM + deltaVbSusy;

   return deltaVb;
}

/**
 * Calculates the Standard Model vertex and box corrections
 * \f$\delta_{\text{VB}}^{\text{SM}}\f$ as given in Eq. (C.12) from
 * hep-ph/9606211 taking the tree-level value of the rhohat parameter
 * into account.
 *
 * @param rhohat_ratio = rhohat / rhohat_tree
 * @param sinThetaW sin(theta_W)
 *
 * @return \f$\delta_{\text{VB}}^{\text{SM}}\f$ as defined in (C.12)
 * from hep-ph/9606211
 */
double CLASSNAME::calculate_delta_vb_sm(
   double rhohat_ratio, double sinThetaW)
{
   const double mz  = sm_parameters.mz_pole;
   const double mw  = sm_parameters.mw_pole;
   const double cw2 = Sqr(mw / mz);
   const double sw2 = 1.0 - cw2;
   const double sinThetaW2 = Sqr(sinThetaW);
   const double outcos2    = 1.0 - sinThetaW2;
   const double q   = model->get_scale();

   const double gY         = model->get_@hyperchargeCoupling@() * @hyperchargeCouplingGutNormalization@;
   const double g2         = model->get_@leftCoupling@() * @leftCouplingGutNormalization@;
   const double eDRbar     = gY * g2 / Sqrt(Sqr(gY) + Sqr(g2));
   const double alphaDRbar = Sqr(eDRbar) / (4.0 * Pi);

   const double deltaVbSM = rhohat_ratio * alphaDRbar / (4.0 * Pi * sinThetaW2) *
      (6.0 + log(cw2) / sw2 *
       (3.5 - 2.5 * sw2 - sinThetaW2 * (5.0 - 1.5 * cw2 / outcos2))
       - 4. * Log(Sqr(mz/q)));

   return deltaVbSM;
}

/**
 * Calculates the SUSY vertex, box and external wave-function
 * renormalizations \f$\delta_{\text{VB}}^{\text{SUSY}}\f$ as given in
 * Eqs. (C.13)-(C.16), (C.20) from hep-ph/9606211 .
 *
 * @param sinThetaW sin(theta_W)
 *
 * @return \f$\delta_{\text{VB}}^{\text{SUSY}}\f$ as defined in (C.13)
 * from hep-ph/9606211
 */
double CLASSNAME::calculate_delta_vb_susy(double sinThetaW)
{
   const double mz         = sm_parameters.mz_pole;
   const double gY         = model->get_@hyperchargeCoupling@() * @hyperchargeCouplingGutNormalization@;
   const double g2         = model->get_@leftCoupling@() * @leftCouplingGutNormalization@;
   const double sinThetaW2 = Sqr(sinThetaW);
   const double outcos2    = 1.0 - sinThetaW2;

   const double eDRbar     = gY * g2 / Sqrt(Sqr(gY) + Sqr(g2));
   const double alphaDRbar = Sqr(eDRbar) / (4.0 * Pi);

   const std::complex<double> a1 = (0., 0.); // delta_vb_box();
   const std::complex<double> deltaVE = (0., 0.); // delta_vb_vertex(0);
   const std::complex<double> deltaVMu = (0., 0.); // delta_vb_vertex(1);
   const std::complex<double> deltaZe = delta_vb_wave_@Electron@(0);
   const std::complex<double> deltaZmu = delta_vb_wave_@Electron@(1);
   const std::complex<double> deltaZnue = delta_vb_wave_@Neutrino@(0);
   const std::complex<double> deltaZnumu = delta_vb_wave_@Neutrino@(1);

   const double deltaVbSusy = oneOver16PiSqr *
      (- sinThetaW2 * outcos2 / (2.0 * Pi * alphaDRbar) * Sqr(mz) * a1.real() +
       deltaVE.real() + deltaVMu.real() +
       0.5 * (deltaZe.real() + deltaZnue.real() + deltaZmu.real() + deltaZnumu.real()));

   return deltaVbSusy;
}

@deltaVBfunctions@

double CLASSNAME::B1(double p, double m1, double m2) const
{
   return -1. * passarino_veltman::ReB1(p*p, m1*m1, m2*m2, Sqr(model->get_scale()));
}

/**
 * Calculates \f$\rho^{(2)}(r)\f$ as given in Eqs. (C.7)-(C.8) from
 * hep-ph/9606211.
 *
 * @param r ratio of Higgs mass over top quark mass
 *
 * @return \f$\rho^{(2)}(r)\f$
 */
double CLASSNAME::rho_2(double r)
{
   const double Pi2 = Pi * Pi;

   if (r <= std::numeric_limits<double>::epsilon()) {
#if defined(ENABLE_VERBOSE) || defined(ENABLE_DEBUG)
      WARNING("rho_2: value of r is invalid: r = " << r);
      WARNING("-> setting 2-loop corrections ~ xt^2 to 0");
#endif
      return 0.;
   }

   if (r <= 1.9) {
      const double r2 = Sqr(r);
      return 19.0 - 16.5 * r + 43.0 / 12.0 * r2 + 7.0 / 120.0 * r2 * r -
         Pi * Sqrt(r) * (4.0 - 1.5 * r + 3.0 / 32.0 * r2 + r2 * r / 256.0) -
         Pi2 * (2.0 - 2.0 * r + 0.5 * r2) - Log(r) * (3.0 * r - 0.5 * r2);
   } else {
      const double rm1 = 1.0 / r, rm2 = Sqr(rm1), rm3 = rm2 * rm1,
         rm4 = rm3 * rm1, rm5 = rm4 * rm1;
      return Sqr(Log(r)) * (1.5 - 9.0 * rm1 - 15.0 * rm2 - 48.0 * rm3 -
                            168.0 * rm4 - 612.0 * rm5) -
         Log(r) * (13.5 + 4.0 * rm1 - 125.0 / 4.0 * rm2 - 558.0 / 5.0 * rm3 -
                   8307.0 / 20.0 * rm4 - 109321.0 / 70.0 * rm5) +
         Pi2 * (1.0 - 4.0 * rm1 - 5.0 * rm2 - 16.0 * rm3 -
                56.0 * rm4 - 204.0 * rm5) +
         49.0 / 4.0 + 2.0 / 3.0 * rm1 + 1613.0 / 48.0 * rm2 + 87.57 * rm3 +
         341959.0 / 1200.0 * rm4 + 9737663.0 / 9800.0 * rm5;
   }
}

/**
 * Calculates 1-loop transverse Z boson self-energy
 * including the correction from usage of pole instead of DRbar top-quark mass.
 *
 * @param p momentum
 *
 * @return 1-loop transverse Z boson self-energy
 */
double CLASSNAME::calculate_self_energy_@VectorZ@(double p)
{
   const double mt      = sm_parameters.mt_pole;
   const double mtDRbar = @GetTopMass@;
   const double pizzt   = Re(model->self_energy_@VectorZ@(p));

   double pizzt_corrected = pizzt;
   if (model->get_thresholds() > 1) {
      pizzt_corrected =
         pizzt - calculate_self_energy_@VectorZ@_top(p, mtDRbar)
               + calculate_self_energy_@VectorZ@_top(p, mt);
   }

   return pizzt_corrected;
}

/**
 * Calculates 1-loop transverse W boson self-energy
 * including the correction from usage of pole instead of DRbar top-quark mass.
 *
 * @param p momentum
 *
 * @return 1-loop transverse W boson self-energy
 */
double CLASSNAME::calculate_self_energy_@VectorW@(double p)
{
   const double mt      = sm_parameters.mt_pole;
   const double mtDRbar = @GetTopMass@;
   const double piwwt   = Re(model->self_energy_@VectorW@(p));

   double piwwt_corrected = piwwt;
   if (model->get_thresholds() > 1) {
      piwwt_corrected =
         piwwt - calculate_self_energy_@VectorW@_top(p, mtDRbar)
               + calculate_self_energy_@VectorW@_top(p, mt);
   }

   return piwwt_corrected;
}

/**
 * Calculates 1-loop top-quark contribution to Z boson self-energy.
 *
 * @param p momentum
 * @param mt top-quark mass
 *
 * @return 1-loop top-quark contribution to Z boson self-energy
 */
double CLASSNAME::calculate_self_energy_@VectorZ@_top(double p, double mt)
{
   const double q   = model->get_scale();
   const double Nc  = 3.0;
   const double gY  = model->get_@hyperchargeCoupling@() * @hyperchargeCouplingGutNormalization@;
   const double g2  = model->get_@leftCoupling@() * @leftCouplingGutNormalization@;
   const double gY2 = Sqr(gY);
   const double g22 = Sqr(g2);
   const double sw2 = gY2 / (gY2 + g22);
   const double cw2 = 1.0 - sw2;
   const double guL = 0.5 - 2.0 * sw2 / 3.0;
   const double guR = 2.0 * sw2 / 3.0;

   const double self_energy_z_top =
      Nc * Sqr(g2) / cw2 * oneOver16PiSqr *
      (hfn(p, mt, mt, q) * (Sqr(guL) + Sqr(guR)) -
       4.0 * guL * guR * Sqr(mt) * b0(p, mt, mt, q));

   return self_energy_z_top;
}

/**
 * Calculates 1-loop top-quark contribution to W boson self-energy.
 *
 * @param p momentum
 * @param mt top-quark mass
 *
 * @return 1-loop top-quark contribution to W boson self-energy
 */
double CLASSNAME::calculate_self_energy_@VectorW@_top(double p, double mt)
{
   const double q  = model->get_scale();
   const double mb = @GetBottomMass@;
   const double Nc = 3.0;
   const double g2 = model->get_@leftCoupling@() * @leftCouplingGutNormalization@;

   const double self_energy_w_top =
      0.5 * Nc * hfn(p, mt, mb, q) * Sqr(g2) * oneOver16PiSqr;

   return self_energy_w_top;
}

} // namespace flexiblesusy
